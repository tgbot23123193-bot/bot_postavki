#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã.
"""

import sys
import asyncio
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.services.browser_manager import BrowserManager
from app.services.redistribution_service import get_redistribution_service
from app.utils.logger import get_logger
from app.config import get_settings

logger = get_logger(__name__)

class BrowserLauncher:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self):
        self.browser_manager = None
        self.browser = None
        
    async def launch_browser(self, user_id: int, headless: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (headless={headless})")
            
            # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä
            self.browser_manager = BrowserManager()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.browser_manager.get_browser(
                user_id=user_id,
                headless=headless,
                debug_mode=True
            )
            
            if not self.browser:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            logger.info(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    async def open_redistribution_page(self, user_id: int):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
        try:
            if not self.browser:
                print("‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            redistribution_service = get_redistribution_service(self.browser_manager)
            result = await redistribution_service.open_redistribution_page(user_id)
            
            if result["success"]:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    async def get_warehouses(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤."""
        try:
            if not self.browser:
                print("‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            redistribution_service = get_redistribution_service(self.browser_manager)
            result = await redistribution_service.get_available_warehouses(user_id)
            
            if result["success"]:
                warehouses = result["warehouses"]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                for i, warehouse in enumerate(warehouses, 1):
                    print(f"  {i}. {warehouse['name']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}")
    
    async def interactive_mode(self, user_id: int):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º."""
        print(f"\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  open - –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        print("  warehouses - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        print("  url - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π URL")
        print("  screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        print("  goto <url> - –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL")
        print("  quit - –í—ã—Ö–æ–¥")
        
        while True:
            try:
                command = input("\nüî∏ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
                
                if command == "quit":
                    break
                elif command == "open":
                    await self.open_redistribution_page(user_id)
                elif command == "warehouses":
                    await self.get_warehouses(user_id)
                elif command == "url":
                    if self.browser and self.browser.page:
                        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {self.browser.page.url}")
                    else:
                        print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                elif command == "screenshot":
                    if self.browser and self.browser.page:
                        screenshot_path = f"screenshots_{user_id}/manual_screenshot.png"
                        Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                        await self.browser.page.screenshot(path=screenshot_path)
                        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                    else:
                        print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                elif command.startswith("goto "):
                    url = command[5:].strip()
                    if self.browser and self.browser.page:
                        await self.browser.page.goto(url)
                        print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                    else:
                        print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                elif command == "help":
                    print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                    print("  open - –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                    print("  warehouses - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                    print("  url - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π URL")
                    print("  screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                    print("  goto <url> - –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL")
                    print("  quit - –í—ã—Ö–æ–¥")
                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä."""
        if self.browser_manager:
            await self.browser_manager.close_all()
            logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("user_id", type=int, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--headless", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ")
    parser.add_argument("--interactive", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    parser.add_argument("--open-redistribution", action="store_true", help="–°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    parser.add_argument("--get-warehouses", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
    
    args = parser.parse_args()
    
    launcher = BrowserLauncher()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        success = await launcher.launch_browser(args.user_id, args.headless)
        if not success:
            return
        
        print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args.user_id}")
        if launcher.browser:
            print(f"üìÇ –ü—Ä–æ—Ñ–∏–ª—å: {launcher.browser.user_data_dir}")
            if launcher.browser.page:
                print(f"üåê –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {launcher.browser.page.url}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if args.open_redistribution:
            await launcher.open_redistribution_page(args.user_id)
        
        if args.get_warehouses:
            await launcher.get_warehouses(args.user_id)
        
        if args.interactive:
            await launcher.interactive_mode(args.user_id)
        else:
            print("\nüí° –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                pass
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await launcher.close()

if __name__ == "__main__":
    asyncio.run(main())


