#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.services.browser_manager import BrowserManager
from app.services.redistribution_service import get_redistribution_service
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def test_warehouse_error_scenario(user_id: int, article: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞."""
    await init_database()
    
    try:
        browser_manager = BrowserManager()
        redistribution_service = get_redistribution_service(browser_manager, fast_mode=False)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
        if not browser:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return
        
        # –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("üìÑ –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
        result = await redistribution_service.open_redistribution_page(user_id)
        if not result["success"]:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {result['error']}")
            return
        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
        
        # –®–∞–≥ 2: –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
        logger.info(f"üìù –®–∞–≥ 2: –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}...")
        result = await redistribution_service.click_redistribution_menu_and_fill_article(user_id, article)
        if not result["success"]:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞: {result['error']}")
            return
        logger.info("‚úÖ –ê—Ä—Ç–∏–∫—É–ª –≤–≤–µ–¥–µ–Ω –∏ —Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω")
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        logger.info("üè™ –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...")
        result = await redistribution_service.get_available_warehouses(user_id)
        if not result["success"]:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {result['error']}")
            return
        
        warehouses = result["warehouses"]
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
        for i, wh in enumerate(warehouses, 1):
            logger.info(f"  {i}. {wh['name']} (ID: {wh['id']})")
        
        if not warehouses:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
            return
        
        # –®–∞–≥ 4: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –æ—à–∏–±–∫–∏
        for i, warehouse in enumerate(warehouses):
            logger.info(f"üéØ –®–∞–≥ 4.{i+1}: –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ '{warehouse['name']}'...")
            
            result = await redistribution_service.select_warehouse(user_id, warehouse)
            
            logger.info(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ë–û–†–ê –°–ö–õ–ê–î–ê '{warehouse['name']}':")
            logger.info(f"  success: {result.get('success')}")
            logger.info(f"  error: {result.get('error')}")
            logger.info(f"  need_retry: {result.get('need_retry')}")
            logger.info(f"  error_messages: {result.get('error_messages')}")
            
            if result.get("success"):
                logger.info(f"‚úÖ –°–∫–ª–∞–¥ '{warehouse['name']}' –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                break
            elif result.get("need_retry") and result.get("error_messages"):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ '{warehouse['name']}':")
                for j, msg in enumerate(result.get("error_messages", []), 1):
                    logger.warning(f"    {j}. {msg}")
                logger.info("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∫–ª–∞–¥...")
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ '{warehouse['name']}': {result.get('error')}")
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º
        logger.info("üñ•Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        while True:
            await asyncio.sleep(60)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    finally:
        await close_database()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID –∏ ARTICLE")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä: python test_warehouse_error_scenario.py 123456789 446796490")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        article = sys.argv[2]
        asyncio.run(test_warehouse_error_scenario(user_id, article))
    except ValueError:
        logger.error("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


