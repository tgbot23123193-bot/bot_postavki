#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.services.database_service import db_service
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def test_api_key_management(user_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏."""
    await init_database()
    
    try:
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
        logger.info("üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ API –∫–ª—é—á–µ–π...")
        existing_keys = await db_service.get_user_api_keys(user_id)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_keys)} API –∫–ª—é—á–µ–π:")
        for i, key in enumerate(existing_keys, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if key.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            valid = "‚úÖ –í–∞–ª–∏–¥–µ–Ω" if key.is_valid else "‚ùå –ù–µ –≤–∞–ª–∏–¥–µ–Ω"
            logger.info(f"  {i}. ID: {key.id}")
            logger.info(f"     üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {key.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
            logger.info(f"     üìÖ –°–æ–∑–¥–∞–Ω: {key.created_at.strftime('%d.%m.%Y %H:%M')}")
            logger.info(f"     üîÑ –°—Ç–∞—Ç—É—Å: {status}")
            logger.info(f"     ‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {valid}")
            logger.info(f"     üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {key.total_requests or 0}")
            if key.last_used:
                logger.info(f"     üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {key.last_used.strftime('%d.%m.%Y %H:%M')}")
            else:
                logger.info(f"     üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ù–∏–∫–æ–≥–¥–∞")
        
        if not existing_keys:
            logger.warning("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç API –∫–ª—é—á–µ–π")
            logger.info("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            return
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        logger.info(f"\nüîç –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
        first_key = existing_keys[0]
        retrieved_key = await db_service.get_api_key_by_id(first_key.id, user_id)
        
        if retrieved_key:
            logger.info(f"‚úÖ –ö–ª—é—á {first_key.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            logger.info(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {retrieved_key.name}")
            logger.info(f"   üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if retrieved_key.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á {first_key.id}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        logger.info(f"\nüîí –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        fake_user_id = user_id + 999999  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        security_test = await db_service.get_api_key_by_id(first_key.id, fake_user_id)
        
        if security_test is None:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: –∫–ª—é—á –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error("‚ùå –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –∫–ª—é—á—É!")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
        logger.info(f"\nüóëÔ∏è –®–∞–≥ 4: –°–∏–º—É–ª—è—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ {first_key.id}...")
        logger.info(f"‚ö†Ô∏è –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        logger.info(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {first_key.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
        logger.info(f"   üìÖ –°–æ–∑–¥–∞–Ω: {first_key.created_at.strftime('%d.%m.%Y %H:%M')}")
        logger.info(f"   üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if first_key.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {first_key.total_requests or 0}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        if len(sys.argv) > 2 and sys.argv[2].lower() == "delete_real":
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ {first_key.id}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation = input(f"–í–≤–µ–¥–∏—Ç–µ 'DELETE {first_key.id}' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            if confirmation == f"DELETE {first_key.id}":
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–ª—é—á {first_key.id}...")
                success = await db_service.delete_api_key(first_key.id, user_id)
                
                if success:
                    logger.info(f"‚úÖ –ö–ª—é—á {first_key.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
                    deleted_check = await db_service.get_api_key_by_id(first_key.id, user_id)
                    if deleted_check is None:
                        logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –∫–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        logger.error("‚ùå –û–®–ò–ë–ö–ê: –∫–ª—é—á –≤—Å–µ –µ—â–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    updated_keys = await db_service.get_user_api_keys(user_id)
                    logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(updated_keys)} –∫–ª—é—á–µ–π")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á {first_key.id}")
            else:
                logger.info("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (–Ω–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)")
        else:
            logger.info("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'delete_real'")
            logger.info(f"   –ü—Ä–∏–º–µ—Ä: python test_api_key_management.py {user_id} delete_real")
        
        logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await close_database()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä—ã:")
        logger.info("   python test_api_key_management.py 123456789")
        logger.info("   python test_api_key_management.py 123456789 delete_real")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        asyncio.run(test_api_key_management(user_id))
    except ValueError:
        logger.error("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


