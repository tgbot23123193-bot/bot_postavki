#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫.
"""

def test_error_cleanup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ (–∫–∞–∫ –∏—Ö –Ω–∞—Ö–æ–¥–∏—Ç —Å–∏—Å—Ç–µ–º–∞)
    raw_errors = [
        "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –¥—Ä—É–≥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞",
        "–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –¥—Ä—É–≥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –æ—à–∏–±–æ–∫:")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –æ—à–∏–±–∫–∏: {len(raw_errors)}")
    for i, error in enumerate(raw_errors, 1):
        print(f"  {i}. '{error}'")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
    error_messages = []
    
    for cleaned_error in raw_errors:
        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        clean_patterns = [
            "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å",
            "–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏", 
            "–∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
            "–≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥",
            "—Å–∫–ª–∞–¥:"
        ]
        
        final_error = cleaned_error
        for pattern in clean_patterns:
            final_error = final_error.replace(pattern, "").replace(pattern.title(), "").replace(pattern.upper(), "")
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        final_error = " ".join(final_error.split())
        
        print(f"\nüßπ –û—á–∏—â–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: '{final_error}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
        if final_error and len(final_error) > 15:
            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –æ—à–∏–±–æ–∫
            is_duplicate = False
            for existing_error in error_messages:
                # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
                if final_error in existing_error or existing_error in final_error:
                    is_duplicate = True
                    print(f"  ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω —Å: '{existing_error}'")
                    break
            
            if not is_duplicate:
                error_messages.append(final_error)
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")
            else:
                print(f"  ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç")
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: {len(error_messages)}")
    for i, error in enumerate(error_messages, 1):
        print(f"  {i}. '{error}'")
    
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1 –æ—à–∏–±–∫–∞
    if len(error_messages) == 1:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ: –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: –î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞")

if __name__ == "__main__":
    test_error_cleanup()


