#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.bot.handlers.api_keys import list_api_keys, manage_api_key
from app.bot.keyboards.inline import APIKeyCallback
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger
from unittest.mock import AsyncMock, MagicMock

logger = get_logger(__name__)

async def test_api_buttons_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ API –∫–ª—é—á–µ–π."""
    await init_database()
    
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback
        mock_callback = AsyncMock()
        mock_callback.from_user.id = 5123262366
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ list
        logger.info("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ 'list'...")
        await list_api_keys(mock_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ edit_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
        if mock_callback.message.edit_text.called:
            call_args = mock_callback.message.edit_text.call_args
            text = call_args[0][0] if call_args[0] else "No text"
            logger.info(f"‚úÖ edit_text –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:200]}...")
            
            if "reply_markup" in call_args[1]:
                logger.info("‚úÖ reply_markup –ø–µ—Ä–µ–¥–∞–Ω –≤ edit_text")
            else:
                logger.error("‚ùå reply_markup –ù–ï –ø–µ—Ä–µ–¥–∞–Ω –≤ edit_text")
        else:
            logger.error("‚ùå edit_text –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manage
        logger.info("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ 'manage'...")
        
        # –°–æ–∑–¥–∞–µ–º callback_data –¥–ª—è manage
        callback_data = APIKeyCallback(action="manage", key_id=1)
        
        await manage_api_key(mock_callback, callback_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        if mock_callback.answer.called:
            answer_calls = mock_callback.answer.call_args_list
            logger.info(f"‚úÖ callback.answer –≤—ã–∑–≤–∞–Ω {len(answer_calls)} —Ä–∞–∑(–∞)")
            for i, call in enumerate(answer_calls):
                args = call[0] if call[0] else []
                message = args[0] if args else "No message"
                logger.info(f"  Call {i+1}: '{message}'")
        else:
            logger.error("‚ùå callback.answer –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω")
        
        logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("\nüîÑ –ü–û–ü–†–û–ë–£–ô–¢–ï –¢–ï–ü–ï–†–¨ –í –ë–û–¢–ï:")
        logger.info("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        logger.info("2. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí üîë API –∫–ª—é—á–∏ ‚Üí üìã –ú–æ–∏ –∫–ª—é—á–∏")
        logger.info("3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á")
        logger.info("4. –î–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ 'üóë –£–¥–∞–ª–∏—Ç—å'")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await close_database()

if __name__ == "__main__":
    asyncio.run(test_api_buttons_fix())


