#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è WB –Ω–∞ Playwright.
–û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏, —Å—Ç–µ–ª—Å —Ä–µ–∂–∏–º, –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å.
"""

import asyncio
import json
import random
import time
from pathlib import Path
from typing import Optional, Dict, Any, List
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
import playwright_stealth
from app.utils.logger import get_logger

logger = get_logger(__name__)


class WBBrowserAutomationPro:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è WB —Å –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏."""
    
    def __init__(self, headless: bool = True, debug_mode: bool = False):
        self.headless = headless
        self.debug_mode = debug_mode
        self.playwright = None
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
        self.cookies_file = Path("wb_cookies.json")
        self.user_data_dir = Path("wb_user_data")  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        ]
        
        # –†–µ–∞–ª—å–Ω—ã–µ viewport —Ä–∞–∑–º–µ—Ä—ã
        self.viewports = [
            {"width": 1920, "height": 1080},
            {"width": 1366, "height": 768},
            {"width": 1440, "height": 900},
            {"width": 1536, "height": 864}
        ]
    
    async def start_browser(self, headless: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Playwright –±—Ä–∞—É–∑–µ—Ä...")
            
            self.playwright = await async_playwright().start()
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            browser_args = [
                "--disable-blink-features=AutomationControlled",
                "--disable-features=VizDisplayCompositor",
                "--disable-extensions-except=",
                "--disable-extensions",
                "--disable-plugins",
                "--disable-infobars",
                "--disable-dev-shm-usage",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding",
                "--disable-field-trial-config",
                "--disable-back-forward-cache",
                "--disable-background-networking",
                "--disable-sync",
                "--disable-translate",
                "--disable-ipc-flooding-protection",
                "--no-first-run",
                "--no-service-autorun",
                "--password-store=basic",
                "--use-mock-keychain",
                "--force-fieldtrials=*BackgroundTracing/default/",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-client-side-phishing-detection",
                "--disable-component-update",
                "--disable-default-apps",
                "--disable-domain-reliability",
                "--disable-features=TranslateUI,BlinkGenPropertyTrees",
                "--disable-ipc-flooding-protection",
                "--enable-features=NetworkService,NetworkServiceInProcess",
                "--force-color-profile=srgb",
                "--metrics-recording-only",
                "--no-default-browser-check",
                "--no-pings",
                "--use-gl=swiftshader",
                "--window-size=1920,1080"
            ]
            
            if not self.headless:
                browser_args.extend([
                    "--start-maximized",
                    "--disable-web-security",
                    "--allow-running-insecure-content"
                ])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.user_data_dir.mkdir(exist_ok=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.browser = await self.playwright.chromium.launch_persistent_context(
                user_data_dir=str(self.user_data_dir),
                headless=self.headless,
                args=browser_args,
                slow_mo=50 if self.debug_mode else 0,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                devtools=self.debug_mode and not self.headless,
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ persistent context
                viewport=random.choice(self.viewports),
                user_agent=random.choice(self.user_agents),
                locale="ru-RU",
                timezone_id="Europe/Moscow",
                geolocation={"latitude": 55.7558, "longitude": 37.6176},  # –ú–æ—Å–∫–≤–∞
                permissions=["geolocation"],
                color_scheme="light",
                reduced_motion="no-preference",
                forced_colors="none",
                java_script_enabled=True,
                accept_downloads=True,
                ignore_https_errors=True,
                bypass_csp=True,
                extra_http_headers={
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                    "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
                    "Accept-Encoding": "gzip, deflate, br",
                    "DNT": "1",
                    "Connection": "keep-alive",
                    "Upgrade-Insecure-Requests": "1",
                    "Sec-Fetch-Dest": "document",
                    "Sec-Fetch-Mode": "navigate",
                    "Sec-Fetch-Site": "none",
                    "Sec-Fetch-User": "?1",
                    "Cache-Control": "max-age=0"
                }
            )
            
            # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ launch_persistent_context, –±—Ä–∞—É–∑–µ—Ä –ò –ï–°–¢–¨ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context = self.browser
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Ä–µ–∂–∏–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            stealth = playwright_stealth.Stealth()
            await stealth.apply_stealth_async(self.page)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            await self._inject_stealth_scripts()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            await self._load_cookies()
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ª–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏: {str(e)}")
            import traceback
            logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            await self.close_browser()
            return False
    
    async def _inject_stealth_scripts(self):
        """–ò–Ω–∂–µ–∫—Ç–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏."""
        stealth_scripts = [
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º webdriver property
            """
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            """,
            
            # –§–∏–∫—Å–∏–º permissions
            """
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
            );
            """,
            
            # –§–∏–∫—Å–∏–º plugins
            """
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            """,
            
            # –§–∏–∫—Å–∏–º languages
            """
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
            """,
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏
            """
            ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout'].forEach(eventType => {
                document.addEventListener(eventType, function(e) {
                    e.isTrusted = true;
                }, true);
            });
            """
        ]
        
        for script in stealth_scripts:
            await self.page.add_init_script(script)
    
    async def _load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏."""
        if self.cookies_file.exists():
            try:
                with open(self.cookies_file, 'r', encoding='utf-8') as f:
                    cookies = json.load(f)
                await self.context.add_cookies(cookies)
                logger.info("üç™ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")
    
    async def _save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏."""
        try:
            cookies = await self.context.cookies()
            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(cookies, f, ensure_ascii=False, indent=2)
            logger.info("üç™ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏: {e}")
    
    async def _human_type(self, selector: str, text: str, delay_range: tuple = (50, 150)):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
        element = await self.page.wait_for_selector(selector, timeout=10000)
        await element.click()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        await element.fill("")
        await asyncio.sleep(random.uniform(0.05, 0.1))
        
        # –í–≤–æ–¥–∏–º –ø–æ —Å–∏–º–≤–æ–ª—É —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        for char in text:
            await element.type(char, delay=random.randint(*delay_range))
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
                await asyncio.sleep(random.uniform(0.1, 0.3))
    
    async def _human_click(self, selector: str, delay_before: tuple = (0.5, 1.5)):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏."""
        await asyncio.sleep(random.uniform(*delay_before))
        
        element = await self.page.wait_for_selector(selector, timeout=10000)
        
        # –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
        await element.hover()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –ö–ª–∏–∫–∞–µ–º
        await element.click()
        await asyncio.sleep(random.uniform(0.2, 0.5))
    
    async def check_if_logged_in(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ WB."""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ WB...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            supplies_url = "https://seller.wildberries.ru/supplies-management/all-supplies"
            response = await self.page.goto(supplies_url, wait_until="networkidle", timeout=15000)
            
            if response and response.status == 200:
                current_url = self.page.url
                logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                is_logged_in = any([
                    'seller.wildberries.ru' in current_url and 'login' not in current_url,
                    'supplies-management' in current_url,
                    'lk-seller.wildberries.ru' in current_url
                ])
                
                if is_logged_in:
                    logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                    return True
                else:
                    logger.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return False
            
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def login_step1_phone(self, phone: str) -> bool:
        """–®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å—é."""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
        kg_selected = False
        country_selector = None
        
        try:
            logger.info("üîê –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ WB...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ URL WB 2024)
            login_urls = [
                "https://seller-auth.wildberries.ru/ru/?redirect_url=https%3A%2F%2Fseller.wildberries.ru%2F&fromSellerLanding",  # –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê
                "https://seller.wildberries.ru/",
                "https://seller-auth.wildberries.ru/",
                "https://lk-seller.wildberries.ru/"
            ]
            
            page_loaded = False
            for url in login_urls:
                try:
                    logger.info(f"üîó –ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å: {url}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
                    response = await self.page.goto(url, wait_until="networkidle", timeout=30000)
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    if response:
                        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                        logger.info(f"üìä URL –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {response.url}")
                        logger.info(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: {response.headers}")
                        
                        if response.status == 200:
                            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {url}")
                            page_loaded = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è {url}")
                    else:
                        logger.error(f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç {url}")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                    current_url = self.page.url
                    logger.info(f"üîç –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏: {current_url}")
                    
                    if "chrome-error" in current_url:
                        logger.error(f"üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–ª—è {url}: {current_url}")
                        continue
                    elif current_url != url:
                        logger.info(f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç: {url} ‚Üí {current_url}")
                        page_loaded = True
                        break
                    else:
                        page_loaded = True
                        break
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
                    continue
            
            if not page_loaded:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
                return False
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–µ–Ω–¥–µ—Ä–∞ React/Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await asyncio.sleep(random.uniform(5, 8))  # –£–≤–µ–ª–∏—á–∏–≤–∞—é –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_content = await self.page.content()
            logger.info(f"üîç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {page_content[:500]}")
            logger.info(f"üîç –†–∞–∑–º–µ—Ä HTML: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ JavaScript –æ—à–∏–±–∫–∏
            try:
                js_errors = await self.page.evaluate("() => window.console.error.toString()")
                logger.info(f"üîç JS –æ—à–∏–±–∫–∏: {js_errors}")
            except:
                pass
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–ø—á—É, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —Ä–µ–¥–∏—Ä–µ–∫—Ç
            current_url = self.page.url
            logger.info(f"üîç –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–∫–∞–ø—á–∞", "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
            page_text = await self.page.inner_text('body')
            suspicious_words = ['–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞', '–∫–∞–ø—á–∞', 'captcha', '–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'access denied', 'blocked', 'bot']
            for word in suspicious_words:
                if word.lower() in page_text.lower():
                    logger.error(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/–∫–∞–ø—á–∞: –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ '{word}'")
                    logger.info(f"üîç –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {page_text[:300]}")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_elements = await self.page.query_selector_all('*')
            logger.info(f"üîç –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(all_elements)}")
            
            # –ò—â–µ–º –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã
            forms = await self.page.query_selector_all('form')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {len(forms)}")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = await self.page.query_selector_all('button')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏
            links = await self.page.query_selector_all('a')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            all_inputs = await self.page.query_selector_all('input, textarea, [contenteditable="true"]')
            if len(all_inputs) == 0:
                logger.warning("üîÑ –ù–ï–¢ –ü–û–õ–ï–ô –í–í–û–î–ê! –ü—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                await self.page.reload(wait_until="networkidle")
                await asyncio.sleep(5)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                all_inputs_after_reload = await self.page.query_selector_all('input, textarea, [contenteditable="true"]')
                logger.info(f"üîç –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: {len(all_inputs_after_reload)}")
                
                if len(all_inputs_after_reload) == 0:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π URL
                    logger.warning("üîÑ –ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL...")
                    try:
                        await self.page.goto("https://lk.wildberries.ru/", wait_until="networkidle")
                        await asyncio.sleep(5)
                        final_inputs = await self.page.query_selector_all('input, textarea, [contenteditable="true"]')
                        logger.info(f"üîç –ù–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º URL –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(final_inputs)}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL: {e}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ª—é–±–æ–≥–æ input –ø–æ–ª—è (–¥–ª—è React/Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π) - —É–≤–µ–ª–∏—á–∏–≤–∞—é timeout
            try:
                await self.page.wait_for_selector('input', timeout=30000)  # 30 —Å–µ–∫—É–Ω–¥
                logger.info("‚úÖ Input –ø–æ–ª—è –ø–æ—è–≤–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞")
            except:
                logger.warning("‚ö†Ô∏è Input –ø–æ–ª—è –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –∏—â—É –≤ iframe –∏ shadow DOM")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe
                frames = self.page.frames
                for frame in frames:
                    try:
                        inputs = await frame.query_selector_all('input')
                        if inputs:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã input –≤ iframe: {len(inputs)}")
                            self.page = frame  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe
                            break
                    except:
                        continue
                
                await asyncio.sleep(3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            
            if self.debug_mode:
                await self.page.screenshot(path="wb_login_page.png")
                logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
            current_url = self.page.url
            page_title = await self.page.title()
            
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç "–í—Ö–æ–¥" - –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if "–í—Ö–æ–¥" in page_title or "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in page_title or "–õ–æ–≥–∏–Ω" in page_title:
                logger.info("‚úÖ –ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞")
            elif "about-portal" in current_url or current_url.endswith("/ru/ru") or ("/seller" in current_url and "auth" not in current_url):
                logger.info("üîÑ –ü–æ–ø–∞–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏—â—É –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
                login_buttons = [
                    # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
                    'a[href*="signin"]',
                    'a[href*="login"]',
                    'a[href*="auth"]',
                    'a[href*="seller-auth"]',
                    'a[href*="lk-seller"]',
                    
                    # –ö–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
                    'button:has-text("–í–æ–π—Ç–∏")',
                    'a:has-text("–í–æ–π—Ç–∏")',
                    'button:has-text("–í—Ö–æ–¥")',
                    'a:has-text("–í—Ö–æ–¥")',
                    'button:has-text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")',
                    'a:has-text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")',
                    'button:has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
                    'a:has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
                    'button:has-text("–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")',
                    'a:has-text("–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")',
                    
                    # Data-–∞—Ç—Ä–∏–±—É—Ç—ã
                    '[data-testid*="login"]',
                    '[data-testid*="auth"]',
                    '[data-testid*="signin"]',
                    '[data-cy*="login"]',
                    '[data-cy*="auth"]',
                    
                    # –ö–ª–∞—Å—Å—ã
                    '.login-button',
                    '.auth-button',
                    '.signin-button',
                    '.btn-login',
                    '.btn-auth',
                    
                    # ID
                    '#login-btn',
                    '#auth-btn',
                    '#signin-btn',
                    '#login',
                    '#auth'
                ]
                
                login_clicked = False
                for selector in login_buttons:
                    try:
                        button = await self.page.query_selector(selector)
                        if button and await button.is_visible():
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {selector}")
                            await button.click()
                            await self.page.wait_for_load_state('networkidle', timeout=10000)
                            login_clicked = True
                            break
                    except:
                        continue
                
                if not login_clicked:
                    logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—é –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥")
                    try:
                        await self.page.goto("https://seller-auth.wildberries.ru/", wait_until="networkidle")
                    except:
                        try:
                            await self.page.goto("https://lk-seller.wildberries.ru/", wait_until="networkidle")
                        except:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
            
            # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è WB 2024)
            phone_selectors = [
                # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã WB
                'input[data-testid="phone-input"]',
                'input[data-testid="login-input"]',
                'input[name="phone"]',
                'input[name="phoneNumber"]',
                'input[name="login"]',
                'input[name="username"]',
                'input[type="tel"]',
                
                # –ü–æ placeholder (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω" i]',
                'input[placeholder*="–Ω–æ–º–µ—Ä" i]',
                'input[placeholder*="phone" i]',
                'input[placeholder*="–¢–µ–ª–µ—Ñ–æ–Ω" i]',
                'input[placeholder*="–ù–æ–º–µ—Ä" i]',
                'input[placeholder*="+7" i]',
                
                # –ü–æ ID
                '#phone',
                '#phoneNumber',
                '#login',
                '#username',
                '#phone-input',
                '#login-input',
                
                # –ü–æ –∫–ª–∞—Å—Å–∞–º
                '.phone-input input',
                '.login-input input',
                '.auth-input input',
                '.form-control[type="tel"]',
                'input[class*="phone" i]',
                'input[class*="login" i]',
                'input[class*="auth" i]',
                
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ React/Vue —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                '[data-cy="phone"]',
                '[data-cy="login"]',
                '[role="textbox"][type="tel"]',
                'input[autocomplete="tel"]',
                'input[autocomplete="username"]',
                
                # Fallback - –ª—é–±–æ–π –≤–∏–¥–∏–º—ã–π input
                'form input[type="text"]:first-of-type',
                'form input[type="tel"]:first-of-type',
                'form input:not([type="hidden"]):first-of-type',
                'input:not([type="hidden"]):not([type="submit"]):not([type="button"]):first-of-type'
            ]
            
            phone_input = None
            for selector in phone_selectors:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∏–¥–∏–º—ã–π
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        phone_input = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {selector}")
                        break
                except:
                    continue
            
            if not phone_input:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ + –ø–æ–∏—Å–∫ –≤ Shadow DOM
                inputs = await self.page.query_selector_all('input')
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(inputs)} input —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                
                # –ò—â–µ–º –≤ Shadow DOM
                if len(inputs) == 0:
                    logger.info("üîç –ò—â—É –≤ Shadow DOM...")
                    shadow_inputs = await self.page.evaluate("""
                        () => {
                            const allElements = document.querySelectorAll('*');
                            let shadowInputs = [];
                            allElements.forEach(el => {
                                if (el.shadowRoot) {
                                    const inputs = el.shadowRoot.querySelectorAll('input');
                                    shadowInputs = shadowInputs.concat(Array.from(inputs));
                                }
                            });
                            return shadowInputs.map(inp => ({
                                type: inp.type,
                                name: inp.name,
                                id: inp.id,
                                placeholder: inp.placeholder,
                                className: inp.className
                            }));
                        }
                    """)
                    if shadow_inputs:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(shadow_inputs)} input –≤ Shadow DOM: {shadow_inputs}")
                
                # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
                all_inputs = await self.page.query_selector_all('input, textarea, [contenteditable="true"], [role="textbox"]')
                logger.info(f"üîç –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (–≤–∫–ª—é—á–∞—è textarea): {len(all_inputs)}")
                
                # –¢–∞–∫–∂–µ –∏—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "—Ç–µ–ª–µ—Ñ–æ–Ω" –∏–ª–∏ "phone"
                all_elements = await self.page.query_selector_all('*')
                phone_related = []
                for el in all_elements[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    try:
                        text = await el.inner_text()
                        if text and ('—Ç–µ–ª–µ—Ñ–æ–Ω' in text.lower() or 'phone' in text.lower() or '–Ω–æ–º–µ—Ä' in text.lower()):
                            tag = await el.evaluate('el => el.tagName')
                            phone_related.append(f"{tag}: {text[:50]}")
                    except:
                        pass
                
                if phone_related:
                    logger.info(f"üì± –≠–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: {phone_related[:10]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = await self.page.title()
                logger.info(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
                url = self.page.url
                logger.info(f"üîó –¢–µ–∫—É—â–∏–π URL: {url}")
                
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö –ß–ï–†–ï–ó JAVASCRIPT
                logger.info("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö input –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ JavaScript...")
                js_inputs = await self.page.evaluate("""
                    () => {
                        // –ò—â–µ–º –í–°–ï input —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ
                        const inputs = Array.from(document.querySelectorAll('input'));
                        const textareas = Array.from(document.querySelectorAll('textarea'));
                        const editables = Array.from(document.querySelectorAll('[contenteditable="true"]'));
                        const textboxes = Array.from(document.querySelectorAll('[role="textbox"]'));
                        
                        const allFields = [...inputs, ...textareas, ...editables, ...textboxes];
                        
                        return allFields.map((el, index) => ({
                            index: index,
                            tagName: el.tagName,
                            type: el.type || 'unknown',
                            name: el.name || '',
                            id: el.id || '',
                            className: el.className || '',
                            placeholder: el.placeholder || '',
                            value: el.value || '',
                            visible: el.offsetParent !== null,
                            display: window.getComputedStyle(el).display,
                            visibility: window.getComputedStyle(el).visibility,
                            outerHTML: el.outerHTML.substring(0, 200)
                        }));
                    }
                """)
                
                if js_inputs:
                    logger.info(f"üéØ JavaScript –Ω–∞—à–µ–ª {len(js_inputs)} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞:")
                    for inp in js_inputs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        logger.info(f"  JS –ø–æ–ª–µ: {inp}")
                else:
                    logger.error("üíÄ JavaScript –ù–ï –ù–ê–®–ï–õ –ù–ò –û–î–ù–û–ì–û –ü–û–õ–Ø –í–í–û–î–ê!")
                
                for i, inp in enumerate(inputs):
                    try:
                        attrs = await inp.evaluate("""el => ({
                            type: el.type,
                            name: el.name,
                            id: el.id,
                            className: el.className,
                            placeholder: el.placeholder,
                            visible: !el.hidden && el.offsetParent !== null
                        })""")
                        logger.info(f"  {i+1}. {attrs}")
                    except:
                        pass
                return False
            
            # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∏—Ä–≥–∏–∑—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
            if phone.startswith('+996'):
                logger.info("üá∞üá¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∏—Ä–≥–∏–∑—Å–∫–∏–π –Ω–æ–º–µ—Ä, –∏—â—É –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞...")
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–ª–∞–∂–∫–∞...")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    page_text = await self.page.inner_text('body')
                    logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ '+7': {'+7' in page_text}")
                    logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'RU': {'RU' in page_text}")
                    logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'üá∑üá∫': {'üá∑üá∫' in page_text}")
                    
                    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º +7
                    plus7_elements = await self.page.query_selector_all('*')
                    plus7_count = 0
                    for el in plus7_elements[:50]:  # –ü–µ—Ä–≤—ã–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        try:
                            text = await el.inner_text()
                            if text and '+7' in text:
                                plus7_count += 1
                                tag_name = await el.evaluate('el => el.tagName')
                                class_name = await el.evaluate('el => el.className || ""')
                                is_visible = await el.is_visible()
                                logger.info(f"üéØ –≠–ª–µ–º–µ–Ω—Ç —Å +7: {tag_name} class='{class_name}' visible={is_visible} text='{text[:50]}'")
                        except:
                            continue
                    logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å +7: {plus7_count}")
                    
                    # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏)
                    images = await self.page.query_selector_all('img')
                    logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(images)}")
                    for i, img in enumerate(images[:10]):  # –ü–µ—Ä–≤—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        try:
                            src = await img.get_attribute('src')
                            alt = await img.get_attribute('alt')
                            is_visible = await img.is_visible()
                            logger.info(f"  {i+1}. IMG src='{src}' alt='{alt}' visible={is_visible}")
                        except:
                            continue
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
                # –ò—â–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞ (—Ñ–ª–∞–∂–æ–∫ –†–§ –∏ +7)
                country_selectors = [
                    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: WB SVG —Ñ–ª–∞–≥–∏ (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏)
                    'img[src*="country-flags/ru.svg"]',
                    'img[src*="/ru.svg"]',
                    '*:has(img[src*="country-flags/ru.svg"])',
                    'div:has(img[src*="/ru.svg"])',
                    'button:has(img[src*="/ru.svg"])',
                    
                    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –∏–º–µ–Ω–Ω–æ —Ñ–ª–∞–≥ –†–§ –∏ +7
                    '*:has-text("+7")',
                    'div:has-text("+7")',
                    'button:has-text("+7")',
                    'span:has-text("+7")',
                    'text="+7"',
                    
                    # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–ª–∞–≥ —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã
                    '*:has-text("üá∑üá∫")',
                    'div:has-text("üá∑üá∫")',
                    'button:has-text("üá∑üá∫")',
                    '*:has-text("RU")',
                    
                    # –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ñ–ª–∞–≥–æ–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                    'img[alt*="Russia"]',
                    'img[alt*="Russian"]',
                    'img[alt*="RU"]',
                    'img[src*="ru"]',
                    'img[src*="russia"]',
                    
                    # –§–ª–∞–∂–æ–∫ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
                    'div[class*="flag"]',
                    'button[class*="flag"]', 
                    'span[class*="flag"]',
                    '.flag-dropdown',
                    '.country-flag',
                    
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä—è–¥–æ–º —Å input –ø–æ–ª–µ–º
                    'input[data-testid="phone-input"] ~ div',
                    'input[data-testid="phone-input"] + div',
                    
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
                    '[data-testid="country-selector"]',
                    '.country-select',
                    'select[name="country"]',
                    'div[class*="country"]',
                    'button[class*="country"]',
                    '.phone-country-selector',
                    '[role="combobox"]',
                    
                    # –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å —Ñ–ª–∞–≥–æ–º
                    'div:has(img[alt*="flag"])',
                    'button:has(img[alt*="flag"])',
                    'div:has(.flag)',
                    'button:has(.flag)'
                ]
                
                country_selector = None
                for selector in country_selectors:
                    try:
                        logger.info(f"üîç –ü—Ä–æ–±—É—é —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                        element = await self.page.query_selector(selector)
                        if element and await element.is_visible():
                            country_selector = element
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω—ã: {selector}")
                            break
                        elif element:
                            logger.info(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≤–∏–¥–∏–º—ã–π: {selector}")
                        else:
                            logger.info(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                        continue
                
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ–ª–∞–∂–æ–∫, –∏—â–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
                if not country_selector:
                    logger.warning("üîç –§–ª–∞–∂–æ–∫ –†–§/+7 –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
                    
                    # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö: –ò—â–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ +7 –∏–ª–∏ —Ñ–ª–∞–≥ –†–§
                    try:
                        logger.info("üîç –ò—â—É –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å +7 –∏–ª–∏ —Ñ–ª–∞–≥–æ–º –†–§...")
                        all_elements = await self.page.query_selector_all('*')
                        
                        for element in all_elements[:100]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            try:
                                inner_text = await element.inner_text()
                                if inner_text and ('+7' in inner_text or 'üá∑üá∫' in inner_text or 'RU' in inner_text):
                                    is_visible = await element.is_visible()
                                    if is_visible:
                                        tag_name = await element.evaluate('el => el.tagName')
                                        class_name = await element.evaluate('el => el.className || ""')
                                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å +7/–†–§: {tag_name} class='{class_name}' text='{inner_text[:30]}'")
                                        
                                        # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                                        try:
                                            await element.click()
                                            logger.info("‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å +7/–†–§, –æ–∂–∏–¥–∞—é –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫...")
                                            await asyncio.sleep(3)
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
                                            dropdown_selectors = ['ul', 'div[role="listbox"]', '.dropdown', '[role="menu"]', 'li']
                                            dropdown_found = False
                                            for dropdown_sel in dropdown_selectors:
                                                dropdowns = await self.page.query_selector_all(dropdown_sel)
                                                for dropdown in dropdowns:
                                                    if await dropdown.is_visible():
                                                        dropdown_text = await dropdown.inner_text()
                                                        if dropdown_text and ('996' in dropdown_text or '–ö—ã—Ä–≥—ã–∑' in dropdown_text or 'Kyrgyz' in dropdown_text):
                                                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–æ–º!")
                                                            dropdown_found = True
                                                            break
                                                if dropdown_found:
                                                    break
                                            
                                            if dropdown_found:
                                                # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É
                                                kg_terms = ['996', '–ö—ã—Ä–≥—ã–∑', 'Kyrgyz', 'KG']
                                                for term in kg_terms:
                                                    try:
                                                        kg_elements = await self.page.query_selector_all(f'*:has-text("{term}")')
                                                        for kg_el in kg_elements:
                                                            if await kg_el.is_visible():
                                                                await kg_el.click()
                                                                logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –≤—ã–±—Ä–∞–Ω –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –ø–æ —Ç–µ—Ä–º–∏–Ω—É: {term}")
                                                                kg_selected = True
                                                                await asyncio.sleep(2)
                                                                break
                                                        if kg_selected:
                                                            break
                                                    except:
                                                        continue
                                                
                                                if kg_selected:
                                                    country_selector = element  # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä
                                                    break
                                        except Exception as click_error:
                                            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {click_error}")
                                            continue
                            except:
                                continue
                            
                            if kg_selected:
                                break
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
                    
                    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    if not country_selector:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞
                            phone_container = await self.page.query_selector('input[data-testid="phone-input"]')
                            if phone_container:
                                # –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                parent = await phone_container.query_selector('..')  # –†–æ–¥–∏—Ç–µ–ª—å
                                if parent:
                                    siblings = await parent.query_selector_all('*')
                                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {len(siblings)}")
                                    
                                    for i, sibling in enumerate(siblings[:10]):  # –ü–µ—Ä–≤—ã–µ 10
                                        try:
                                            tag_name = await sibling.evaluate('el => el.tagName')
                                            class_name = await sibling.evaluate('el => el.className')
                                            inner_text = await sibling.evaluate('el => el.innerText?.substring(0, 50)')
                                            is_clickable = await sibling.evaluate('el => el.onclick !== null || el.style.cursor === "pointer"')
                                            
                                            logger.info(f"  {i+1}. {tag_name} class='{class_name}' text='{inner_text}' clickable={is_clickable}")
                                            
                                            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–ª–∞–≥ –∏–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
                                            if (class_name and ('flag' in class_name.lower() or 'country' in class_name.lower())) or \
                                               (inner_text and ('+7' in inner_text or 'RU' in inner_text or 'üá∑üá∫' in inner_text)):
                                                logger.info(f"üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –§–õ–ê–ñ–û–ö –Ω–∞–π–¥–µ–Ω: {tag_name}")
                                                country_selector = sibling
                                                break
                                                
                                        except Exception as e:
                                            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                                            continue
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    if not country_selector:
                        logger.info("üîç –ò—â—É —Ñ–ª–∞–∂–æ–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                        try:
                            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ñ–ª–∞–≥–æ–º –∏–ª–∏ +7
                            flag_candidates = await self.page.query_selector_all('*')
                            for candidate in flag_candidates[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50
                                try:
                                    text = await candidate.inner_text()
                                    if text and ('+7' in text or 'RU' in text or 'üá∑üá∫' in text):
                                        is_visible = await candidate.is_visible()
                                        if is_visible:
                                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å +7: '{text[:30]}' - –ø—Ä–æ–±—É—é –∫–∞–∫ —Ñ–ª–∞–∂–æ–∫")
                                            country_selector = candidate
                                            break
                                except:
                                    continue
                        except:
                            pass
                    
                    # –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞
                    if not country_selector:
                        logger.info("üéØ –ü—Ä–æ–±—É—é –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞...")
                        try:
                            phone_field = await self.page.query_selector('input[data-testid="phone-input"]')
                            if phone_field:
                                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è –≤–≤–æ–¥–∞
                                box = await phone_field.bounding_box()
                                if box:
                                    # –ö–ª–∏–∫–∞–µ–º —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–º –≥–¥–µ —Ñ–ª–∞–∂–æ–∫)
                                    flag_x = box['x'] - 30  # 30 –ø–∏–∫—Å–µ–ª–µ–π –ª–µ–≤–µ–µ –ø–æ–ª—è
                                    flag_y = box['y'] + box['height'] / 2  # –ü–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≤—ã—Å–æ—Ç–µ
                                    
                                    logger.info(f"üéØ –ö–ª–∏–∫–∞—é –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Ñ–ª–∞–∂–∫–∞: x={flag_x}, y={flag_y}")
                                    await self.page.mouse.click(flag_x, flag_y)
                                    await asyncio.sleep(3)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                                    dropdown_appeared = False
                                    dropdown_selectors = ['ul', 'div[role="listbox"]', '.dropdown', '[role="menu"]']
                                    for dropdown_sel in dropdown_selectors:
                                        dropdown = await self.page.query_selector(dropdown_sel)
                                        if dropdown and await dropdown.is_visible():
                                            logger.info(f"‚úÖ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—è–≤–∏–ª—Å—è: {dropdown_sel}")
                                            dropdown_appeared = True
                                            break
                                    
                                    if dropdown_appeared:
                                        # –ò—â–µ–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è —Å–ø–∏—Å–∫–µ
                                        kg_found = False
                                        kg_search_terms = ['996', '–ö—ã—Ä–≥—ã–∑', 'Kyrgyz', 'KG']
                                        for term in kg_search_terms:
                                            try:
                                                kg_element = await self.page.query_selector(f'text="{term}"')
                                                if not kg_element:
                                                    kg_element = await self.page.query_selector(f'[title*="{term}"]')
                                                if not kg_element:
                                                    kg_element = await self.page.query_selector(f'*:has-text("{term}")')
                                                
                                                if kg_element and await kg_element.is_visible():
                                                    await kg_element.click()
                                                    logger.info(f"‚úÖ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤—ã–±—Ä–∞–Ω –ø–æ —Ç–µ—Ä–º–∏–Ω—É: {term}")
                                                    kg_selected = True
                                                    kg_found = True
                                                    await asyncio.sleep(2)
                                                    break
                                            except:
                                                continue
                                        
                                        if not kg_found:
                                            logger.warning("‚ö†Ô∏è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ")
                                    else:
                                        logger.warning("‚ö†Ô∏è –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {e}")
                
                if country_selector:
                    try:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω—ã, –∫–ª–∏–∫–∞—é: {country_selector}")
                        
                        # –®–ê–ì 1: –ö–ª–∏–∫–∞–µ–º –ø–æ —Ñ–ª–∞–∂–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω
                        await country_selector.click()
                        logger.info("üîΩ –ö–ª–∏–∫–Ω—É–ª –ø–æ —Ñ–ª–∞–∂–∫—É, –æ–∂–∏–¥–∞—é –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫...")
                        await asyncio.sleep(3)  # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
                        
                        # –®–ê–ì 2: –ò—â–µ–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
                        kg_options = [
                            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: WB SVG —Ñ–ª–∞–≥ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
                            'img[src*="country-flags/kg.svg"]',
                            'img[src*="/kg.svg"]',
                            '*:has(img[src*="country-flags/kg.svg"])',
                            'div:has(img[src*="/kg.svg"])',
                            'li:has(img[src*="/kg.svg"])',
                            'option:has(img[src*="/kg.svg"])',
                            
                            # –ü–æ —Ç–µ–∫—Å—Ç—É –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
                            'text="–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"',
                            'text="–ö–∏—Ä–≥–∏–∑–∏—è"', 
                            'text="Kyrgyzstan"',
                            'text="–ö—ã—Ä–≥—ã–∑"',
                            
                            # –ü–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã +996
                            'text="+996"',
                            'text="996"',
                            'li:has-text("996")',
                            'option:has-text("996")',
                            'div:has-text("996")',
                            'span:has-text("996")',
                            
                            # –ü–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                            '[data-country="KG"]',
                            '[data-country="996"]',
                            '[data-code="996"]',
                            '[value="996"]',
                            '[title*="996"]',
                            '[alt*="Kyrgyz"]',
                            
                            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                            'li:has-text("–ö—ã—Ä–≥—ã–∑")',
                            'div:has-text("–ö—ã—Ä–≥—ã–∑")',
                            'option:has-text("–ö—ã—Ä–≥—ã–∑")'
                        ]
                        
                        kg_selected_in_dropdown = False
                        for option_selector in kg_options:
                            try:
                                logger.info(f"üîç –ò—â—É –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {option_selector}")
                                kg_option = await self.page.query_selector(option_selector)
                                if kg_option:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
                                    is_visible = await kg_option.is_visible()
                                    logger.info(f"üìç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç, –≤–∏–¥–∏–º—ã–π: {is_visible}")
                                    
                                    if is_visible:
                                        await kg_option.click()
                                        logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –≤—ã–±—Ä–∞–Ω–∞ –ö–∏—Ä–≥–∏–∑–∏—è: {option_selector}")
                                        kg_selected = True  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                                        kg_selected_in_dropdown = True
                                        await asyncio.sleep(2)  # –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
                                        break
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {option_selector}: {e}")
                                continue
                        
                        if not kg_selected_in_dropdown:
                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω")
                            logger.info("üîç –ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏...")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            try:
                                all_options = await self.page.query_selector_all('li, option, div[role="option"]')
                                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ü–∏–π –≤ —Å–ø–∏—Å–∫–µ: {len(all_options)}")
                                
                                for i, option in enumerate(all_options[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                                    try:
                                        text = await option.inner_text()
                                        if text and len(text.strip()) > 0:
                                            logger.info(f"  {i+1}. '{text.strip()}'")
                                    except:
                                        pass
                            except:
                                pass
                        else:
                            logger.info("üéØ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤—ã–±—Ä–∞–Ω, –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ +996")
                    
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã (—Ñ–ª–∞–∂–æ–∫)")
            
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
            logger.info(f"üì± –í–≤–æ–∂—É –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –î–ª—è –∫–∏—Ä–≥–∏–∑—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–≤–æ–¥–∞
            if phone.startswith('+996'):
                # –ï—Å–ª–∏ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –±—ã–ª –≤—ã–±—Ä–∞–Ω, –≤–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –∫–æ–¥–∞
                if kg_selected:
                    logger.info("üì± –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –≤—ã–±—Ä–∞–Ω, –≤–≤–æ–∂—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã...")
                    clean_phone = phone[4:]  # –£–±–∏—Ä–∞–µ–º +996, –æ—Å—Ç–∞–µ—Ç—Å—è 500441234
                    await self._human_type(phone_input, clean_phone)
                    logger.info(f"‚úÖ –í–≤–µ–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã: {clean_phone}")
                else:
                    logger.info("üì± –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞...")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 1: –í–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä
                    logger.info("üì± –ü–æ–ø—ã—Ç–∫–∞ 1: –í–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ +996...")
                    await self._human_type(phone_input, phone)
                    await asyncio.sleep(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ –ø–æ–ª–µ
                    try:
                        current_value = await self.page.evaluate(f'document.querySelector(`{phone_input}`).value')
                        logger.info(f"üîç –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞: '{current_value}'")
                        
                        # –ï—Å–ª–∏ WB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏–ª +7 –≤–º–µ—Å—Ç–æ +996, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                        if current_value and ('+7' in current_value or current_value.startswith('7') or '996' not in current_value):
                            logger.warning("‚ö†Ô∏è WB –ø–æ–¥—Å—Ç–∞–≤–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
                            
                            # –ü–æ–ø—ã—Ç–∫–∞ 2: –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                            phone_element = await self.page.query_selector(phone_input)
                            await phone_element.click()
                            await phone_element.fill("")  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                            await asyncio.sleep(1)
                            
                            # –í–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
                            clean_phone = phone[4:]  # –£–±–∏—Ä–∞–µ–º +996
                            logger.info(f"üì± –ü–æ–ø—ã—Ç–∫–∞ 2: –í–≤–æ–¥ –±–µ–∑ –∫–æ–¥–∞: {clean_phone}")
                            await self._human_type(phone_input, clean_phone)
                            await asyncio.sleep(2)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
                            final_value = await self.page.evaluate(f'document.querySelector(`{phone_input}`).value')
                            logger.info(f"üîç –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ: '{final_value}'")
                        else:
                            logger.info("‚úÖ –ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                            
                    except Exception as js_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è: {js_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    
            else:
                await self._human_type(phone_input, phone)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(random.uniform(0.5, 1.0))
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_selectors = [
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")',
                'button:has-text("–î–∞–ª–µ–µ")',
                'input[type="submit"]',
                '.submit-btn',
                '.login-btn',
                'form button:last-of-type'
            ]
            
            submit_btn = None
            for selector in submit_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        submit_btn = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {selector}")
                        break
                except:
                    continue
            
            if submit_btn:
                logger.info("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                await self._human_click(submit_btn)
            else:
                # –ü—Ä–æ–±—É–µ–º Enter
                logger.info("‚å®Ô∏è –ù–∞–∂–∏–º–∞—é Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await self.page.keyboard.press('Enter')
            
            # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø - WB –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            logger.info("‚è≥ –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –æ—Ç WB (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥)...")
            await asyncio.sleep(random.uniform(5, 8))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            sms_sent = False
            for attempt in range(4):  # 4 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/4")
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
                sms_indicators = [
                    'input[name="code"]',
                    'input[name="smsCode"]', 
                    'input[name="verificationCode"]',
                    'input[data-testid*="code"]',
                    'input[placeholder*="–∫–æ–¥" i]',
                    'input[placeholder*="code" i]',
                    'input[maxlength="4"]',
                    'input[maxlength="6"]',
                    'text=–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                    'text=SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                    'text=–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥',
                    'text=–∫–æ–¥ –∏–∑ SMS',
                    '.sms-code',
                    '.verification-code',
                    '.code-input'
                ]
                
                for indicator in sms_indicators:
                    try:
                        element = await self.page.query_selector(indicator)
                        if element and (await element.is_visible() if hasattr(element, 'is_visible') else True):
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä SMS: {indicator}")
                            sms_sent = True
                            break
                    except:
                        continue
                
                if sms_sent:
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL (–≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç)
                current_url = self.page.url
                if "code" in current_url.lower() or "sms" in current_url.lower() or "verification" in current_url.lower():
                    logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {current_url}")
                    sms_sent = True
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                try:
                    page_text = await self.page.inner_text('body')
                    success_phrases = ["–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "sms –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥", "–∫–æ–¥ –∏–∑ sms", "verification code"]
                    for phrase in success_phrases:
                        if phrase.lower() in page_text.lower():
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {phrase}")
                            sms_sent = True
                            break
                    if sms_sent:
                        break
                except:
                    pass
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                if attempt < 3:
                    await asyncio.sleep(2)
            
            if sms_sent:
                logger.info("‚úÖ SMS –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                await self._save_cookies()
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É SMS, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
                logger.info(f"üîç –¢–µ–∫—É—â–∏–π URL: {self.page.url}")
                logger.info(f"üîç –ó–∞–≥–æ–ª–æ–≤–æ–∫: {await self.page.title()}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if self.debug_mode:
                    await self.page.screenshot(path="wb_sms_debug.png")
                    logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: wb_sms_debug.png")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à–∞–Ω—Å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
                await self._save_cookies()
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return False
    
    async def login_step2_sms(self, sms_code: str) -> bool:
        """–®–∞–≥ 2: –í–≤–æ–¥ SMS –∫–æ–¥–∞."""
        try:
            logger.info(f"üì® –í–≤–æ–∂—É SMS –∫–æ–¥: {sms_code}")
            
            # –ò—â–µ–º –ø–æ–ª–µ SMS –∫–æ–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è WB)
            sms_selectors = [
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã WB
                'input[data-testid*="code"]',
                'input[data-testid*="sms"]',
                'input[data-testid*="verification"]',
                '.CodeInputContentView input',
                '.code-input input',
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'input[name="code"]',
                'input[name="smsCode"]',
                'input[name="verificationCode"]',
                'input[placeholder*="–∫–æ–¥" i]',
                'input[placeholder*="code" i]',
                'input[type="text"]:not([name="phone"])',
                'input[maxlength="4"]',
                'input[maxlength="6"]',
                
                # –ü–æ–∏—Å–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
                '.modal input[type="text"]',
                '#Portal-modal input[type="text"]',
                '.Portal-modal input[type="text"]',
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                '.sms-code input',
                'form input:last-of-type'
            ]
            
            sms_input = None
            for selector in sms_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        sms_input = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ SMS –∫–æ–¥–∞: {selector}")
                        break
                except:
                    continue
            
            if not sms_input:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞")
                return False
            
            # –ü—Ä—è–º–æ–π –≤–≤–æ–¥ SMS –∫–æ–¥–∞ (–±–µ–∑ –∫–ª–∏–∫–∞, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ)
            logger.info(f"üìù –í–≤–æ–∂—É SMS –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–ª–µ: {sms_input}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è
                sms_field = await self.page.query_selector(sms_input)
                if sms_field:
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                    await sms_field.fill("")
                    await asyncio.sleep(0.5)
                    
                    # –í–≤–æ–¥–∏–º –∫–æ–¥ —Å–∏–º–≤–æ–ª –∑–∞ —Å–∏–º–≤–æ–ª–æ–º (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
                    logger.info(f"‚å®Ô∏è –ü–µ—á–∞—Ç–∞—é –∫–æ–¥ –ø–æ —Å–∏–º–≤–æ–ª–∞–º: {sms_code}")
                    for char in sms_code:
                        await sms_field.type(char)
                        await asyncio.sleep(random.uniform(0.1, 0.3))  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                    
                    logger.info(f"‚úÖ SMS –∫–æ–¥ –≤–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ: {sms_code}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è SMS")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞: {e}")
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á–µ—Ä–µ–∑ JavaScript
                try:
                    logger.info("üîÑ –ü—Ä–æ–±—É—é –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —á–µ—Ä–µ–∑ JavaScript...")
                    await self.page.evaluate(f"""
                        const input = document.querySelector('{sms_input}');
                        if (input) {{
                            input.value = '{sms_code}';
                            input.dispatchEvent(new Event('input', {{ bubbles: true }}));
                            input.dispatchEvent(new Event('change', {{ bubbles: true }}));
                        }}
                    """)
                    logger.info("‚úÖ SMS –∫–æ–¥ –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                except Exception as js_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ JavaScript –≤–≤–æ–¥–∞: {js_error}")
                    return False
            
            # –ñ–¥–µ–º –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_selectors = [
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                'button:has-text("–î–∞–ª–µ–µ")',
                'form button:last-of-type'
            ]
            
            confirm_btn = None
            for selector in confirm_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        confirm_btn = selector
                        break
                except:
                    continue
            
            if confirm_btn:
                logger.info("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                await self._human_click(confirm_btn)
            else:
                logger.info("‚å®Ô∏è –ù–∞–∂–∏–º–∞—é Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                await self.page.keyboard.press('Enter')
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await asyncio.sleep(random.uniform(3, 5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            current_url = self.page.url
            login_success = any([
                'seller.wildberries.ru' in current_url and 'login' not in current_url,
                'cabinet' in current_url,
                'dashboard' in current_url,
                'supplies' in current_url
            ])
            
            if login_success:
                logger.info("üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ WB!")
                await self._save_cookies()
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
                supplies_url = "https://seller.wildberries.ru/supplies-management/all-supplies"
                logger.info(f"üöö –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {supplies_url}")
                
                try:
                    await self.page.goto(supplies_url, wait_until="networkidle", timeout=30000)
                    await asyncio.sleep(random.uniform(3, 5))  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    
                    final_url = self.page.url
                    if "supplies-management" in final_url:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {final_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫. URL: {final_url}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
                
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. URL: {current_url}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞: {e}")
            return False
    
    async def navigate_to_supplies(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫."""
        try:
            logger.info("üì¶ –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫...")
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ URL –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫
            supplies_urls = [
                "https://seller.wildberries.ru/supplies",
                "https://seller.wildberries.ru/supplies/new",
                "https://seller.wildberries.ru/cabinet/supplies"
            ]
            
            for url in supplies_urls:
                try:
                    response = await self.page.goto(url, wait_until="networkidle", timeout=30000)
                    if response and response.status == 200:
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—à–µ–ª –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {url}")
                        await asyncio.sleep(random.uniform(2, 3))
                        return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é
            menu_selectors = [
                'a[href*="supplies"]',
                'text=–ü–æ—Å—Ç–∞–≤–∫–∏',
                'text=–°–∫–ª–∞–¥ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏',
                '.menu a:has-text("–ü–æ—Å—Ç–∞–≤–∫–∏")'
            ]
            
            for selector in menu_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        await asyncio.sleep(random.uniform(2, 3))
                        logger.info("‚úÖ –ü–µ—Ä–µ—à–µ–ª –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º —á–µ—Ä–µ–∑ –º–µ–Ω—é")
                        return True
                except:
                    continue
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {e}")
            return False
    
    async def book_supply_slot(self, supply_id: str, date: str, time_slot: str) -> bool:
        """–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
        try:
            logger.info(f"üéØ –ë—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –Ω–∞ {date} {time_slot}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ
            supply_url = f"https://seller.wildberries.ru/supplies/{supply_id}"
            await self.page.goto(supply_url, wait_until="networkidle")
            
            # –ò—â–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            booking_selectors = [
                f'button:has-text("{date}")',
                f'[data-date="{date}"]',
                '.calendar-day',
                '.time-slot',
                'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")'
            ]
            
            for selector in booking_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        logger.info(f"‚úÖ –í—ã–±—Ä–∞–ª —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                        break
                except:
                    continue
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            confirm_selectors = [
                'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                'button[type="submit"]'
            ]
            
            for selector in confirm_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                        break
                except:
                    continue
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await asyncio.sleep(random.uniform(2, 4))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            success_indicators = [
                'text=—É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω',
                'text=—Å–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω',
                '.success-message',
                '.booking-success'
            ]
            
            for indicator in success_indicators:
                try:
                    if await self.page.query_selector(indicator):
                        logger.info("üéâ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
                        return True
                except:
                    continue
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
            return False
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏."""
        try:
            if self.page:
                await self._save_cookies()
            
            # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ persistent context, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä/–∫–æ–Ω—Ç–µ–∫—Å—Ç
            if self.browser:
                await self.browser.close()
            
            if self.playwright:
                await self.playwright.stop()
            
            logger.info("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        finally:
            self.page = None
            self.context = None
            self.browser = None
            self.playwright = None
    
    async def get_current_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL."""
        if self.page:
            return self.page.url
        return ""
    
    async def take_screenshot(self, filename: str = "screenshot.png") -> bool:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç."""
        try:
            if self.page:
                await self.page.screenshot(path=filename, full_page=True)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return False

    async def navigate_to_supplies_page(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏."""
        try:
            supplies_url = "https://seller.wildberries.ru/supplies-management/all-supplies"
            logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {supplies_url}")
            
            response = await self.page.goto(supplies_url, wait_until="networkidle", timeout=15000)
            
            if response and response.status == 200:
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {response.status if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
            return False

    async def book_supply(self, supply_id: str, preorder_id: str, date_from: str, date_to: str) -> bool:
        """–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ ID –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã."""
        try:
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} (–∑–∞–∫–∞–∑ {preorder_id})")
            
            if not self.page:
                logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            if not await self.check_if_logged_in():
                logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.")
                return False
            
            # –ï—Å–ª–∏ —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–∞–≤–æ–∫ - –æ—Ç–ª–∏—á–Ω–æ, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            current_url = self.page.url
            if "supplies-management" not in current_url:
                logger.info("üìç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫...")
                await self.navigate_to_supplies_page()
                await asyncio.sleep(2)
            
            # –ò—â–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ preorderID (—Ç–∞–∫ –∫–∞–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 1 supplyID = null)
            logger.info(f"üîç –ò—â—É –∑–∞–∫–∞–∑ {preorder_id} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–∞–≤–æ–∫
            try:
                await self.page.wait_for_selector('table', timeout=10000)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º
            supply_row = None
            try:
                # –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É preorderID
                supply_row = self.page.locator(f'tr:has-text("{preorder_id}")').first
                if await supply_row.count() > 0:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–∫–∞–∑–æ–º {preorder_id}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ supply_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if supply_id and supply_id != preorder_id:
                        supply_row = self.page.locator(f'tr:has-text("{supply_id}")').first
                        if await supply_row.count() > 0:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ—Å—Ç–∞–≤–∫–æ–π {supply_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {e}")
                return False
            
            if not supply_row or await supply_row.count() == 0:
                logger.error(f"‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π
            await supply_row.click()
            await asyncio.sleep(2)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω"
            book_button = None
            button_selectors = [
                'button:has-text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                'button:has-text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω")', 
                'button:has-text("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                '[data-testid="plan-button"]',
                '.plan-button',
                'button[class*="plan"]'
            ]
            
            for selector in button_selectors:
                try:
                    book_button = self.page.locator(selector).first
                    if await book_button.count() > 0:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {selector}")
                        break
                except:
                    continue
            
            if not book_button or await book_button.count() == 0:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await book_button.click()
            await asyncio.sleep(3)
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            try:
                await self.page.wait_for_selector('[class*="calendar"], [class*="date-picker"], .modal', timeout=10000)
                logger.info("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç")
            except:
                logger.warning("‚ö†Ô∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç)
            date_selectors = [
                f'[data-date="{date_from}"]',
                f'[data-date*="{date_from[:7]}"]',  # –ü–æ –º–µ—Å—è—Ü—É
                '.available-slot',
                '[class*="available"]',
                'button:not([disabled])'
            ]
            
            date_selected = False
            for selector in date_selectors:
                try:
                    date_element = self.page.locator(selector).first
                    if await date_element.count() > 0:
                        await date_element.click()
                        logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                        date_selected = True
                        await asyncio.sleep(1)
                        break
                except:
                    continue
            
            if not date_selected:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –ø—Ä–æ–±—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_button = None
            confirm_selectors = [
                'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                'button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")',
                'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                'button:has-text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                '[data-testid="confirm-button"]',
                '.confirm-button',
                'button[type="submit"]'
            ]
            
            for selector in confirm_selectors:
                try:
                    confirm_button = self.page.locator(selector).first
                    if await confirm_button.count() > 0:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {selector}")
                        break
                except:
                    continue
            
            if confirm_button and await confirm_button.count() > 0:
                await confirm_button.click()
                await asyncio.sleep(3)
                logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            else:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            success_indicators = [
                'text="–ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"',
                'text="–£—Å–ø–µ—à–Ω–æ"',
                '[class*="success"]',
                '.notification-success'
            ]
            
            booking_success = False
            for indicator in success_indicators:
                try:
                    if await self.page.locator(indicator).count() > 0:
                        booking_success = True
                        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                        break
                except:
                    continue
            
            if booking_success:
                logger.info(f"üéâ –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
                return True
            else:
                logger.info(f"ü§î –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω. –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º.")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏: {e}")
            return False
