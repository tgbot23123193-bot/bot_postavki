"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–æ—Å—Ç–∞–≤–æ–∫ Wildberries
"""
import asyncio
import aiohttp
from typing import List, Dict, Optional, Any
from datetime import datetime
import json

from ..utils.logger import get_logger

logger = get_logger(__name__)


class WBSuppliesAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–æ—Å—Ç–∞–≤–æ–∫ Wildberries."""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://supplies-api.wildberries.ru/api/v1"
        self.session = None
        
    async def __aenter__(self):
        """–°–æ–∑–¥–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é."""
        self.session = aiohttp.ClientSession(
            headers={
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
                "User-Agent": "WB-Supplies-Bot/1.0"
            },
            timeout=aiohttp.ClientTimeout(total=60)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é."""
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API."""
        url = f"{self.base_url}{endpoint}"
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if kwargs.get("params"):
                logger.info(f"üì° {method.upper()} –∑–∞–ø—Ä–æ—Å: {url}?{kwargs['params']}")
            else:
                logger.info(f"üì° {method.upper()} –∑–∞–ø—Ä–æ—Å: {url}")
            
            async with self.session.request(method, url, **kwargs) as response:
                logger.info(f"üìä –û—Ç–≤–µ—Ç API: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API WB")
                    return data
                elif response.status == 401:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                    raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á WB")
                elif response.status == 429:
                    logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º...")
                    await asyncio.sleep(5)
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    return await self._make_request(method, endpoint, **kwargs)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API WB: {response.status} - {error_text}")
                    raise Exception(f"–û—à–∏–±–∫–∞ API WB: {response.status}")
                    
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise Exception(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def _get_status_name(self, status_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏."""
        status_map = {
            1: "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            2: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", 
            3: "–û—Ç–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞",
            4: "–ò–¥—ë—Ç –ø—Ä–∏—ë–º–∫–∞",
            5: "–ü—Ä–∏–Ω—è—Ç–æ",
            6: "–û—Ç–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –≤–æ—Ä–æ—Ç–∞—Ö"
        }
        return status_map.get(status_id, f"–°—Ç–∞—Ç—É—Å {status_id}")
    
    async def get_supplies(self, limit: int = 1000) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        """
        logger.info(f"üì¶ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ (–ª–∏–º–∏—Ç: {limit})")
        
        try:
            # JSON —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 1 –∏ 2
            # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º, —Ç–∞–∫ –∫–∞–∫ —É —Å—Ç–∞—Ç—É—Å–∞ 1 (–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ) factDate = null
            request_body = {
                "statusIDs": [1, 2]  # 1 ‚Äî –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, 2 ‚Äî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
            }
            
            response = await self._make_request(
                "POST", 
                "/supplies",
                json=request_body
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API WB: {response}")
            
            supplies = response.get("supplies", []) if isinstance(response, dict) else response
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ API: {len(supplies)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if supplies:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ API: {supplies[0]}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_supplies = []
            for i, supply in enumerate(supplies[:limit]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç–∞–≤–∫—É {i+1}: {supply}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç WB API
                # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" supplyID = null, –∏—Å–ø–æ–ª—å–∑—É–µ–º preorderID
                supply_id = supply.get("supplyID") or supply.get("preorderID")
                preorder_id = supply.get("preorderID")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏
                if supply.get("supplyID"):
                    supply_name = f"–ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ{supply_id}"
                else:
                    supply_name = f"–ó–∞–∫–∞–∑ ‚Ññ{preorder_id}"
                
                status_name = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                create_date = supply.get("createDate", "")
                
                formatted_supply = {
                    "id": supply_id,
                    "name": supply_name,
                    "status": status_name,
                    "statusName": status_name,
                    "createDate": create_date,
                    "supplyDate": supply.get("supplyDate"),
                    "factDate": supply.get("factDate"),
                    "updatedDate": supply.get("updatedDate"),
                    "preorderID": preorder_id,
                    "supplyID": supply.get("supplyID"),
                    "phone": supply.get("phone")
                }
                
                logger.info(f"üì¶ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ {i+1}: {formatted_supply}")
                formatted_supplies.append(formatted_supply)
            
            logger.info(f"üìã –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–∞–≤–æ–∫: {len(formatted_supplies)}")
            return formatted_supplies
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
            raise
    
    async def get_warehouses(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
        """
        logger.info("üè¨ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        
        try:
            response = await self._make_request("GET", "/warehouses")
            
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            if isinstance(response, list):
                warehouses = response
            else:
                warehouses = response.get("warehouses", [])
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            logger.info(f"üîç –ü—Ä–∏–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouses[0] if warehouses else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤
            formatted_warehouses = []
            for warehouse in warehouses:
                formatted_warehouses.append({
                    "id": warehouse.get("ID") or warehouse.get("id") or warehouse.get("warehouseID"),
                    "name": warehouse.get("name") or warehouse.get("warehouseName"),
                    "address": warehouse.get("address", ""),
                    "workTime": warehouse.get("workTime", ""),
                    "acceptsQR": warehouse.get("acceptsQR", False),
                    "cargoType": warehouse.get("cargoType", 1)
                })
            
            return formatted_warehouses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
            raise
    
    async def get_acceptance_coefficients(self, warehouse_ids: List[int] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π.
        
        Args:
            warehouse_ids: –°–ø–∏—Å–æ–∫ ID —Å–∫–ª–∞–¥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å–∏–º—É–º 50 –∑–∞ —Ä–∞–∑)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—ë–º–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é
        """
        logger.info("üìä –ü–æ–ª—É—á–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏")
        
        try:
            all_coefficients = []
            
            # –ï—Å–ª–∏ —Å–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º)
            if not warehouse_ids:
                response = await self._make_request("GET", "/acceptance/coefficients")
                if isinstance(response, list):
                    all_coefficients = response
                else:
                    all_coefficients = response.get("coefficients", [])
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 —Å–∫–ª–∞–¥–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞)
                chunk_size = 20
                for i in range(0, len(warehouse_ids), chunk_size):
                    chunk = warehouse_ids[i:i + chunk_size]
                    params = {"warehouseIDs": ",".join(map(str, chunk))}
                    
                    logger.info(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è {len(chunk)} —Å–∫–ª–∞–¥–æ–≤ (—á–∞—Å—Ç—å {i//chunk_size + 1})")
                    
                    response = await self._make_request("GET", "/acceptance/coefficients", params=params)
                    
                    if isinstance(response, list):
                        coefficients = response
                    else:
                        coefficients = response.get("coefficients", [])
                    
                    all_coefficients.extend(coefficients)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                    if i + chunk_size < len(warehouse_ids):
                        await asyncio.sleep(1)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–æ: {len(all_coefficients)}")
            if all_coefficients:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: {all_coefficients[0]}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (coefficient 0 –∏–ª–∏ 1 –∏ allowUnload = true)
            available_slots = []
            for coeff in all_coefficients:
                if (coeff.get("coefficient") in [0, 1] and 
                    coeff.get("allowUnload") is True):
                    available_slots.append({
                        "date": coeff.get("date"),
                        "warehouseID": coeff.get("warehouseID"),
                        "warehouseName": coeff.get("warehouseName"),
                        "coefficient": coeff.get("coefficient"),
                        "boxTypeName": coeff.get("boxTypeName"),
                        "boxTypeID": coeff.get("boxTypeID"),
                        "allowUnload": coeff.get("allowUnload"),
                        "isSortingCenter": coeff.get("isSortingCenter", False)
                    })
            
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
            return available_slots
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—ë–º–∫–∏: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ raise, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
            return []
    
    async def get_supply_details(self, supply_id: str, is_preorder_id: bool = False) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–∫–µ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API WB.
        
        Args:
            supply_id: ID –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∑–∞–∫–∞–∑–∞
            is_preorder_id: True –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è ID –∑–∞–∫–∞–∑–∞, False –µ—Å–ª–∏ ID –ø–æ—Å—Ç–∞–≤–∫–∏
            
        Returns:
            –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏
        """
        logger.info(f"üîç –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏: {supply_id} (preorder: {is_preorder_id})")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB
            params = {"isPreorderID": is_preorder_id} if is_preorder_id else {}
            
            response = await self._make_request(
                "GET", 
                f"/supplies/{supply_id}",
                params=params
            )
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {response}")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
            raise
    
    async def get_available_slots(self, warehouse_id: int, date_from: str, date_to: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            warehouse_id: ID —Å–∫–ª–∞–¥–∞
            date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        logger.info(f"üïê –ü–æ–ª—É—á–∞—é —Å–ª–æ—Ç—ã –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id} —Å {date_from} –ø–æ {date_to}")
        
        try:
            response = await self._make_request(
                "GET", 
                "/acceptance/coefficients",
                params={
                    "warehouseId": warehouse_id,
                    "dateFrom": date_from,
                    "dateTo": date_to
                }
            )
            
            slots = response.get("coefficients", [])
            available_slots = [slot for slot in slots if slot.get("coefficient", 0) > 0]
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
            return available_slots
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
            raise
    
    async def create_supply_booking(self, supply_id: str, warehouse_id: int, date: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏.
        
        Args:
            supply_id: ID –ø–æ—Å—Ç–∞–≤–∫–∏
            warehouse_id: ID —Å–∫–ª–∞–¥–∞
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            True –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üìÖ –°–æ–∑–¥–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –Ω–∞ {date}")
        
        try:
            payload = {
                "supplyId": supply_id,
                "warehouseId": warehouse_id,
                "date": date
            }
            
            response = await self._make_request(
                "POST", 
                "/supplies/booking",
                json=payload
            )
            
            logger.info(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
