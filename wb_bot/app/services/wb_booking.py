"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ WB.
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import aiohttp
import json
from ..utils.logger import get_logger

logger = get_logger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π


class WBBookingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫."""
    
    BASE_URL = "https://supplies-api.wildberries.ru"
    
    def __init__(self):
        self.session = None
        self.active_bookings = {}  # user_id: {task_id: booking_task}
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def create_preorder(
        self,
        api_key: str,
        warehouse_id: int,
        box_type_id: int,
        quantity: int = 1
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É."""
        headers = {
            "Authorization": api_key,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø—Ü–∏–π –ø—Ä–∏—ë–º–∫–∏
        from .wb_real_api import wb_real_api
        
        try:
            async with wb_real_api as service:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏—ë–º–∫–∏
                options = await service.get_acceptance_options(
                    api_key=api_key,
                    items=[{"quantity": quantity, "barcode": "test"}],  # TODO: —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞—Ä–∫–æ–¥—ã
                    warehouse_id=warehouse_id
                )
                
                if not options or not options.get("result"):
                    logger.error("No acceptance options available")
                    return None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB, –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            data = {
                "name": f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∞–≤–∫–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                "cabinetId": warehouse_id  # ID —Å–∫–ª–∞–¥–∞
            }
            
            async with self.session.post(
                f"{self.BASE_URL}/api/v3/supplies",  # –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
                headers=headers,
                json=data
            ) as resp:
                if resp.status in [200, 201]:
                    result = await resp.json()
                    logger.info(f"Supply created: {result}")
                    return result
                else:
                    error_text = await resp.text()
                    logger.error(f"Failed to create supply: {resp.status} - {error_text}")
                    return None
        except Exception as e:
            logger.error(f"Error creating supply: {e}")
            return None
    
    async def confirm_preorder(
        self,
        api_key: str,
        preorder_id: int
    ) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑."""
        headers = {
            "Authorization": api_key,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        try:
            async with self.session.put(
                f"{self.BASE_URL}/api/v1/preorders/{preorder_id}/confirm",
                headers=headers
            ) as resp:
                if resp.status == 200:
                    logger.info(f"Preorder {preorder_id} confirmed")
                    return True
                else:
                    error_text = await resp.text()
                    logger.error(f"Failed to confirm preorder: {resp.status} - {error_text}")
                    return False
        except Exception as e:
            logger.error(f"Error confirming preorder: {e}")
            return False
    
    async def book_slot(
        self,
        user_id: int,
        warehouse_id: int,
        warehouse_name: str,
        supply_date: str,
        box_type_id: int,
        box_type_name: str,
        quantity: int = 1
    ) -> Tuple[bool, str]:
        """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç."""
        from .database_service import db_service
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        api_keys = await db_service.get_decrypted_api_keys(user_id)
        if not api_keys:
            return False, "‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π"
        
        api_key = api_keys[0]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
        supply = await self.create_preorder(
            api_key=api_key,
            warehouse_id=warehouse_id,
            box_type_id=box_type_id,
            quantity=quantity
        )
        
        if not supply:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É"
        
        supply_id = supply.get("supplyId") or supply.get("id")
        if not supply_id:
            return False, "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω ID –ø–æ—Å—Ç–∞–≤–∫–∏"
        
        message = (
            f"‚úÖ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üì¶ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {supply_date}\n"
            f"üìã –¢–∏–ø: {box_type_name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"üÜî ID –ø–æ—Å—Ç–∞–≤–∫–∏: {supply_id}\n\n"
            f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫—É!"
        )
        return True, message
    
    async def book_existing_supply(
        self,
        user_id: int,
        supply_id: int,
        warehouse_id: int,
        supply_date: str
    ) -> Tuple[bool, str]:
        """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
        from .database_service import db_service
        from .payment_service import payment_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã)
        from ..config import get_settings
        settings = get_settings()
        
        if settings.payment.payment_enabled:
            balance_info = await payment_service.get_user_balance_info(user_id)
            if not balance_info['can_afford_booking']:
                return False, (
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_info['balance']:.2f} ‚ÇΩ\n"
                    f"üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: 10 ‚ÇΩ\n\n"
                    f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫."
                )
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        api_keys = await db_service.get_decrypted_api_keys(user_id)
        if not api_keys:
            return False, "‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π"
        
        api_key = api_keys[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏
        from .wb_real_api import wb_real_api
        
        try:
            async with wb_real_api as service:
                supply_details = await service.get_supply_details(api_key, supply_id)
                
                if not supply_details:
                    return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏"
            
            # –ë—Ä–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            headers = {
                "Authorization": api_key,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            booking_data = {
                "supplyId": supply_id,
                "warehouseId": warehouse_id,
                "date": supply_date
            }
            
            async with self.session.put(
                f"{self.BASE_URL}/api/v1/supplies/{supply_id}/timetable",
                headers=headers,
                json=booking_data
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    charge_success, charge_error = await payment_service.charge_for_booking(user_id)
                    
                    if charge_success:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        if settings.payment.payment_enabled:
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                            updated_balance = await payment_service.get_user_balance_info(user_id)
                            
                            message = (
                                f"‚úÖ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                                f"üÜî ID –ø–æ—Å—Ç–∞–≤–∫–∏: {supply_id}\n"
                                f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                                f"üìÖ –î–∞—Ç–∞: {supply_date}\n"
                                f"üìã –°—Ç–∞—Ç—É—Å: {supply_details.get('statusName', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}\n"
                                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supply_details.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                                f"üí∞ –°–ø–∏—Å–∞–Ω–æ: 10 ‚ÇΩ\n"
                                f"üí≥ –ë–∞–ª–∞–Ω—Å: {updated_balance['balance']:.2f} ‚ÇΩ\n\n"
                                f"üéâ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!"
                            )
                        else:
                            message = (
                                f"‚úÖ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                                f"üÜî ID –ø–æ—Å—Ç–∞–≤–∫–∏: {supply_id}\n"
                                f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                                f"üìÖ –î–∞—Ç–∞: {supply_date}\n"
                                f"üìã –°—Ç–∞—Ç—É—Å: {supply_details.get('statusName', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}\n"
                                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supply_details.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                                f"üéâ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!"
                            )
                        return True, message
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –æ—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        logger.error(f"Failed to charge user {user_id} for booking: {charge_error}")
                        return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: {charge_error}"
                else:
                    error_text = await resp.text()
                    logger.error(f"Failed to book supply: {resp.status} - {error_text}")
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {resp.status}"
                    
        except Exception as e:
            logger.error(f"Error booking existing supply: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def start_auto_booking(
        self,
        user_id: int,
        task_id: str,
        warehouse_id: int,
        warehouse_name: str,
        supply_type: str,
        target_dates: List[str],
        max_coefficient: int,
        check_interval: int = 30
    ):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        logger.info(f"Starting auto booking for user {user_id}, task {task_id}")
        
        while task_id in self.active_bookings.get(user_id, {}):
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from .wb_real_api import wb_real_api
                
                async with wb_real_api as service:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
                    slots = await service.find_available_slots(
                        user_id=user_id,
                        warehouse_id=warehouse_id,
                        supply_type=supply_type,
                        max_coefficient=max_coefficient,
                        days_ahead=30
                    )
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–ª–µ–≤—ã–º –¥–∞—Ç–∞–º
                    for slot in slots:
                        if slot['date'] in target_dates and slot['coefficient'] == 0:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                            success, message = await self.book_slot(
                                user_id=user_id,
                                warehouse_id=warehouse_id,
                                warehouse_name=warehouse_name,
                                supply_date=slot['date'],
                                box_type_id=slot.get('boxTypeId', 5),
                                box_type_name=slot.get('boxType', '–ö–æ—Ä–æ–±–∞'),
                                quantity=1
                            )
                            
                            if success:
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                from ..bot.utils.notifications import notify_user
                                await notify_user(user_id, message)
                                
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                self.stop_booking(user_id, task_id)
                                return
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                logger.error(f"Error in auto booking task: {e}")
                await asyncio.sleep(check_interval)
    
    def stop_booking(self, user_id: int, task_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        if user_id in self.active_bookings:
            if task_id in self.active_bookings[user_id]:
                task = self.active_bookings[user_id][task_id]
                task.cancel()
                del self.active_bookings[user_id][task_id]
                logger.info(f"Stopped booking task {task_id} for user {user_id}")
    
    def get_active_bookings(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return list(self.active_bookings.get(user_id, {}).keys())


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
booking_service = WBBookingService()
