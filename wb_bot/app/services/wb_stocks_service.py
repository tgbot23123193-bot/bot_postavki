"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–∫–ª–∞–¥–æ–≤ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries.
–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Å–∫–ª–∞–¥–∞—Ö —á–µ—Ä–µ–∑ API /api/v1/supplier/stocks
"""

import asyncio
import aiohttp
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta

from ..utils.logger import get_logger
from ..services.database_service import db_service

logger = get_logger(__name__)


class WBStocksService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–∫–ª–∞–¥–æ–≤ Wildberries."""
    
    def __init__(self):
        self.base_url = "https://statistics-api.wildberries.ru"
        self.stocks_endpoint = "/api/v1/supplier/stocks"
        
        # –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        self.allowed_warehouses = {
            "–ö–æ–ª–µ–¥–∏–Ω–æ",
            "–ö–∞–∑–∞–Ω—å", 
            "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å",
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥",
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Äì –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π 14–≥",
            "–¢—É–ª–∞",
            "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫",
            "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)",
            "–ö–æ—Ç–æ–≤—Å–∫",
            "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
            "–°–∞—Ä–∞–ø—É–ª"
        }
    
    async def get_user_stocks(self, user_id: int, article: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∫–ª–∞–¥—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            article: –ê—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∫–ª–∞–¥–∞—Ö
        """
        try:
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            api_key = await self._get_user_api_key(user_id)
            if not api_key:
                return {
                    "success": False,
                    "error": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ –º–µ–Ω—é 'API –∫–ª—é—á–∏'",
                    "user_id": user_id
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            # dateFrom - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC3339 (UTC+3 –ú–æ—Å–∫–≤–∞)
            date_from = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%dT%H:%M:%S')
            
            params = {
                'dateFrom': date_from  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è WB API
            }
            
            # –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ API –∑–∞–ø—Ä–æ—Å–µ - –ø–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –≤ –∫–æ–¥–µ
            logger.info(f"üìÖ –ó–∞–ø—Ä–æ—Å –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–∞—Ç—ã: {date_from} (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)")
            if article:
                logger.info(f"üîç –ë—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: {article}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            headers = {
                'Authorization': api_key,
                'Content-Type': 'application/json'
            }
            
            logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ API: {self.base_url}{self.stocks_endpoint}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}{self.stocks_endpoint}",
                    headers=headers,
                    params=params,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    logger.info(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status}")
                    
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –æ—Ç API")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        warehouses = await self._process_stocks_data(data, article)
                        
                        return {
                            "success": True,
                            "warehouses": warehouses,
                            "total_records": len(data),
                            "user_id": user_id,
                            "article": article
                        }
                    
                    elif response.status == 401:
                        error_text = await response.text()
                        logger.error(f"üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API: {error_text}")
                        return {
                            "success": False,
                            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –º–µ–Ω—é 'API –∫–ª—é—á–∏'",
                            "user_id": user_id,
                            "status_code": response.status
                        }
                    
                    elif response.status == 429:
                        logger.error(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API")
                        return {
                            "success": False,
                            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                            "user_id": user_id,
                            "status_code": response.status
                        }
                    
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                        return {
                            "success": False,
                            "error": f"–û—à–∏–±–∫–∞ API: {response.status}",
                            "user_id": user_id,
                            "status_code": response.status,
                            "error_details": error_text
                        }
        
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            return {
                "success": False,
                "error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "user_id": user_id
            }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                "user_id": user_id
            }
    
    async def _get_user_api_key(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ API –∫–ª—é—á–∞
            from ..database.connection import get_session
            from ..database.models import APIKey
            from sqlalchemy import select
            
            async with get_session() as session:
                # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏ –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(APIKey).where(
                    APIKey.user_id == user_id,
                    APIKey.is_active == True,
                    APIKey.is_valid == True
                ).order_by(APIKey.last_used.desc().nullslast(), APIKey.created_at.desc())
                
                result = await session.execute(stmt)
                api_key_obj = result.scalar_one_or_none()
                
                if api_key_obj:
                    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á
                    from ..utils.encryption import decrypt_api_key
                    decrypted_key = decrypt_api_key(api_key_obj.encrypted_key, api_key_obj.salt)
                    
                    logger.info(f"üîë –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    api_key_obj.last_used = datetime.utcnow()
                    api_key_obj.total_requests += 1
                    await session.commit()
                    
                    return decrypted_key
                else:
                    logger.warning(f"üîë –ê–∫—Ç–∏–≤–Ω—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None
    
    async def _process_stocks_data(self, data: List[Dict], article: str = None) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö –∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç API.
        
        Args:
            data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            article: –ê—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        """
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤...")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouses_data = {}
            
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
            if len(data) > 0:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç API (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):")
                for i, sample in enumerate(data[:3]):
                    logger.info(f"  –ó–∞–ø–∏—Å—å {i+1}: ALL_FIELDS = {sample}")
                    logger.info(f"    supplierArticle='{sample.get('supplierArticle')}', nmId={sample.get('nmId')}, barcode='{sample.get('barcode')}', warehouseName='{sample.get('warehouseName')}', quantity={sample.get('quantity')}, quantityFull={sample.get('quantityFull')}")
            
            for item in data:
                try:
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    item_article = str(item.get('supplierArticle', ''))
                    item_nmid = str(item.get('nmId', ''))  # WB –∞—Ä—Ç–∏–∫—É–ª
                    item_barcode = str(item.get('barcode', ''))
                    warehouse_name = item.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
                    quantity = item.get('quantity', 0)
                    quantity_full = item.get('quantityFull', 0)
                    
                    logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∏—â–µ–º '{article}', –Ω–∞–π–¥–µ–Ω supplierArticle='{item_article}', nmId='{item_nmid}', barcode='{item_barcode}', —Å–∫–ª–∞–¥ '{warehouse_name}', –æ—Å—Ç–∞—Ç–∫–∏ {quantity}/{quantity_full}")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
                    if article:
                        article_lower = article.lower()
                        if (article_lower != item_article.lower() and 
                            article != item_nmid and 
                            article != item_barcode):
                            logger.info(f"  ‚ùå –ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ supplierArticle, nmId, barcode")
                            continue
                        else:
                            logger.info(f"  ‚úÖ –ê—Ä—Ç–∏–∫—É–ª –Ω–∞–π–¥–µ–Ω! –ü–æ–ª–µ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
                    if quantity <= 0 and quantity_full <= 0:
                        continue
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥—É
                    if warehouse_name not in warehouses_data:
                        warehouses_data[warehouse_name] = {
                            'name': warehouse_name,
                            'total_quantity': 0,
                            'total_quantity_full': 0,
                            'articles': []
                        }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É
                    warehouses_data[warehouse_name]['total_quantity'] += quantity
                    warehouses_data[warehouse_name]['total_quantity_full'] += quantity_full
                    warehouses_data[warehouse_name]['articles'].append({
                        'article': item_article,
                        'quantity': quantity,
                        'quantity_full': quantity_full,
                        'nm_id': item.get('nmId'),
                        'barcode': item.get('barcode', ''),
                        'subject': item.get('subject', ''),
                        'category': item.get('category', ''),
                        'brand': item.get('brand', ''),
                        'tech_size': item.get('techSize', ''),
                        'price': item.get('Price', 0),
                        'discount': item.get('Discount', 0),
                        'is_supply': item.get('isSupply', False),
                        'is_realization': item.get('isRealization', False),
                        'sku': item.get('SCCode', '')
                    })
                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            result_warehouses = []
            for warehouse_name, warehouse_data in warehouses_data.items():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                if warehouse_name not in self.allowed_warehouses:
                    logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥ '{warehouse_name}' - –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏")
                    continue
                    
                articles_count = len(warehouse_data['articles'])
                
                warehouse_info = {
                    'id': f"api_warehouse_{len(result_warehouses)}",
                    'name': warehouse_name,
                    'quantity': warehouse_data['total_quantity'],
                    'quantity_full': warehouse_data['total_quantity_full'],
                    'articles_count': articles_count,
                    'articles': warehouse_data['articles'],
                    'source': 'api'
                }
                
                result_warehouses.append(warehouse_info)
                
                logger.info(f"üì¶ –°–∫–ª–∞–¥: {warehouse_name}")
                logger.info(f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {warehouse_data['total_quantity']} —à—Ç")
                logger.info(f"   üìà –ü–æ–ª–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {warehouse_data['total_quantity_full']} —à—Ç") 
                logger.info(f"   üìã –ê—Ä—Ç–∏–∫—É–ª–æ–≤: {articles_count}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            result_warehouses.sort(key=lambda x: x['quantity'], reverse=True)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(result_warehouses)}")
            return result_warehouses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
wb_stocks_service = WBStocksService()


def get_wb_stocks_service() -> WBStocksService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫–ª–∞–¥–æ–≤."""
    return wb_stocks_service
