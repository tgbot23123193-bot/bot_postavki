"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫
"""
import asyncio
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass

from ..utils.logger import get_logger
from .browser_manager import BrowserManager
from .browser_automation import WBBrowserAutomationPro

logger = get_logger(__name__)


@dataclass
class BookingTask:
    """–ó–∞–¥–∞—á–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    id: str
    supply: Dict[str, Any]
    user_id: int
    params: Dict[str, Any]
    status: str = "pending"  # pending, in_progress, completed, failed
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    browser_id: Optional[str] = None
    page_reference: Optional[Any] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ Playwright Page –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è


class MultiBookingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫."""
    
    def __init__(self, browser_manager: BrowserManager):
        self.browser_manager = browser_manager
        self.active_bookings: Dict[str, Dict[str, Any]] = {}  # session_id -> booking_info
        self.booking_tasks: Dict[str, List[BookingTask]] = {}  # session_id -> tasks
        self._progress_callbacks: Dict[str, Callable] = {}
        
    async def start_multi_booking(
        self, 
        user_id: int, 
        supplies: List[Dict[str, Any]], 
        booking_params: Dict[str, Any],
        progress_callback: Optional[Callable] = None
    ) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supplies: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            booking_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–∞—Ç–∞, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ —Ç.–¥.)
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            
        Returns:
            session_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        session_id = str(uuid.uuid4())
        
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üì¶ –ü–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(supplies)}")
        logger.info(f"üîë Session ID: {session_id}")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä!
        # –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò: headless=False —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –±—Ä–∞—É–∑–µ—Ä!
        source_browser = await self.browser_manager.get_browser(
            user_id=user_id, 
            headless=False,  # üëÄ –í–ò–î–ò–ú–´–ô –ë–†–ê–£–ó–ï–† –î–õ–Ø –û–¢–õ–ê–î–ö–ò!
            debug_mode=True,  # üêõ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò!
            browser_type="firefox"
        )
        
        if not source_browser:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≥–æ—Ç–æ–≤ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        tasks = []
        for supply in supplies:
            task = BookingTask(
                id=str(uuid.uuid4()),
                supply=supply,
                user_id=user_id,
                params=booking_params.copy()
            )
            tasks.append(task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        self.active_bookings[session_id] = {
            "user_id": user_id,
            "start_time": datetime.now(),
            "total_tasks": len(tasks),
            "completed_tasks": 0,
            "failed_tasks": 0,
            "status": "starting"
        }
        self.booking_tasks[session_id] = tasks
        
        if progress_callback:
            self._progress_callbacks[session_id] = progress_callback
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        asyncio.create_task(self._execute_parallel_booking(session_id))
        
        return session_id
    
    async def _execute_parallel_booking(self, session_id: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        try:
            tasks = self.booking_tasks[session_id]
            booking_info = self.active_bookings[session_id]
            booking_info["status"] = "in_progress"
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tasks)} –∑–∞–¥–∞—á –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ
            await self._notify_progress(session_id, "üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û (–ø–æ –æ—á–µ—Ä–µ–¥–∏)
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {len(tasks)} –∑–∞–¥–∞—á –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û –û–ß–ï–†–ï–î–ò")
            for i, task in enumerate(tasks):
                task_num = i + 1
                total_tasks = len(tasks)
                supply_name = task.supply.get('name', f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{task.supply.get('id')}")
                
                logger.info(f"üìã –≠–¢–ê–ü {task_num}/{total_tasks}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {supply_name}")
                
                # –£–í–ï–î–û–ú–õ–Ø–ï–ú –û –ù–ê–ß–ê–õ–ï –ö–ê–ñ–î–û–ô –ü–û–°–¢–ê–í–ö–ò
                await self._notify_progress(session_id, 
                    f"üîÑ –ü–æ—Å—Ç–∞–≤–∫–∞ {task_num}/{total_tasks}\nüì¶ {supply_name[:30]}\n‚è≥ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
                
                # –í–´–ü–û–õ–ù–Ø–ï–ú –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï
                try:
                    await self._execute_single_booking(session_id, task)
                    logger.info(f"üìä –ü–û–°–õ–ï _execute_single_booking: task.status={task.status}, task.result={bool(task.result)}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏ {task_num}: {e}")
                    task.status = "failed"
                    task.error = str(e)
                
                # –°–†–ê–ó–£ –ü–û–°–õ–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø - –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ò –£–í–ï–î–û–ú–õ–Ø–ï–ú!
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è, –Ω–æ result –µ—Å—Ç—å
                if task.result and task.result.get("success", False) and task.status != "completed":
                    logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –¥–ª—è {supply_name}: –±—ã–ª–æ {task.status}, —Å—Ç–∞–ª–æ completed")
                    task.status = "completed"
                
                if task.status == "completed" and task.result:
                    booking_result = task.result
                    booking_date = booking_result.get("booking_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    warehouse_name = booking_result.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω") 
                    coefficient = booking_result.get("coefficient", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                    new_supply_id = booking_result.get("new_supply_id")
                    supply_id = task.supply.get("id")
                    
                    # –§–û–†–ú–ò–†–£–ï–ú –î–ï–¢–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–ê–ö –í –û–î–ò–ù–û–ß–ù–û–ú –†–ï–ñ–ò–ú–ï
                    success_message = (
                        f"üéâ –£–°–ü–ï–• {task_num}/{total_tasks}!\n\n"
                        f"üì¶ <b>{supply_name[:30]}</b>\n"
                        f"üÜî ID: <code>{supply_id}</code>\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                    if new_supply_id and new_supply_id != str(supply_id):
                        success_message += f"üÜî <b>–ù–æ–≤—ã–π ID:</b> <code>{new_supply_id}</code>\n"
                    
                    success_message += (
                        f"\nüìÖ <b>–î–∞—Ç–∞:</b> {booking_date}\n"
                        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
                        f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coefficient}\n\n"
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
                    )
                    
                    logger.info(f"‚úÖ –ü–û–°–¢–ê–í–ö–ê {task_num} –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê: {supply_name}")
                    await self._notify_progress(session_id, success_message)
                    
                elif task.status == "failed":
                    error_msg = task.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    fail_message = (
                        f"‚ùå –û–®–ò–ë–ö–ê {task_num}/{total_tasks}\n"
                        f"üì¶ {supply_name[:25]}\n"
                        f"üí• {error_msg[:50]}"
                    )
                    
                    logger.warning(f"‚ùå –ü–û–°–¢–ê–í–ö–ê {task_num} –ù–ï –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê: {supply_name}")
                    await self._notify_progress(session_id, fail_message)
                
                else:
                    # –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –°–¢–ê–¢–£–° - –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º—É
                    logger.error(f"‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –°–¢–ê–¢–£–° –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {task_num}: status={task.status}, result={bool(task.result)}")
                    unknown_message = (
                        f"‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ {task_num}/{total_tasks}\n"
                        f"üì¶ {supply_name[:25]}\n"
                        f"ü§∑ –°—Ç–∞—Ç—É—Å: {task.status}"
                    )
                    await self._notify_progress(session_id, unknown_message)
                
                # –ü–ê–£–ó–ê –ú–ï–ñ–î–£ –ü–û–°–¢–ê–í–ö–ê–ú–ò –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï –ü–û–°–õ–ï–î–ù–Ø–Ø
                if task_num < total_tasks:
                    await self._notify_progress(session_id, 
                        f"‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å—Ç–∞–≤–∫–µ {task_num + 1}/{total_tasks}...")
                    await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
            
            # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await self._finalize_booking_session(session_id)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {session_id}: {e}")
            await self._notify_progress(session_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å –æ—à–∏–±–∫–æ–π
            if session_id in self.active_bookings:
                self.active_bookings[session_id]["status"] = "failed"
    
    async def _execute_single_booking(self, session_id: str, task: BookingTask):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ."""
        try:
            task.status = "in_progress"
            supply = task.supply
            supply_id = supply.get("id")
            supply_name = supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
            
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} ({supply_name})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            source_browser = self.browser_manager._browsers.get(task.user_id)
            if not source_browser:
                raise Exception(f"–ò—Å—Ö–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ç–æ–º –∂–µ –±—Ä–∞—É–∑–µ—Ä–µ (–¢–û–õ–¨–ö–û –î–õ–Ø –ú–£–õ–¨–¢–ò–ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø!)
            logger.info(f"üìÑ –ú–£–õ–¨–¢–ò–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï: –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
            new_page = await source_browser.context.new_page()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            task.page_reference = new_page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            task.browser_id = id(new_page)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            
            # üåê –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–∫–∏ –í –ù–û–í–û–ô –í–ö–õ–ê–î–ö–ï!
            supply_url = f"https://suppliers.wildberries.ru/supplies-management/all-supplies/supply-detail/transportation-task?preorderId={supply_id}"
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å—Ç–∞–≤–∫–µ {supply_id} –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ: {supply_url}")
            await new_page.goto(supply_url, wait_until="domcontentloaded", timeout=30000)
            
            # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            await asyncio.sleep(3)
            
            logger.info(f"‚úÖ –í–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
            # –ö–æ–ø–∏—Ä—É–µ–º –í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            temp_browser = type('TempBrowser', (), {})()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            for attr_name in dir(source_browser):
                if not attr_name.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    try:
                        setattr(temp_browser, attr_name, getattr(source_browser, attr_name))
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ page –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            temp_browser.page = new_page
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            logger.info(f"üöÄ –í–´–ó–´–í–ê–Æ book_supply_by_id –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {task.params}")
            booking_result = await temp_browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(supply_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º supply_id –∫–∞–∫ preorder_id
                **task.params
            )
            
            logger.info(f"üìã –ü–û–õ–£–ß–ò–õ –†–ï–ó–£–õ–¨–¢–ê–¢ book_supply_by_id –¥–ª—è {supply_id}: {booking_result}")
            task.result = booking_result
            
            if booking_result and booking_result.get("success", False):
                task.status = "completed"
                logger.info(f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –î–ï–¢–ê–õ–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–∫–∞–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
                booking_date = booking_result.get("booking_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") 
                warehouse_name = booking_result.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                coefficient = booking_result.get("coefficient", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                new_supply_id = booking_result.get("new_supply_id")
                
                logger.info(f"üìä –î–ï–¢–ê–õ–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø {supply_id}: –¥–∞—Ç–∞={booking_date}, —Å–∫–ª–∞–¥={warehouse_name}, –∫–æ—ç—Ñ={coefficient}")
                
            elif booking_result:
                task.status = "failed" 
                task.error = booking_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supply_id}: {task.error}")
            else:
                task.status = "failed"
                task.error = "book_supply_by_id –≤–µ—Ä–Ω—É–ª None"
                logger.error(f"‚ùå book_supply_by_id –≤–µ—Ä–Ω—É–ª None –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
            
        except Exception as e:
            task.status = "failed"
            task.error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
            
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            if hasattr(task, 'page_reference') and task.page_reference:
                try:
                    logger.info(f"üìÑ –ó–∞–∫—Ä—ã–≤–∞—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
                    await task.page_reference.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await self._update_booking_counters(session_id, task)
            
            # –ö–†–ò–¢–ò–ß–ù–û: –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            logger.info(f"üîö –ó–ê–í–ï–†–®–ï–ù–ò–ï _execute_single_booking –¥–ª—è {supply_id}: status={task.status}, result={bool(task.result)}")
    
    async def _update_booking_counters(self, session_id: str, completed_task: BookingTask):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
        if session_id not in self.active_bookings:
            return
            
        booking_info = self.active_bookings[session_id]
        
        if completed_task.status == "completed":
            booking_info["completed_tasks"] += 1
        elif completed_task.status == "failed":
            booking_info["failed_tasks"] += 1
        
        total = booking_info["total_tasks"]
        completed = booking_info["completed_tasks"]
        failed = booking_info["failed_tasks"]
        finished = completed + failed
        
        logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å {session_id}: {finished}/{total} ({completed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫)")
    
    async def _finalize_booking_session(self, session_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if session_id not in self.active_bookings:
            return
            
        booking_info = self.active_bookings[session_id]
        tasks = self.booking_tasks[session_id]
        
        total = booking_info["total_tasks"]
        completed = booking_info["completed_tasks"]
        failed = booking_info["failed_tasks"]
        
        booking_info["status"] = "completed"
        booking_info["end_time"] = datetime.now()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        duration = (booking_info["end_time"] - booking_info["start_time"]).total_seconds()
        
        final_message = (
            f"üèÅ <b>–ú—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–æ–∫: {total}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {completed}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            f"‚è± –í—Ä–µ–º—è: {duration:.1f} —Å–µ–∫\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
        successful_bookings = []
        for task in tasks:
            if task.status == "completed":
                supply_name = task.supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{task.supply.get('id')}")
                successful_bookings.append(supply_name[:30])
        
        if successful_bookings:
            final_message += f"üéØ <b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã:</b>\n"
            for booking in successful_bookings:
                final_message += f"‚Ä¢ {booking}\n"
        
        logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_id}")
        await self._notify_progress(session_id, final_message)
        
        # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        asyncio.create_task(self._cleanup_session(session_id, delay=300))  # 5 –º–∏–Ω—É—Ç
    
    async def _notify_progress(self, session_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
        if session_id in self._progress_callbacks:
            try:
                callback = self._progress_callbacks[session_id]
                await callback(message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _cleanup_session(self, session_id: str, delay: int = 0):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏."""
        if delay > 0:
            await asyncio.sleep(delay)
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_bookings.pop(session_id, None)
        self.booking_tasks.pop(session_id, None)
        self._progress_callbacks.pop(session_id, None)
        
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_id}")
    
    def get_session_status(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return self.active_bookings.get(session_id)
    
    def get_active_sessions(self, user_id: int) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        active_sessions = []
        for session_id, booking_info in self.active_bookings.items():
            if booking_info["user_id"] == user_id and booking_info["status"] in ["starting", "in_progress"]:
                active_sessions.append(session_id)
        return active_sessions
    
    async def cancel_session(self, session_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if session_id not in self.active_bookings:
            return False
        
        booking_info = self.active_bookings[session_id]
        booking_info["status"] = "cancelled"
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        tasks = self.booking_tasks.get(session_id, [])
        for task in tasks:
            if hasattr(task, 'page_reference') and task.page_reference and task.status == "in_progress":
                try:
                    await task.page_reference.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        
        await self._notify_progress(session_id, "‚ùå –ú—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await self._cleanup_session(session_id, delay=5)
        
        logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ —Å–µ—Å—Å–∏—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_id}")
        return True
