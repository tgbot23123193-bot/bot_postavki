#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è WB –Ω–∞ Playwright.
–û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏, —Å—Ç–µ–ª—Å —Ä–µ–∂–∏–º, –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å.
"""

import asyncio
import json
import random
import time
from pathlib import Path
from typing import Optional, Dict, Any, List
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
from playwright_stealth import stealth_async
from ..utils.logger import get_logger

logger = get_logger(__name__)


class WBBrowserAutomationPro:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è WB —Å –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏."""
    
    def __init__(self, headless: bool = True, debug_mode: bool = False):
        self.headless = headless
        self.debug_mode = debug_mode
        self.playwright = None
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
        self.cookies_file = Path("wb_cookies.json")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        ]
        
        # –†–µ–∞–ª—å–Ω—ã–µ viewport —Ä–∞–∑–º–µ—Ä—ã
        self.viewports = [
            {"width": 1920, "height": 1080},
            {"width": 1366, "height": 768},
            {"width": 1440, "height": 900},
            {"width": 1536, "height": 864}
        ]
    
    async def start_browser(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Playwright –±—Ä–∞—É–∑–µ—Ä...")
            
            self.playwright = await async_playwright().start()
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            browser_args = [
                "--disable-blink-features=AutomationControlled",
                "--disable-features=VizDisplayCompositor",
                "--disable-extensions-except=",
                "--disable-extensions",
                "--disable-plugins",
                "--disable-infobars",
                "--disable-dev-shm-usage",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding",
                "--disable-field-trial-config",
                "--disable-back-forward-cache",
                "--disable-background-networking",
                "--disable-sync",
                "--disable-translate",
                "--disable-ipc-flooding-protection",
                "--no-first-run",
                "--no-service-autorun",
                "--password-store=basic",
                "--use-mock-keychain",
                "--force-fieldtrials=*BackgroundTracing/default/",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-client-side-phishing-detection",
                "--disable-component-update",
                "--disable-default-apps",
                "--disable-domain-reliability",
                "--disable-features=TranslateUI,BlinkGenPropertyTrees",
                "--disable-ipc-flooding-protection",
                "--enable-features=NetworkService,NetworkServiceInProcess",
                "--force-color-profile=srgb",
                "--metrics-recording-only",
                "--no-default-browser-check",
                "--no-pings",
                "--use-gl=swiftshader",
                "--window-size=1920,1080"
            ]
            
            if not self.headless:
                browser_args.extend([
                    "--start-maximized",
                    "--disable-web-security",
                    "--allow-running-insecure-content"
                ])
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(
                headless=self.headless,
                args=browser_args,
                slow_mo=50 if self.debug_mode else 0,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                devtools=self.debug_mode and not self.headless
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            viewport = random.choice(self.viewports)
            user_agent = random.choice(self.user_agents)
            
            self.context = await self.browser.new_context(
                viewport=viewport,
                user_agent=user_agent,
                locale="ru-RU",
                timezone_id="Europe/Moscow",
                geolocation={"latitude": 55.7558, "longitude": 37.6176},  # –ú–æ—Å–∫–≤–∞
                permissions=["geolocation"],
                color_scheme="light",
                reduced_motion="no-preference",
                forced_colors="none",
                java_script_enabled=True,
                accept_downloads=True,
                ignore_https_errors=True,
                bypass_csp=True,
                extra_http_headers={
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                    "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
                    "Accept-Encoding": "gzip, deflate, br",
                    "DNT": "1",
                    "Connection": "keep-alive",
                    "Upgrade-Insecure-Requests": "1",
                    "Sec-Fetch-Dest": "document",
                    "Sec-Fetch-Mode": "navigate",
                    "Sec-Fetch-Site": "none",
                    "Sec-Fetch-User": "?1",
                    "Cache-Control": "max-age=0"
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Ä–µ–∂–∏–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            await stealth_async(self.page)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            await self._inject_stealth_scripts()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            await self._load_cookies()
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ª–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            await self.close_browser()
            return False
    
    async def _inject_stealth_scripts(self):
        """–ò–Ω–∂–µ–∫—Ç–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏."""
        stealth_scripts = [
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º webdriver property
            """
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            """,
            
            # –§–∏–∫—Å–∏–º permissions
            """
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
            );
            """,
            
            # –§–∏–∫—Å–∏–º plugins
            """
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            """,
            
            # –§–∏–∫—Å–∏–º languages
            """
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
            """,
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏
            """
            ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout'].forEach(eventType => {
                document.addEventListener(eventType, function(e) {
                    e.isTrusted = true;
                }, true);
            });
            """
        ]
        
        for script in stealth_scripts:
            await self.page.add_init_script(script)
    
    async def _load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏."""
        if self.cookies_file.exists():
            try:
                with open(self.cookies_file, 'r', encoding='utf-8') as f:
                    cookies = json.load(f)
                await self.context.add_cookies(cookies)
                logger.info("üç™ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")
    
    async def _save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏."""
        try:
            cookies = await self.context.cookies()
            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(cookies, f, ensure_ascii=False, indent=2)
            logger.info("üç™ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏: {e}")
    
    async def _human_type(self, selector: str, text: str, delay_range: tuple = (50, 150)):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
        element = await self.page.wait_for_selector(selector, timeout=10000)
        await element.click()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        await element.fill("")
        await asyncio.sleep(random.uniform(0.05, 0.1))
        
        # –í–≤–æ–¥–∏–º –ø–æ —Å–∏–º–≤–æ–ª—É —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        for char in text:
            await element.type(char, delay=random.randint(*delay_range))
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
                await asyncio.sleep(random.uniform(0.1, 0.3))
    
    async def _human_click(self, selector: str, delay_before: tuple = (0.5, 1.5)):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏."""
        await asyncio.sleep(random.uniform(*delay_before))
        
        element = await self.page.wait_for_selector(selector, timeout=10000)
        
        # –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
        await element.hover()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        # –ö–ª–∏–∫–∞–µ–º
        await element.click()
        await asyncio.sleep(random.uniform(0.2, 0.5))
    
    async def login_step1_phone(self, phone: str) -> bool:
        """–®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å—é."""
        try:
            logger.info("üîê –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ WB...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
            login_urls = [
                "https://seller.wildberries.ru/",
                "https://seller.wildberries.ru/login",
                "https://passport.wildberries.ru/signin"
            ]
            
            page_loaded = False
            for url in login_urls:
                try:
                    logger.info(f"üîó –ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å: {url}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    response = await self.page.goto(url, wait_until="networkidle", timeout=30000)
                    
                    if response and response.status == 200:
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {url}")
                        page_loaded = True
                        break
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
                    continue
            
            if not page_loaded:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
                return False
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await asyncio.sleep(random.uniform(2, 4))
            
            if self.debug_mode:
                await self.page.screenshot(path="wb_login_page.png")
                logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_selectors = [
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è WB
                'input[name="phone"]',
                'input[name="phoneNumber"]',
                'input[name="login"]',
                'input[type="tel"]',
                
                # –ü–æ placeholder
                'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω" i]',
                'input[placeholder*="–Ω–æ–º–µ—Ä" i]',
                'input[placeholder*="phone" i]',
                
                # –ü–æ ID
                '#phone',
                '#phoneNumber',
                '#login',
                
                # –ü–æ –∫–ª–∞—Å—Å–∞–º
                '.phone-input input',
                '.login-input input',
                'input[class*="phone" i]',
                'input[class*="login" i]',
                
                # Fallback - –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π input
                'form input:first-of-type',
                'input:first-of-type'
            ]
            
            phone_input = None
            for selector in phone_selectors:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∏–¥–∏–º—ã–π
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        phone_input = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {selector}")
                        break
                except:
                    continue
            
            if not phone_input:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                if self.debug_mode:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    inputs = await self.page.query_selector_all('input')
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(inputs)} input —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                    for i, inp in enumerate(inputs):
                        try:
                            attrs = await inp.evaluate("""el => ({
                                type: el.type,
                                name: el.name,
                                id: el.id,
                                className: el.className,
                                placeholder: el.placeholder,
                                visible: !el.hidden && el.offsetParent !== null
                            })""")
                            logger.info(f"  {i+1}. {attrs}")
                        except:
                            pass
                return False
            
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
            logger.info(f"üì± –í–≤–æ–∂—É –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            await self._human_type(phone_input, phone)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(random.uniform(0.5, 1.0))
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_selectors = [
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")',
                'button:has-text("–î–∞–ª–µ–µ")',
                'input[type="submit"]',
                '.submit-btn',
                '.login-btn',
                'form button:last-of-type'
            ]
            
            submit_btn = None
            for selector in submit_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        submit_btn = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {selector}")
                        break
                except:
                    continue
            
            if submit_btn:
                logger.info("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                await self._human_click(submit_btn)
            else:
                # –ü—Ä–æ–±—É–µ–º Enter
                logger.info("‚å®Ô∏è –ù–∞–∂–∏–º–∞—é Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await self.page.keyboard.press('Enter')
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è SMS –∫–æ–¥–∞
            await asyncio.sleep(random.uniform(2, 4))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            sms_indicators = [
                'input[name="code"]',
                'input[name="smsCode"]',
                'input[placeholder*="–∫–æ–¥" i]',
                'text=–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'text=SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                '.sms-code'
            ]
            
            sms_sent = False
            for indicator in sms_indicators:
                try:
                    if await self.page.query_selector(indicator):
                        sms_sent = True
                        break
                except:
                    continue
            
            if sms_sent:
                logger.info("‚úÖ SMS –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                await self._save_cookies()
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É SMS")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return False
    
    async def login_step2_sms(self, sms_code: str) -> bool:
        """–®–∞–≥ 2: –í–≤–æ–¥ SMS –∫–æ–¥–∞."""
        try:
            logger.info(f"üì® –í–≤–æ–∂—É SMS –∫–æ–¥: {sms_code}")
            
            # –ò—â–µ–º –ø–æ–ª–µ SMS –∫–æ–¥–∞
            sms_selectors = [
                'input[name="code"]',
                'input[name="smsCode"]',
                'input[name="verificationCode"]',
                'input[placeholder*="–∫–æ–¥" i]',
                'input[type="text"]:not([name="phone"])',
                '.sms-code input',
                'form input:last-of-type'
            ]
            
            sms_input = None
            for selector in sms_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        sms_input = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ SMS –∫–æ–¥–∞: {selector}")
                        break
                except:
                    continue
            
            if not sms_input:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞")
                return False
            
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ SMS –∫–æ–¥–∞
            await self._human_type(sms_input, sms_code)
            
            # –ñ–¥–µ–º –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_selectors = [
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                'button:has-text("–î–∞–ª–µ–µ")',
                'form button:last-of-type'
            ]
            
            confirm_btn = None
            for selector in confirm_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        confirm_btn = selector
                        break
                except:
                    continue
            
            if confirm_btn:
                logger.info("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                await self._human_click(confirm_btn)
            else:
                logger.info("‚å®Ô∏è –ù–∞–∂–∏–º–∞—é Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                await self.page.keyboard.press('Enter')
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await asyncio.sleep(random.uniform(3, 5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            current_url = self.page.url
            login_success = any([
                'seller.wildberries.ru' in current_url and 'login' not in current_url,
                'cabinet' in current_url,
                'dashboard' in current_url,
                'supplies' in current_url
            ])
            
            if login_success:
                logger.info("üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ WB!")
                await self._save_cookies()
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. URL: {current_url}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞: {e}")
            return False
    
    async def navigate_to_supplies(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫."""
        try:
            logger.info("üì¶ –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫...")
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ URL –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫
            supplies_urls = [
                "https://seller.wildberries.ru/supplies",
                "https://seller.wildberries.ru/supplies/new",
                "https://seller.wildberries.ru/cabinet/supplies"
            ]
            
            for url in supplies_urls:
                try:
                    response = await self.page.goto(url, wait_until="networkidle", timeout=30000)
                    if response and response.status == 200:
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—à–µ–ª –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {url}")
                        await asyncio.sleep(random.uniform(2, 3))
                        return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é
            menu_selectors = [
                'a[href*="supplies"]',
                'text=–ü–æ—Å—Ç–∞–≤–∫–∏',
                'text=–°–∫–ª–∞–¥ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏',
                '.menu a:has-text("–ü–æ—Å—Ç–∞–≤–∫–∏")'
            ]
            
            for selector in menu_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        await asyncio.sleep(random.uniform(2, 3))
                        logger.info("‚úÖ –ü–µ—Ä–µ—à–µ–ª –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º —á–µ—Ä–µ–∑ –º–µ–Ω—é")
                        return True
                except:
                    continue
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ—Å—Ç–∞–≤–æ–∫")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {e}")
            return False
    
    async def book_supply_slot(self, supply_id: str, date: str, time_slot: str) -> bool:
        """–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
        try:
            logger.info(f"üéØ –ë—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –Ω–∞ {date} {time_slot}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ
            supply_url = f"https://seller.wildberries.ru/supplies/{supply_id}"
            await self.page.goto(supply_url, wait_until="networkidle")
            
            # –ò—â–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            booking_selectors = [
                f'button:has-text("{date}")',
                f'[data-date="{date}"]',
                '.calendar-day',
                '.time-slot',
                'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")'
            ]
            
            for selector in booking_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        logger.info(f"‚úÖ –í—ã–±—Ä–∞–ª —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                        break
                except:
                    continue
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            confirm_selectors = [
                'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
                'button[type="submit"]'
            ]
            
            for selector in confirm_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        await self._human_click(selector)
                        logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                        break
                except:
                    continue
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await asyncio.sleep(random.uniform(2, 4))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            success_indicators = [
                'text=—É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω',
                'text=—Å–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω',
                '.success-message',
                '.booking-success'
            ]
            
            for indicator in success_indicators:
                try:
                    if await self.page.query_selector(indicator):
                        logger.info("üéâ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
                        return True
                except:
                    continue
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
            return False
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫—É–∫–∏."""
        try:
            if self.page:
                await self._save_cookies()
            
            if self.context:
                await self.context.close()
            
            if self.browser:
                await self.browser.close()
            
            if self.playwright:
                await self.playwright.stop()
            
            logger.info("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        finally:
            self.page = None
            self.context = None
            self.browser = None
            self.playwright = None
    
    async def get_current_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL."""
        if self.page:
            return self.page.url
        return ""
    
    async def take_screenshot(self, filename: str = "screenshot.png") -> bool:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç."""
        try:
            if self.page:
                await self.page.screenshot(path=filename, full_page=True)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return False

