"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
https://seller.wildberries.ru/analytics-reports/warehouse-remains
"""

import asyncio
import json
from typing import Optional, Dict, Any, List
from pathlib import Path

from playwright.async_api import Page, Browser, BrowserContext
from ..utils.logger import get_logger
from ..services.browser_manager import BrowserManager
from ..services.database_service import db_service
from ..database.models import User, BrowserSession

logger = get_logger(__name__)


class WBRedistributionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ Wildberries."""
    
    def __init__(self, browser_manager: BrowserManager, fast_mode: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            browser_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            fast_mode: –†–µ–∂–∏–º —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ª–æ–≥–∏)
        """
        self.browser_manager = browser_manager
        self.fast_mode = fast_mode
        self.redistribution_url = "https://seller.wildberries.ru/analytics-reports/warehouse-remains"
    
    async def find_warehouses_by_pattern(self, page: Page, pattern_selector: str) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–∫–ª–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–∑—Ü–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
        
        Args:
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            pattern_selector: –°–µ–ª–µ–∫—Ç–æ—Ä –æ–±—Ä–∞–∑—Ü–∞ —Å–∫–ª–∞–¥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        """
        warehouses = []
        
        try:
            # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –æ–±—Ä–∞–∑—Ü—É
            elements = await page.query_selector_all(pattern_selector)
            logger.info(f"üîç –ü–æ –æ–±—Ä–∞–∑—Ü—É '{pattern_selector}' –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            for i, element in enumerate(elements):
                try:
                    text_content = await element.text_content()
                    data_testid = await element.get_attribute("data-testid")
                    class_name = await element.get_attribute("class")
                    tag_name = await element.evaluate("el => el.tagName")
                    
                    if text_content and text_content.strip():
                        warehouse_info = {
                            "id": f"warehouse_{i}",
                            "name": text_content.strip(),
                            "data_testid": data_testid,
                            "class": class_name,
                            "tag": tag_name,
                            "selector": pattern_selector,
                            "element_index": i
                        }
                        warehouses.append(warehouse_info)
                        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: '{text_content.strip()}' (testid: {data_testid})")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                    continue
                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É '{pattern_selector}': {e}")
            
        return warehouses
    
    async def open_redistribution_page(self, user_id: int) -> Dict[str, Any]:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã browser_sessions
            browser_session = await db_service.get_browser_session(user_id)
            if not browser_session:
                return {
                    "success": False,
                    "error": "–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ browser_sessions",
                    "user_id": user_id
                }
            
            if not browser_session.session_valid:
                return {
                    "success": False,
                    "error": "–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ browser_sessions",
                    "user_id": user_id
                }
            
            if not browser_session.wb_login_success:
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Wildberries. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
                    "user_id": user_id,
                    "login_attempts": browser_session.login_attempts,
                    "last_login": browser_session.last_successful_login
                }
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"üìÅ User data dir: {browser_session.user_data_dir}")
            logger.info(f"üç™ Cookies file: {browser_session.cookies_file}")
            logger.info(f"üîë WB Login success: {browser_session.wb_login_success}")
            logger.info(f"üìû Phone: {browser_session.phone_number}")
            logger.info(f"üïê Last login: {browser_session.last_successful_login}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üöÄ –ó–∞–ø—Ä–æ—Å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            browser = await self.browser_manager.get_browser(
                user_id=user_id,
                headless=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug_mode=True
            )
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {browser}")
            
            if not browser:
                logger.error(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä",
                    "user_id": user_id
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {browser}")
            logger.info(f"üîç –¢–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞: {type(browser)}")
            
            page = browser.page
            logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {page}")
            
            if not page:
                logger.error(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ None! –ë—Ä–∞—É–∑–µ—Ä: {browser}")
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞",
                    "user_id": user_id,
                    "debug_info": {
                        "browser_exists": browser is not None,
                        "browser_type": str(type(browser)),
                        "page_exists": page is not None
                    }
                }
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.redistribution_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            response = await page.goto(self.redistribution_url, wait_until="networkidle")
            
            if not response or response.status != 200:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Å—Ç–∞—Ç—É—Å {response.status if response else 'None'}",
                    "user_id": user_id,
                    "url": self.redistribution_url
                }
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_load_state("networkidle")
            await asyncio.sleep(0.3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JS
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            current_url = page.url
            page_title = await page.title()
            
            logger.info(f"üìÑ –¢–µ–∫—É—â–∏–π URL: {current_url}")
            logger.info(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            redistribution_elements = await self._find_redistribution_elements(page, user_id)
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
            refresh_button_found = False
            refresh_button_selectors = [
                # –¢–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                "span.Button-link_icon_recZqdV\\+k.Button-link_icon--left_big_SMVcmQdSt.Button-link_icon--no-text_7w1r\\+5WDRA",
                "span[class*='Button-link_icon_recZqdV'][class*='Button-link_icon--left_big_SMVcmQdSt'][class*='Button-link_icon--no-text_7w1r']",
                
                # –ë–æ–ª–µ–µ –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "span[class*='Button-link_icon'][class*='Button-link_icon--left_big'][class*='Button-link_icon--no-text']",
                "span[class*='Button-link_icon_recZqdV']",
                "span[class*='Button-link_icon--left_big_SMVcmQdSt']",
                "span[class*='Button-link_icon--no-text_7w1r']",
                
                # –ü–æ –∏–∫–æ–Ω–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                "[data-testid*='refresh']",
                "[class*='refresh']",
                "[title*='–æ–±–Ω–æ–≤–∏—Ç—å']",
                "[title*='–û–±–Ω–æ–≤–∏—Ç—å']"
            ]
            
            logger.info("üîÑ –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            
            for selector in refresh_button_selectors:
                try:
                    refresh_button = await page.query_selector(selector)
                    if refresh_button and await refresh_button.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {selector}")
                        await refresh_button.scroll_into_view_if_needed()
                        await asyncio.sleep(0.1)
                        await refresh_button.click()
                        await asyncio.sleep(1.5)  # –ñ–¥–µ–º 1-2 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        refresh_button_found = True
                        logger.info("üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞, –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
                        break
                except Exception as e:
                    logger.debug(f"–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not refresh_button_found:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            return {
                "success": True,
                "message": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ",
                "user_id": user_id,
                "url": current_url,
                "refresh_button_clicked": refresh_button_found,
                "page_title": page_title,
                "elements_found": redistribution_elements,
                "session_data": {
                    "wb_login_success": browser_session.wb_login_success,
                    "last_successful_login": browser_session.last_successful_login
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                "user_id": user_id
            }
    
    async def _find_redistribution_elements(self, page: Page, user_id: int) -> Dict[str, Any]:
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        
        Args:
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            
        Returns:
            Dict —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        """
        try:
            elements = {
                "redistribution_button": None,
                "filters_button": None,
                "table_found": False,
                "data_rows": 0
            }
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏"
            redistribution_selectors = [
                'button:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")',
                'button:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å")',
                '[data-testid*="redistrib"]',
                '.redistribution-button',
                'button[aria-label*="–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª"]'
            ]
            
            for selector in redistribution_selectors:
                try:
                    element = await page.query_selector(selector)
                    if element:
                        is_visible = await element.is_visible()
                        text = await element.text_content()
                        elements["redistribution_button"] = {
                            "selector": selector,
                            "visible": is_visible,
                            "text": text
                        }
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {selector} (–≤–∏–¥–∏–º–∞: {is_visible})")
                        break
                except Exception:
                    continue
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filters_selectors = [
                'button:has-text("–§–∏–ª—å—Ç—Ä—ã")',
                '[data-testid*="filter"]',
                '.filters-button',
                'button[aria-label*="—Ñ–∏–ª—å—Ç—Ä"]'
            ]
            
            for selector in filters_selectors:
                try:
                    element = await page.query_selector(selector)
                    if element:
                        is_visible = await element.is_visible()
                        text = await element.text_content()
                        elements["filters_button"] = {
                            "selector": selector,
                            "visible": is_visible,
                            "text": text
                        }
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {selector} (–≤–∏–¥–∏–º–∞: {is_visible})")
                        break
                except Exception:
                    continue
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
            table_selectors = [
                'table',
                '[role="table"]',
                '.data-table',
                '[data-testid*="table"]'
            ]
            
            for selector in table_selectors:
                try:
                    table = await page.query_selector(selector)
                    if table:
                        rows = await table.query_selector_all('tr, [role="row"]')
                        elements["table_found"] = True
                        elements["data_rows"] = len(rows)
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å {len(rows)} —Å—Ç—Ä–æ–∫–∞–º–∏")
                        break
                except Exception:
                    continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            screenshot_path = f"screenshots_{user_id}/redistribution_page.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path, full_page=True)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            
            return elements
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    async def click_redistribution_menu(self, user_id: int) -> Dict[str, Any]:
        """
        –ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id=user_id)
            if not browser:
                return {
                    "success": False,
                    "error": "–ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            redistribution_selectors = [
                'button:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")',
                'button:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å")',
                '[data-testid*="redistrib"]',
                '.redistribution-button'
            ]
            
            button_clicked = False
            for selector in redistribution_selectors:
                try:
                    element = await page.query_selector(selector)
                    if element and await element.is_visible():
                        await element.click()
                        logger.info(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ –∫–Ω–æ–ø–∫–µ: {selector}")
                        button_clicked = True
                        break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {selector}: {e}")
                    continue
            
            if not button_clicked:
                return {
                    "success": False,
                    "error": "–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∏–¥–Ω–∞"
                }
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
            await asyncio.sleep(0.3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            screenshot_path = f"screenshots_{user_id}/after_redistribution_click.png"
            await page.screenshot(path=screenshot_path, full_page=True)
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {screenshot_path}")
            
            return {
                "success": True,
                "message": "–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ",
                "user_id": user_id,
                "screenshot": screenshot_path
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –º–µ–Ω—é: {e}")
            return {
                "success": False,
                "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                "user_id": user_id
            }
    
    async def click_redistribution_menu_and_fill_article(self, user_id: int, article: str) -> Dict[str, Any]:
        """
        –ù–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É' –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            article: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –®–∞–≥ 1: –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É"
            transfer_selectors = [
                "button:has-text('–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É')",
                "button:has-text('–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏')",
                "button:has-text('–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å')",
                "button:has-text('–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏')",
                "[data-testid*='transfer']",
                "[data-testid*='redistribute']",
                ".transfer-button",
                ".redistribute-button"
            ]
            
            button_found = False
            for selector in transfer_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É' –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    button = await page.wait_for_selector(selector, timeout=2000)
                    if button:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É': {selector}")
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ –∏ –∫–ª–∏–∫–∞–µ–º
                        await button.scroll_into_view_if_needed()
                        await asyncio.sleep(0.3)
                        await button.click()
                        button_found = True
                        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É' –Ω–∞–∂–∞—Ç–∞")
                        break
                except Exception as e:
                    logger.debug(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not button_found:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                screenshot_path = f"screenshots_{user_id}/no_transfer_button.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path, full_page=True)
                return {
                    "success": False,
                    "error": "–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã/–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await asyncio.sleep(0.3)
            
            # –®–∞–≥ 2: –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB" (–ø–µ—Ä–≤—ã–π –∫–ª–∏–∫)
            primary_field_selectors = [
                "input[placeholder*='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB']",
                "input[placeholder*='–∞—Ä—Ç–∏–∫—É–ª WB']",
                "input[placeholder*='–ê—Ä—Ç–∏–∫—É–ª WB']",
                ".input-field[placeholder*='WB']",
                "[data-testid*='article-wb']"
            ]
            
            primary_field_found = False
            for selector in primary_field_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB' –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    primary_field = await page.wait_for_selector(selector, timeout=2000)
                    if primary_field:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB': {selector}")
                        
                        # –ö–ª–∏–∫–∞–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é
                        await primary_field.click()
                        await asyncio.sleep(0.3)
                        
                        primary_field_found = True
                        logger.info("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB'")
                        break
                except Exception as e:
                    logger.debug(f"–û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not primary_field_found:
                logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª WB' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –ø–æ–ª–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
                logger.info("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –ø–æ–ª–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞...")
            
            # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            await asyncio.sleep(0.3)
            
            # –®–∞–≥ 3: –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª (–ø–æ–ª–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞)
            if primary_field_found:
                logger.info(f"‚å®Ô∏è –°—Ä–∞–∑—É –≤–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª {article} –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ...")
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await page.keyboard.press("Control+a")
                await asyncio.sleep(0.05)
                await page.keyboard.press("Delete")
                await asyncio.sleep(0.05)
                
                # –í–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                await page.keyboard.type(article, delay=70)
                await asyncio.sleep(0.3)
                
                # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                logger.info(f"‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏...")
                await asyncio.sleep(0.8)
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug_screenshot = f"screenshots_{user_id}/dropdown_list_debug.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=debug_screenshot)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: {debug_screenshot}")
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ (—Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å —Å–∫—Ä–∏–Ω–∞)
                product_selectors = [
                    # –¢–û–ß–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä —Å —Å–∫—Ä–∏–Ω–∞ - div.Custom-rim-option_dFaTla4u
                    f"div.Custom-rim-option_dFaTla4u:has-text('{article}')",
                    f"div[class*='Custom-rim-option']:has-text('{article}')",
                    f".Custom-rim-option_dFaTla4u:has-text('{article}')",
                    # Flex Container –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
                    f"div[class*='Custom-rim-option']:has-text('{article}')",
                    f"div[class*='rim-option']:has-text('{article}')",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    f"div[class*='Custom']:has-text('{article}')",
                    f"div[style*='background']:has-text('{article}')",
                    f"div[class*='selected']:has-text('{article}')",
                    f"div[class*='highlighted']:has-text('{article}')",
                    f"div[class*='active']:has-text('{article}')",
                    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ WB
                    f"div[role='option']:has-text('{article}')",
                    f"li[role='option']:has-text('{article}')",
                    f"div[data-testid*='option']:has-text('{article}')",
                    # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    f"div:has-text('{article}')",
                    f"li:has-text('{article}')",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª–∞—Å—Å—É
                    "div.Custom-rim-option_dFaTla4u",
                    "div[class*='Custom-rim-option']",
                    "div[class*='rim-option']",
                    "div[role='option']",
                    "li[role='option']"
                ]
                
                product_found = False
                for selector in product_selectors:
                    try:
                        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        
                        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                        elements = await page.query_selector_all(selector)
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        
                        for element in elements:
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö
                                text_content = await element.text_content()
                                class_name = await element.get_attribute("class")
                                logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç: —Ç–µ–∫—Å—Ç='{text_content}', –∫–ª–∞—Å—Å='{class_name}'")
                                
                                if text_content and article in text_content:
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ: {text_content} (–∫–ª–∞—Å—Å: {class_name})")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                                    if await element.is_visible():
                                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                                        bounding_box = await element.bounding_box()
                                        if bounding_box:
                                            logger.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞: {bounding_box}")
                                            
                                            # –ù–∞–≤–æ–¥–∏–º—Å—è –Ω–∞ —Ü–µ–Ω—Ç—Ä —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
                                            center_x = bounding_box['x'] + bounding_box['width'] / 2
                                            center_y = bounding_box['y'] + bounding_box['height'] / 2
                                            
                                            await page.mouse.move(center_x, center_y)
                                            await asyncio.sleep(0.3)
                                            logger.info(f"üéØ –ù–∞–≤–µ–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ü–µ–Ω—Ç—Ä —Ç–æ–≤–∞—Ä–∞: {text_content}")
                                            
                                            # –ö–ª–∏–∫–∞–µ–º —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
                                            await page.mouse.click(center_x, center_y)
                                            await asyncio.sleep(0.05)
                                            
                                            product_found = True
                                            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: {text_content}")
                                            break
                                        else:
                                            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –∫–ª–∏–∫—É –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
                                            await element.hover()
                                            await asyncio.sleep(0.3)
                                            await element.click()
                                            await asyncio.sleep(0.05)
                                            
                                            product_found = True
                                            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä (fallback –∫–ª–∏–∫): {text_content}")
                                            break
                                        
                            except Exception as e:
                                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞: {e}")
                                continue
                        
                        if product_found:
                            break
                            
                    except Exception as e:
                        logger.debug(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                        continue
                
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –∫–∞–∫ fallback
                if not product_found:
                    logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ")
                    logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
                    await page.keyboard.press("Enter")
                    await asyncio.sleep(0.05)
                
                field_found = True
                logger.info(f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {article} –≤–≤–µ–¥–µ–Ω –∏ {'—Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞' if product_found else '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Enter'}")
            else:
                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º fallback –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –ø–æ–ª—è
                logger.info("üîÑ –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ...")
                
                fallback_selectors = [
                    "input[placeholder*='–∞—Ä—Ç–∏–∫—É–ª']",
                    "input[placeholder*='–ê—Ä—Ç–∏–∫—É–ª']", 
                    "input[placeholder*='–ü–æ–∏—Å–∫']",
                    "input[type='text']:focus",
                    "input[type='search']:focus",
                    "input:focus"
                ]
                
                field_found = False
                for selector in fallback_selectors:
                    try:
                        logger.info(f"üîç Fallback –ø–æ–∏—Å–∫ –ø–æ–ª—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        fallback_field = await page.wait_for_selector(selector, timeout=1500)
                        if fallback_field:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ fallback –ø–æ–ª–µ: {selector}")
                            
                            # –ö–ª–∏–∫–∞–µ–º –∏ –≤–≤–æ–¥–∏–º
                            await fallback_field.click()
                            await asyncio.sleep(0.3)
                            await fallback_field.fill("")
                            await asyncio.sleep(0.05)
                            await fallback_field.type(article, delay=70)
                            await asyncio.sleep(0.3)
                            
                            # –ñ–¥–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è fallback —Ç–æ–∂–µ
                            logger.info("‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (fallback)...")
                            await asyncio.sleep(0.3)
                            
                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è fallback
                            fallback_product_found = False
                            elements = await page.query_selector_all(f"div:has-text('{article}'), li:has-text('{article}'), span:has-text('{article}')")
                            
                            for element in elements:
                                try:
                                    text_content = await element.text_content()
                                    if text_content and article in text_content and await element.is_visible():
                                        await element.hover()
                                        await asyncio.sleep(0.05)
                                        await element.click()
                                        fallback_product_found = True
                                        logger.info(f"‚úÖ Fallback: –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ {text_content}")
                                        break
                                except:
                                    continue
                            
                            if not fallback_product_found:
                                await fallback_field.press("Enter")
                                logger.info("‚úÖ Fallback: –Ω–∞–∂–∞—Ç Enter")
                            
                            field_found = True
                            logger.info(f"‚úÖ Fallback: –∞—Ä—Ç–∏–∫—É–ª {article} –≤–≤–µ–¥–µ–Ω –∏ {'—Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞' if fallback_product_found else '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Enter'}")
                            break
                    except Exception as e:
                        logger.debug(f"Fallback –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                        continue
            
            # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = f"screenshots_{user_id}/redistribution_with_article.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path, full_page=True)
            
            if not field_found:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∏ –≤ –æ–¥–Ω–æ –ø–æ–ª–µ")
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª: –ø–æ–ª–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ",
                    "user_id": user_id,
                    "screenshot": screenshot_path,
                    "button_clicked": button_found,
                    "primary_field_clicked": primary_field_found
                }
            
            return {
                "success": True,
                "message": f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –ø–æ–ª–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –∞—Ä—Ç–∏–∫—É–ª {article} –≤–≤–µ–¥–µ–Ω –∏ {'—Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞' if locals().get('product_found', False) else '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Enter'}",
                "user_id": user_id,
                "article": article,
                "screenshot": screenshot_path,
                "button_clicked": button_found,
                "primary_field_clicked": primary_field_found,
                "article_typed": field_found,
                "product_selected_from_list": locals().get('product_found', False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–∞: {e}")
            return {
                "success": False,
                "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
                "user_id": user_id,
                "article": article
            }

    async def get_available_warehouses(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤
        """
        try:
            logger.info(f"üè™ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –ò—â–µ–º –ø–æ–ª–µ "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥" –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É
            warehouse_selectors = [
                "input[data-testid='warehouseFrom.Select_input_XuWs40d9v']",
                "input[data-testid*='warehouseFrom']",
                "input[data-testid*='warehouse']",
                "input[placeholder*='–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥']",
                "input[placeholder*='—Å–∫–ª–∞–¥']",
                ".warehouse-select input",
                "[data-testid*='Select_input'] input"
            ]
            
            warehouse_field_found = False
            for selector in warehouse_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥' –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    warehouse_field = await page.wait_for_selector(selector, timeout=2000)
                    if warehouse_field:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥': {selector}")
                        await warehouse_field.scroll_into_view_if_needed()
                        await asyncio.sleep(0.3)
                        await warehouse_field.click()
                        await asyncio.sleep(0.3)  # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                        warehouse_field_found = True
                        break
                except Exception as e:
                    logger.debug(f"–ü–æ–ª–µ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not warehouse_field_found:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥'",
                    "user_id": user_id
                }
            
            # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
            await asyncio.sleep(0.3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug_screenshot = f"screenshots_{user_id}/warehouse_dropdown_opened.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=debug_screenshot)
            if not self.fast_mode:
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ –ø–æ–ª–µ —Å–∫–ª–∞–¥–∞: {debug_screenshot}")
            
            # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –Ω–∞–π–¥–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –≤ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ)
            if not self.fast_mode:
                logger.info("üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                all_buttons = await page.query_selector_all("button")
                all_divs = await page.query_selector_all("div")
                all_testids = await page.query_selector_all("[data-testid]")
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –∫–Ω–æ–ø–∫–∏={len(all_buttons)}, div—ã={len(all_divs)}, —Å data-testid={len(all_testids)}")
                
                # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                for i, element in enumerate(all_testids[:10]):
                    try:
                        testid = await element.get_attribute("data-testid")
                        text = await element.text_content()
                        tag = await element.evaluate("el => el.tagName")
                        logger.info(f"üîç –≠–ª–µ–º–µ–Ω—Ç {i}: <{tag}> data-testid='{testid}' text='{text[:50] if text else ''}'")
                    except:
                        continue
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∫–ª–∞–¥—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            warehouses = []
            
            # –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Ç–æ—á–Ω—ã–º CSS –∫–ª–∞—Å—Å–∞–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–Ω–æ–≤)
            warehouse_option_selectors = [
                # –¢–û–ß–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ (–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä + –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å)
                "button.Dropdown-option__wrWrbSdFN.Dropdown-option--warning_chLdehnDx",
                "button[class*='Dropdown-option__wrWrbSdFN'][class*='Dropdown-option--warning_chLdehnDx']",
                "button[class*='Dropdown-option__wrWrbSdFN'][class*='Dropdown-option--warning']",
                "button[class*='Dropdown-option__wrWrbSdFN']",
                
                # –ü–æ data-testid (–µ—Å–ª–∏ –µ—Å—Ç—å)
                "button[data-testid*='Dropdown-option__wrWrbSdFN.Dropdown-option--warning']",
                "button[data-testid*='Dropdown-option__wrWrbSdFN']",
                "button[data-testid*='Dropdown-option--warning_chLdehnDx']",
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                "button[class*='Dropdown-option'][class*='warning']",
                "button[class*='Dropdown-option']",
                "[role='option']"
            ]
            
            for selector in warehouse_option_selectors:
                try:
                    logger.info(f"üîç –ú–ï–¢–û–î 1 - –ü–æ–∏—Å–∫ –æ–ø—Ü–∏–π —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    warehouse_elements = await page.query_selector_all(selector)
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(warehouse_elements)} –æ–ø—Ü–∏–π –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    for i, element in enumerate(warehouse_elements):
                        try:
                            text_content = await element.text_content()
                            data_testid = await element.get_attribute("data-testid")
                            class_name = await element.get_attribute("class")
                            
                            if text_content and text_content.strip():
                                warehouse_info = {
                                    "id": f"warehouse_{i}",
                                    "name": text_content.strip(),
                                    "data_testid": data_testid,
                                    "class": class_name,
                                    "selector": selector
                                }
                                warehouses.append(warehouse_info)
                                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {text_content.strip()} (testid: {data_testid})")
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∫–ª–∞–¥–∞: {e}")
                            continue
                    
                    if warehouses:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∫–ª–∞–¥—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                        break
                        
                except Exception as e:
                    logger.debug(f"–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            # –ú–ï–¢–û–î 2: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¢–û–õ–¨–ö–û —Å CSS –∫–ª–∞—Å—Å–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤
            if not warehouses:
                logger.info("üîç –ú–ï–¢–û–î 2 - –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å CSS –∫–ª–∞—Å—Å–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤...")
                
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ CSS –∫–ª–∞—Å—Å–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤
                warehouse_css_selectors = [
                    "button[class*='Dropdown-option__wrWrbSdFN'][class*='warning']",
                    "button[class*='Dropdown-option__wrWrbSdFN']",
                    "[class*='Dropdown-option__wrWrbSdFN'][class*='warning']",
                    "[class*='Dropdown-option__wrWrbSdFN']"
                ]
                
                found_warehouses = []
                for selector in warehouse_css_selectors:
                    try:
                        logger.info(f"üîç –ú–ï–¢–û–î 2 - –ü–æ–∏—Å–∫ –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        elements = await page.query_selector_all(selector)
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}")
                        
                        for element in elements:
                            try:
                                text_content = await element.text_content()
                                data_testid = await element.get_attribute("data-testid")
                                class_name = await element.get_attribute("class")
                                
                                if text_content and text_content.strip():
                                    text = text_content.strip()
                                    
                                    # –ñ–ï–°–¢–ö–ò–ô –§–ò–õ–¨–¢–† - –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ù–ï-—Å–∫–ª–∞–¥—ã
                                    excluded_words = [
                                        '—Ç–æ–≤–∞—Ä—ã', '—Ü–µ–Ω—ã', '–ø–æ—Å—Ç–∞–≤–∫–∏', '–∑–∞–∫–∞–∑—ã', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 
                                        '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', 'menu', 'chips', 'component', '–∫—Ä–æ–º–µ',
                                        '—Ñ–∏–ª—å—Ç—Ä—ã', '–æ—Ç—á–µ—Ç—ã', '–≥–ª–∞–≤–Ω–∞—è', '–æ—Ç—á–µ—Ç—ã', '–Ω–æ–≤–æ—Å—Ç–∏',
                                        '–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '–æ—Ç–º–µ–Ω–∞', 'excel'
                                    ]
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï —Å–ª—É–∂–µ–±–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                    is_warehouse = True
                                    for word in excluded_words:
                                        if word.lower() in text.lower():
                                            is_warehouse = False
                                            break
                                    
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–≥–æ—Ä–æ–¥–∞ –æ–±—ã—á–Ω–æ 3-20 —Å–∏–º–≤–æ–ª–æ–≤)
                                    if is_warehouse and 3 <= len(text) <= 20:
                                        warehouse_info = {
                                            "id": f"warehouse_css_{len(found_warehouses)}",
                                            "name": text,
                                            "data_testid": data_testid,
                                            "class": class_name,
                                            "selector": selector,
                                            "css_found": True
                                        }
                                        found_warehouses.append(warehouse_info)
                                        logger.info(f"üè™ –°–ö–õ–ê–î –ù–ê–ô–î–ï–ù: '{text}' (CSS: {class_name})")
                            except Exception as e:
                                continue
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                        continue
                
                warehouses = found_warehouses[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10
                logger.info(f"üîç –ú–ï–¢–û–î 2 - –ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –ø–æ CSS –∫–ª–∞—Å—Å–∞–º")
            
            # –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ –≤ –≤–∏–¥–∏–º–æ–º –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            if not warehouses:
                logger.info("üîç –ú–ï–¢–û–î 3 - –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –≤ –≤–∏–¥–∏–º–æ–º –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∏–¥–∏–º—ã–π –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                dropdown_selectors = [
                    "[class*='dropdown'][style*='display: block']",
                    "[class*='dropdown']:not([style*='display: none'])",
                    "[class*='menu'][style*='display: block']",
                    "[role='listbox']",
                    "[role='menu']"
                ]
                
                for dropdown_selector in dropdown_selectors:
                    try:
                        dropdown = await page.query_selector(dropdown_selector)
                        if dropdown:
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫: {dropdown_selector}")
                            
                            # –ò—â–µ–º –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫–ª–∞–¥–æ–≤
                            warehouse_in_dropdown = await dropdown.query_selector_all("button[class*='Dropdown-option'], [class*='option'], button")
                            logger.info(f"üîç –í —Å–ø–∏—Å–∫–µ –Ω–∞–π–¥–µ–Ω–æ {len(warehouse_in_dropdown)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            
                            for element in warehouse_in_dropdown:
                                try:
                                    text = await element.text_content()
                                    class_name = await element.get_attribute("class")
                                    data_testid = await element.get_attribute("data-testid")
                                    
                                    if (text and text.strip() and 
                                        len(text.strip()) >= 3 and len(text.strip()) <= 20 and
                                        class_name and 'Dropdown-option' in class_name):
                                        
                                        warehouse_info = {
                                            "id": f"warehouse_dropdown_{len(warehouses)}",
                                            "name": text.strip(),
                                            "data_testid": data_testid,
                                            "class": class_name,
                                            "selector": dropdown_selector,
                                            "dropdown_found": True
                                        }
                                        warehouses.append(warehouse_info)
                                        logger.info(f"üè™ –°–ö–õ–ê–î –í –°–ü–ò–°–ö–ï: '{text.strip()}' (CSS: {class_name})")
                                except Exception as e:
                                    continue
                            break
                    except Exception as e:
                        continue
                
                logger.info(f"üîç –ú–ï–¢–û–î 3 - –ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ")
            
            # –ú–ï–¢–û–î 4: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∫–ª–∞–¥—ã –ø–æ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–º—Å—è –≤ WB –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            if not warehouses:
                logger.info("üîç –ú–ï–¢–û–î 4 - –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –ø–æ WB –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º...")
                wb_patterns = [
                    # –¢–û–ß–ù–´–ô –°–ï–õ–ï–ö–¢–û–† –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ (–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å)
                    "button[data-testid='Dropdown-option__wrWrbSdFN.Dropdown-option--warning_chLdehnDx']",
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                    "button[data-testid*='Dropdown-option__wrWrbSdFN.Dropdown-option--warning']",
                    "button[data-testid*='Dropdown-option__wrWrbSdFN.Dropdown-option--']",
                    "button[data-testid*='Dropdown-option__wrWrbSdFN']",
                    "button[data-testid*='Dropdown-option--warning_chLdehnDx']",
                    "button[data-testid*='Dropdown-option--warning']",
                    
                    # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã WB (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ)
                    "button[data-testid*='Dropdown-option__'][data-testid*='Dropdown-option--']",
                    "[data-testid*='Dropdown-option__'][data-testid*='.']",
                    "button[data-testid*='Dropdown-option'][data-testid*='warning']",
                    "button[data-testid*='Dropdown-option'][data-testid*='error']",
                    "button[data-testid*='Dropdown-option'][data-testid*='success']",
                    "[data-testid*='option'][data-testid*='__'][data-testid*='.']",
                ]
                
                for pattern in wb_patterns:
                    try:
                        logger.info(f"üîç –ú–ï–¢–û–î 3 - –ü–æ–∏—Å–∫ –ø–æ WB –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                        pattern_warehouses = await self.find_warehouses_by_pattern(page, pattern)
                        if pattern_warehouses:
                            warehouses.extend(pattern_warehouses)
                            logger.info(f"‚úÖ –ú–ï–¢–û–î 3 - –ù–∞–π–¥–µ–Ω–æ {len(pattern_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
                            break
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}")
                        continue
            
            if not warehouses:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ",
                    "user_id": user_id
                }
            
            # –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º Dropdown-option
            logger.info("üîç –û–¢–õ–ê–î–ö–ê - –ü–æ–∏—Å–∫ –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å Dropdown-option...")
            all_dropdown_elements = await page.query_selector_all("[class*='Dropdown-option']")
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê - –ù–∞–π–¥–µ–Ω–æ {len(all_dropdown_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å Dropdown-option")
            
            for i, element in enumerate(all_dropdown_elements[:15]):  # –ü–µ—Ä–≤—ã–µ 15 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                try:
                    text = await element.text_content()
                    class_name = await element.get_attribute("class")
                    tag_name = await element.evaluate("el => el.tagName")
                    is_visible = await element.is_visible()
                    
                    logger.info(f"üîç –≠–õ–ï–ú–ï–ù–¢ {i}: <{tag_name}> '{text}' visible={is_visible} class='{class_name}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª–∞—Å—Å –Ω—É–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    if class_name and 'wrWrbSdFN' in class_name and 'warning' in class_name:
                        logger.info(f"üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –°–ö–õ–ê–î: '{text}' —Å –Ω—É–∂–Ω—ã–º–∏ CSS –∫–ª–∞—Å—Å–∞–º–∏!")
                except Exception as e:
                    continue
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            screenshot_path = f"screenshots_{user_id}/warehouses_list.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {screenshot_path}")
            
            return {
                "success": True,
                "warehouses": warehouses,
                "warehouse_count": len(warehouses),
                "screenshot": screenshot_path,
                "user_id": user_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {str(e)}",
                "user_id": user_id
            }

    async def select_warehouse(self, user_id: int, warehouse_data: Dict[str, str]) -> Dict[str, Any]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            warehouse_data: –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üéØ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {warehouse_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫!
            logger.info(f"üîç –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è "–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å"
            source_field_selectors = [
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å data-testid
                "div[data-testid='form-select-group'] label:has-text('–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å') + div input",
                "label[data-testid*='UBlcSLabel']:has-text('–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å') + div input",
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "//label[contains(text(), '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å')]//following-sibling::div//input",
                "input[placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥']",
                
                # –ü–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                "div.Form-select-group_FCBdFmJB1 label:has-text('–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å') + div input",
                
                # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                "[data-testid*='select'][data-testid*='group'] label:has-text('–û—Ç–∫—É–¥–∞') + div input"
            ]
            
            field_clicked = False
            for selector in source_field_selectors:
                try:
                    if selector.startswith("//"):
                        # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                        elements = await page.locator(selector).all()
                        if elements:
                            await elements[0].click()
                            field_clicked = True
                            logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å' (XPath): {selector}")
                            break
                    else:
                        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                        element = await page.query_selector(selector)
                        if element:
                            await element.click()
                            field_clicked = True
                            logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å' (CSS): {selector}")
                            break
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not field_clicked:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–æ–ª—é '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å'")
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤",
                    "user_id": user_id
                }
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            await asyncio.sleep(0.5 if self.fast_mode else 1.0)
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–∫–ª–∞–¥—É
            warehouse_name = warehouse_data.get('name', '')
            data_testid = warehouse_data.get('data_testid', '')
            
            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞
            warehouse_click_selectors = []
            
            if data_testid:
                warehouse_click_selectors.append(f"[data-testid='{data_testid}']")
                warehouse_click_selectors.append(f"button[data-testid='{data_testid}']")
                warehouse_click_selectors.append(f"div[data-testid='{data_testid}']")
            
            if warehouse_name:
                warehouse_click_selectors.extend([
                    f"button:has-text('{warehouse_name}')",
                    f"div:has-text('{warehouse_name}')",
                    f"[data-testid*='option']:has-text('{warehouse_name}')",
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è WB —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–º
                    f"button[data-testid*='Dropdown-option__wrWrbSdFN']:has-text('{warehouse_name}')",
                    f"button[data-testid*='Dropdown-option--warning']:has-text('{warehouse_name}')",
                    f"button[data-testid*='Dropdown-option']:has-text('{warehouse_name}')"
                ])
            
            # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ fallback (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã WB)
            warehouse_click_selectors.extend([
                "button[data-testid*='Dropdown-option__wrWrbSdFN.Dropdown-option--warning']",
                "button[data-testid*='Dropdown-option__wrWrbSdFN.Dropdown-option--']",
                "button[data-testid*='Dropdown-option__wrWrbSdFN']",
                "button[data-testid*='Dropdown-option--warning']",
                "button[data-testid*='Dropdown-option']",
                "div[data-testid*='Dropdown-option']",
                "[role='option']"
            ])
            
            warehouse_selected = False
            for selector in warehouse_click_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    elements = await page.query_selector_all(selector)
                    
                    for element in elements:
                        try:
                            text_content = await element.text_content()
                            if warehouse_name and warehouse_name in text_content:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ –¥–ª—è –∫–ª–∏–∫–∞: {text_content}")
                                await element.scroll_into_view_if_needed()
                                await asyncio.sleep(0.05)
                                await element.click()
                                await asyncio.sleep(0.3)
                                warehouse_selected = True
                                logger.info(f"üéØ –°–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω: {warehouse_name}")
                                break
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å–∫–ª–∞–¥—É: {e}")
                            continue
                    
                    if warehouse_selected:
                        break
                        
                except Exception as e:
                    logger.debug(f"–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not warehouse_selected:
                # –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
                logger.warning(f"‚ö†Ô∏è –°–∫–ª–∞–¥ '{warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ!")
                return {
                    "success": False,
                    "error": f"–°–∫–ª–∞–¥ '{warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ WB",
                    "warehouse_not_in_list": True,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
                    "user_id": user_id
                }
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            await asyncio.sleep(1.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            
            logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –û–®–ò–ë–û–ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å"
            error_messages = []
            error_selectors = [
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—Ç–æ—á–Ω—ã–π)
                "span.Form-select-input__error_0o5Vr-u",
                "span[class*='Form-select-input__error_0o5Vr-u']",
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—ã
                "span.Form-select-input__error_Qp5MtLu", 
                "span[class*='Form-select-input__error']",
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
                "[class*='Form-select-input__error']",
                "[class*='error'][class*='form']",
                "[class*='error'][class*='select']",
                ".error-message",
                "[data-testid*='error']",
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                "//*[contains(text(), '–ª–∏–º–∏—Ç')]",
                "//*[contains(text(), '–î–Ω–µ–≤–Ω–æ–π')]", 
                "//*[contains(text(), '–∏—Å—á–µ—Ä–ø–∞–Ω')]",
                "//*[contains(text(), '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ')]"
            ]
            
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            for selector in error_selectors:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    if selector.startswith("//"):
                        # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                        error_elements = await page.locator(f"xpath={selector}").all()
                    else:
                        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                        error_elements = await page.query_selector_all(selector)
                    
                    for error_element in error_elements:
                        try:
                            if await error_element.is_visible():
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                                error_text = await error_element.text_content()
                                if error_text and error_text.strip():
                                    cleaned_error = error_text.strip()
                                    
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
                                    if any(keyword in cleaned_error.lower() for keyword in ['–æ—à–∏–±–∫–∞', '–ª–∏–º–∏—Ç', '–∏—Å—á–µ—Ä–ø–∞–Ω', '–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ', '–∑–∞–≤—Ç—Ä–∞', '–Ω–µ–¥–æ—Å—Ç—É–ø']):
                                        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º "–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å", "–ö—É–¥–∞" –∏ —Ç.–¥.)
                                        clean_patterns = [
                                            "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å",
                                            "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å–¥–Ω–µ–≤–Ω–æ–π",  # –°–ª–∏—Ç–Ω–æ –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
                                            "–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏", 
                                            "–∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
                                            "–≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥",
                                            "—Å–∫–ª–∞–¥:"
                                        ]
                                        
                                        final_error = cleaned_error
                                        for pattern in clean_patterns:
                                            final_error = final_error.replace(pattern, "").replace(pattern.title(), "").replace(pattern.upper(), "")
                                        
                                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                                        final_error = " ".join(final_error.split())
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
                                        if final_error and len(final_error) > 15:
                                            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –æ—à–∏–±–æ–∫
                                            is_duplicate = False
                                            for existing_error in error_messages:
                                                # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
                                                if final_error in existing_error or existing_error in final_error:
                                                    is_duplicate = True
                                                    break
                                            
                                            if not is_duplicate:
                                                error_messages.append(final_error)
                                                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: {final_error}")
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—à–∏–±–∫–∏: {e}")
                            continue
                            
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—à–∏–±–æ–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
            if not error_messages:
                logger.info("üîç –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
                
                # –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ—à–∏–±–∫–∞—Ö/–ª–∏–º–∏—Ç–∞—Ö
                broader_search_terms = [
                    "–¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç",
                    "–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω", 
                    "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä",
                    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞",
                    "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "–æ—à–∏–±–∫–∞"
                ]
                
                for term in broader_search_terms:
                    try:
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É
                        xpath_selector = f"//*[contains(translate(text(), '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '{term.lower()}')]"
                        elements = await page.locator(f"xpath={xpath_selector}").all()
                        
                        for element in elements:
                            try:
                                if await element.is_visible():
                                    text = await element.text_content()
                                    if text and text.strip() and len(text.strip()) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                        cleaned_text = text.strip()
                                        
                                        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                        clean_patterns = [
                                            "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å",
                                            "–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å–¥–Ω–µ–≤–Ω–æ–π",  # –°–ª–∏—Ç–Ω–æ –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
                                            "–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏", 
                                            "–∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
                                            "–≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥",
                                            "—Å–∫–ª–∞–¥:"
                                        ]
                                        
                                        final_error = cleaned_text
                                        for pattern in clean_patterns:
                                            final_error = final_error.replace(pattern, "").replace(pattern.title(), "").replace(pattern.upper(), "")
                                        
                                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                                        final_error = " ".join(final_error.split())
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
                                        if final_error and len(final_error) > 15:
                                            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –æ—à–∏–±–æ–∫
                                            is_duplicate = False
                                            for existing_error in error_messages:
                                                if final_error in existing_error or existing_error in final_error:
                                                    is_duplicate = True
                                                    break
                                            
                                            if not is_duplicate:
                                                error_messages.append(final_error)
                                                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: {final_error}")
                                                break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            except Exception as e:
                                continue
                        
                        if error_messages:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                            break
                            
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω—É '{term}': {e}")
                        continue
            
            logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –û–®–ò–ë–û–ö: –Ω–∞–π–¥–µ–Ω–æ {len(error_messages)} –æ—à–∏–±–æ–∫")
            for i, msg in enumerate(error_messages, 1):
                logger.warning(f"  {i}. {msg}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            if error_messages:
                logger.error(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò –ù–ê –°–¢–†–ê–ù–ò–¶–ï! –í–æ–∑–≤—Ä–∞—â–∞–µ–º need_retry=True")
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—à–∏–±–∫–æ–π
                error_screenshot_path = f"screenshots_{user_id}/warehouse_selection_error.png"
                if not self.fast_mode:
                    Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                    await page.screenshot(path=error_screenshot_path)
                
                return {
                    "success": False,
                    "error": "warehouse_selection_error",
                    "error_messages": error_messages,
                    "need_retry": True,
                    "warehouse": warehouse_data,
                    "screenshot": error_screenshot_path,
                    "user_id": user_id
                }
            else:
                logger.info("‚úÖ –û–®–ò–ë–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´, —Å–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            screenshot_path = f"screenshots_{user_id}/warehouse_selected.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {screenshot_path}")
            
            return {
                "success": True,
                "message": f"–°–∫–ª–∞–¥ '{warehouse_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω",
                "warehouse": warehouse_data,
                "screenshot": screenshot_path,
                "user_id": user_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {str(e)}",
                "user_id": user_id
            }

    async def get_destination_warehouses(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ("–ö—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏").
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤
        """
        try:
            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ–ª–µ "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å" (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
            destination_field_selectors = [
                # –¢–û–ß–ù–´–ô –°–ï–õ–ï–ö–¢–û–† —Å –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω–∞ - –ø–æ–∏—Å–∫ input –ø–æ–¥ label "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
                '//label[@data-testid="UBlcSLabel--richGrey_m7PWeFd3w"][contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//following-sibling::*//input',
                '//label[@data-testid="UBlcSLabel--richGrey_m7PWeFd3w"]//following-sibling::*//input',
                '//label[contains(@data-testid, "UBlcSLabel")][contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//following-sibling::*//input',
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
                '//div[contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//following::input[1]',
                '//label[contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//following::input[1]',
                '//span[contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//following::input[1]',
                '//div[contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//parent::*//input',
                '//div[contains(text(), "–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")]//ancestor::*//input',
                
                # –ü–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è (–ù–ï –ø–µ—Ä–≤–æ–≥–æ)
                '(//input[contains(@placeholder, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥")])[2]',
                '(//input[contains(@placeholder, "—Å–∫–ª–∞–¥")])[2]',
                
                # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'input[data-testid="WarehouseToSelect_input_XUWsrd9Br"]',
                'input[data-testid*="WarehouseToSelect_input"]',
                'input[data-testid*="WarehouseToSelect"]',
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
                'input[placeholder*="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥"]:not([data-testid*="WarehouseFromSelect"])',
                'input[placeholder*="—Å–∫–ª–∞–¥"]:not([data-testid*="From"])',
                '[data-testid*="warehouse"][data-testid*="select"]:not([data-testid*="From"])'
            ]
            
            destination_field_found = False
            for selector in destination_field_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä XPath
                    if selector.startswith('//') or selector.startswith('(//'):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath
                        try:
                            logger.info(f"üîç –ü—Ä–æ–±—É–µ–º XPath: {selector}")
                            locator = page.locator(f"xpath={selector}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
                            count = await locator.count()
                            logger.info(f"üîç XPath –Ω–∞—à–µ–ª {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            
                            if count > 0:
                                field = locator.first
                                if await field.is_visible():
                                    await field.click()
                                    await asyncio.sleep(0.3)  # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
                                    destination_field_found = True
                                    logger.info(f"‚úÖ –ü–æ–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–∞–∂–∞—Ç–æ (XPath): {selector}")
                                    break
                                else:
                                    logger.debug(f"XPath —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏–º: {selector}")
                            else:
                                logger.debug(f"XPath –Ω–µ –Ω–∞—à–µ–ª —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {selector}")
                        except Exception as xpath_e:
                            logger.debug(f"–û—à–∏–±–∫–∞ XPath {selector}: {xpath_e}")
                            continue
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                        try:
                            field = await page.wait_for_selector(selector, timeout=1500)
                            if field and await field.is_visible():
                                await field.click()
                                await asyncio.sleep(0.3)  # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
                                destination_field_found = True
                                logger.info(f"‚úÖ –ü–æ–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–∞–∂–∞—Ç–æ (CSS): {selector}")
                                break
                            else:
                                logger.debug(f"CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∏–¥–∏–º: {selector}")
                        except Exception as css_e:
                            logger.debug(f"–û—à–∏–±–∫–∞ CSS {selector}: {css_e}")
                            continue
                except Exception as e:
                    logger.debug(f"–ü–æ–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not destination_field_found:
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥' (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                screenshot_path = f"screenshots_{user_id}/no_destination_field.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
                return {
                    "success": False,
                    "error": "–ü–æ–ª–µ '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥' –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            
            # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            await asyncio.sleep(0.3)
            
            # –û–¢–õ–ê–î–ö–ê: –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –≤ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ)
            if not self.fast_mode:
                logger.info("üîç –û–¢–õ–ê–î–ö–ê - –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                all_select_fields = await page.query_selector_all('input[placeholder*="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥"], input[placeholder*="—Å–∫–ª–∞–¥"]')
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_select_fields)} –ø–æ–ª–µ–π '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥'")
                
                for i, field in enumerate(all_select_fields):
                    try:
                        placeholder = await field.get_attribute("placeholder")
                        data_testid = await field.get_attribute("data-testid")
                        is_visible = await field.is_visible()
                        logger.info(f"üìù –ü–û–õ–ï {i}: placeholder='{placeholder}' testid='{data_testid}' visible={is_visible}")
                    except Exception as e:
                        continue
                
                # –û–¢–õ–ê–î–ö–ê: –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–ö—É–¥–∞"
                logger.info("üîç –û–¢–õ–ê–î–ö–ê - –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º '–ö—É–¥–∞'...")
                all_kuda_elements = await page.query_selector_all('*')
                kuda_count = 0
                for element in all_kuda_elements:
                    try:
                        text = await element.text_content()
                        if text and '–∫—É–¥–∞' in text.lower():
                            tag_name = await element.evaluate("el => el.tagName")
                            data_testid = await element.get_attribute("data-testid")
                            is_visible = await element.is_visible()
                            logger.info(f"üéØ –ö–£–î–ê –≠–õ–ï–ú–ï–ù–¢: <{tag_name}> '{text}' testid='{data_testid}' visible={is_visible}")
                            kuda_count += 1
                            if kuda_count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                                break
                    except Exception as e:
                        continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
            warehouses = []
            
            # –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Ç–æ—á–Ω—ã–º CSS –∫–ª–∞—Å—Å–∞–º
            warehouse_option_selectors = [
                "button.Dropdown-option__wrWrbSdFN.Dropdown-option--warning_chLdehnDx",
                "button[class*='Dropdown-option__wrWrbSdFN'][class*='Dropdown-option--warning_chLdehnDx']",
                "button[class*='Dropdown-option__wrWrbSdFN'][class*='Dropdown-option--warning']",
                "button[class*='Dropdown-option__wrWrbSdFN']",
                "button[class*='Dropdown-option'][class*='warning']",
                "button[class*='Dropdown-option']",
                "[role='option']"
            ]
            
            for selector in warehouse_option_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    warehouse_elements = await page.query_selector_all(selector)
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(warehouse_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for element in warehouse_elements:
                        try:
                            text_content = await element.text_content()
                            data_testid = await element.get_attribute("data-testid")
                            class_name = await element.get_attribute("class")
                            is_visible = await element.is_visible()
                            
                            if text_content and text_content.strip() and is_visible:
                                text = text_content.strip()
                                
                                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                excluded_words = [
                                    '—Ç–æ–≤–∞—Ä—ã', '—Ü–µ–Ω—ã', '–ø–æ—Å—Ç–∞–≤–∫–∏', '–∑–∞–∫–∞–∑—ã', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 
                                    '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', 'menu', 'chips', 'component', '–∫—Ä–æ–º–µ',
                                    '—Ñ–∏–ª—å—Ç—Ä—ã', '–æ—Ç—á–µ—Ç—ã', '–≥–ª–∞–≤–Ω–∞—è', '–Ω–æ–≤–æ—Å—Ç–∏',
                                    '–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '–æ—Ç–º–µ–Ω–∞', 'excel'
                                ]
                                
                                is_warehouse = True
                                for word in excluded_words:
                                    if word.lower() in text.lower():
                                        is_warehouse = False
                                        break
                                
                                if is_warehouse and 3 <= len(text) <= 30:
                                    warehouse_info = {
                                        "id": f"destination_warehouse_{len(warehouses)}",
                                        "name": text,
                                        "data_testid": data_testid,
                                        "class": class_name,
                                        "selector": selector
                                    }
                                    warehouses.append(warehouse_info)
                                    logger.info(f"üè™ –°–ö–õ–ê–î –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø: '{text}' (CSS: {class_name})")
                        except Exception as e:
                            continue
                    
                    if warehouses:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∫–ª–∞–¥—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                        break
                        
                except Exception as e:
                    logger.debug(f"–°–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            screenshot_path = f"screenshots_{user_id}/destination_warehouses_list.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {screenshot_path}")
            
            if not warehouses:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ",
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            
            return {
                "success": True,
                "warehouses": warehouses,
                "warehouse_count": len(warehouses),
                "user_id": user_id,
                "screenshot": screenshot_path
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}",
                "user_id": user_id
            }

    async def select_destination_warehouse(self, user_id: int, warehouse_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            warehouse_data: –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üéØ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {warehouse_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –°–ù–ê–ß–ê–õ–ê –û–¢–ö–†–´–í–ê–ï–ú –î–†–û–ü–î–ê–£–ù –°–ö–õ–ê–î–ê –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
            logger.info("üîΩ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫—É–¥–∞)
            destination_field_selectors = [
                "div[class*='Form-select-input']:has(label:has-text('–ö—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏'))",
                "div[class*='Form-select-input']:has(label:has-text('–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å'))",
                "div[class*='Form-select-input']:has(label:has-text('–°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'))",
                "[class*='Form-select-input']:nth-of-type(2)",  # –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                "[class*='Form-select-input']:last-of-type",    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
                "[class*='select']:has(label:has-text('–ö—É–¥–∞'))",
                "[class*='select']:has(label:has-text('–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'))"
            ]
            
            dropdown_opened = False
            for field_selector in destination_field_selectors:
                try:
                    logger.info(f"üîç –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {field_selector}")
                    field = await page.query_selector(field_selector)
                    if field and await field.is_visible():
                        await field.click()
                        await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç—å—Å—è
                        dropdown_opened = True
                        logger.info(f"‚úÖ –î—Ä–æ–ø–¥–∞—É–Ω —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑: {field_selector}")
                        break
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω —á–µ—Ä–µ–∑ {field_selector}: {e}")
                    continue
            
            if not dropdown_opened:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥
                try:
                    all_selects = await page.query_selector_all("[class*='Form-select-input'], [class*='select']")
                    if len(all_selects) >= 2:  # –í—Ç–æ—Ä–æ–π —Å–µ–ª–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
                        await all_selects[1].click()
                        await asyncio.sleep(0.5)
                        logger.info("‚úÖ –û—Ç–∫—Ä—ã–ª–∏ –≤—Ç–æ—Ä–æ–π –¥—Ä–æ–ø–¥–∞—É–Ω –∫–∞–∫ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                        dropdown_opened = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä–æ–ø–¥–∞—É–Ω–∞: {e}")
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–∫–ª–∞–¥—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            warehouse_name = warehouse_data.get('name', '')
            
            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            warehouse_click_selectors = [
                f"button:has-text('{warehouse_name}')",
                f"button[class*='Dropdown-option']:has-text('{warehouse_name}')",
                f"button[class*='Dropdown-option__wrWrbSdFN']:has-text('{warehouse_name}')",
                "button[class*='Dropdown-option__wrWrbSdFN'][class*='warning']",
                "button[class*='Dropdown-option__wrWrbSdFN']",
                "button[class*='Dropdown-option']",
                "[role='option']"
            ]
            
            warehouse_selected = False
            for selector in warehouse_click_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    elements = await page.query_selector_all(selector)
                    
                    for element in elements:
                        try:
                            element_text = await element.text_content()
                            if element_text and warehouse_name in element_text and await element.is_visible():
                                await element.click()
                                await asyncio.sleep(0.3)
                                warehouse_selected = True
                                logger.info(f"‚úÖ –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{warehouse_name}' –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                                break
                        except Exception as e:
                            continue
                    
                    if warehouse_selected:
                        break
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not warehouse_selected:
                logger.warning(f"‚ö†Ô∏è –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ!")
                screenshot_path = f"screenshots_{user_id}/destination_warehouse_not_selected.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
                return {
                    "success": False,
                    "error": f"–°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ WB",
                    "warehouse_not_in_list": True,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
            await asyncio.sleep(0.3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            error_result = await self.check_redistribution_errors(user_id)
            if not error_result["success"]:
                return error_result
            
            # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = f"screenshots_{user_id}/destination_warehouse_selected.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            
            return {
                "success": True,
                "message": f"–°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{warehouse_name}' –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "warehouse_name": warehouse_name,
                "user_id": user_id,
                "screenshot": screenshot_path
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}",
                "user_id": user_id
            }

    async def check_redistribution_errors(self, user_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –ò—â–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            error_selectors = [
                # –¢–û–ß–ù–´–ô –°–ï–õ–ï–ö–¢–û–† —Å –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω–∞
                'span.Form-select-input__error_Qp5MtLu',
                'span[class*="Form-select-input__error"]',
                'span[class*="error"]',
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
                '.error',
                '[class*="error"]',
                '.alert-danger',
                '.validation-error',
                '[role="alert"]'
            ]
            
            errors_found = []
            for selector in error_selectors:
                try:
                    error_elements = await page.query_selector_all(selector)
                    for element in error_elements:
                        try:
                            error_text = await element.text_content()
                            is_visible = await element.is_visible()
                            
                            if error_text and error_text.strip() and is_visible:
                                errors_found.append(error_text.strip())
                                logger.warning(f"üö® –û–®–ò–ë–ö–ê –ù–ê–ô–î–ï–ù–ê: {error_text.strip()}")
                        except Exception as e:
                            continue
                except Exception as e:
                    continue
            
            if errors_found:
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
                screenshot_path = f"screenshots_{user_id}/redistribution_error.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
                
                return {
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏",
                    "error_messages": errors_found,
                    "user_id": user_id,
                    "screenshot": screenshot_path,
                    "need_retry": True  # –§–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                }
            
            return {
                "success": True,
                "message": "–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "user_id": user_id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—à–∏–±–æ–∫: {str(e)}",
                "user_id": user_id
            }

    async def close_and_reopen_redistribution(self, user_id: int, article: str) -> Dict[str, Any]:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–Ω–æ–≤–æ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.
        """
        try:
            logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É - –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button_selectors = [
                # –ü–æ –ø—É—Ç–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                "span.Button-link_icon_recZqdV\\+k",
                "[class*='Button-link_icon_recZqdV']",
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "button[aria-label='Close']",
                "[class*='close-button']",
                "[class*='Button-link_icon']",
                
                # XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º
                "//button[contains(@class, 'Button-link_icon')]",
                "//span[contains(@class, 'Button-link_icon')]"
            ]
            
            close_clicked = False
            for selector in close_button_selectors:
                try:
                    if selector.startswith("//"):
                        elements = await page.locator(selector).all()
                        if elements:
                            await elements[0].click()
                            close_clicked = True
                            logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (XPath): {selector}")
                            break
                    else:
                        element = await page.query_selector(selector)
                        if element:
                            await element.click()
                            close_clicked = True
                            logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (CSS): {selector}")
                            break
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not close_clicked:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã")
            else:
                # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
                await asyncio.sleep(0.5 if self.fast_mode else 1.0)
            
            # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ñ–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            await self.open_redistribution_page(user_id)
            
            # 3. –ó–∞–Ω–æ–≤–æ –≤–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª
            await self.click_redistribution_menu_and_fill_article(user_id, article)
            
            return {
                "success": True,
                "user_id": user_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã: {str(e)}",
                "user_id": user_id
            }
    
    async def get_available_quantity(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
        """
        try:
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
            quantity_selectors = [
                # –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω–∞
                'span[data-testid*="DIZZWUs"][data-testid*="text-h5_qhelTCwQq"][data-testid*="text-grey700_8a-rf7r3Qj"]',
                'span[data-testid*="DIZZWUs"]',
                'span[data-testid*="text-h5"]',
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                '//span[contains(text(), "–¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ")]',
                '//div[contains(text(), "–¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ")]',
                '//span[contains(text(), "—à—Ç")]',
                '//div[contains(text(), "—à—Ç")]',
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'span[class*="text-h5"]',
                'div[class*="quantity"]',
                '[data-testid*="quantity"]'
            ]
            
            quantity_text = None
            quantity_number = None
            
            for selector in quantity_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    if selector.startswith('//'):
                        # XPath
                        locator = page.locator(f"xpath={selector}")
                        count = await locator.count()
                        if count > 0:
                            element = locator.first
                            if await element.is_visible():
                                text = await element.text_content()
                                if text and text.strip():
                                    quantity_text = text.strip()
                                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (XPath): '{quantity_text}'")
                                    break
                    else:
                        # CSS
                        elements = await page.query_selector_all(selector)
                        for element in elements:
                            if await element.is_visible():
                                text = await element.text_content()
                                if text and text.strip() and ('—à—Ç' in text or '—Ç–æ–≤–∞—Ä' in text.lower()):
                                    quantity_text = text.strip()
                                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (CSS): '{quantity_text}'")
                                    break
                        
                        if quantity_text:
                            break
                            
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if quantity_text:
                import re
                # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                numbers = re.findall(r'\d+', quantity_text)
                if numbers:
                    quantity_number = int(numbers[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
                    logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_number}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            screenshot_path = f"screenshots_{user_id}/quantity_info.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            
            if quantity_text:
                return {
                    "success": True,
                    "quantity_text": quantity_text,
                    "quantity_number": quantity_number,
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            else:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞",
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}",
                "user_id": user_id
            }

    async def input_quantity(self, user_id: int, quantity: int) -> Dict[str, Any]:
        """
        –í–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–≤–æ–¥–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üìù –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {quantity} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = await self.browser_manager.get_browser(user_id, headless=False, debug_mode=True)
            if not browser:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "user_id": user_id
                }
            
            page = browser.page
            if not page:
                return {
                    "success": False,
                    "error": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "user_id": user_id
                }
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity_input_selectors = [
                # –¢–û–ß–ù–´–ô –°–ï–õ–ï–ö–¢–û–† —Å –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω–∞
                'input[data-testid="quantity.simple-input_field_v62ZsG-3M"]',
                'input[data-testid*="quantity.simple-input_field"]',
                'input[data-testid*="quantity"]',
                
                # –ü–æ–∏—Å–∫ –ø–æ placeholder
                'input[placeholder*="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"]',
                'input[placeholder*="–£–∫–∞–∂–∏—Ç–µ"]',
                'input[placeholder*="–í–≤–µ–¥–∏—Ç–µ"]',
                
                # –ü–æ —Ç–∏–ø—É
                'input[type="number"]',
                'input[inputmode="numeric"]',
                
                # –ü–æ –∫–ª–∞—Å—Å–∞–º
                'input[class*="quantity"]',
                'input[class*="input"]',
                'input[class*="field"]',
                
                # –ü–æ data-testid
                '[data-testid*="input_field"]',
                '[data-testid*="input"]',
                '[data-testid*="field"]',
                
                # –û–±—â–∏–µ input –≤ —Ñ–æ—Ä–º–µ
                'form input',
                'div[class*="form"] input',
                'div[class*="Form"] input',
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π input –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—á–∞—Å—Ç–æ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                'input:last-of-type',
                
                # Input –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–Ω –∏ –Ω–µ disabled
                'input:not([disabled]):not([readonly])'
            ]
            
            quantity_input_found = False
            for selector in quantity_input_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    field = await page.query_selector(selector)
                    if field and await field.is_visible():
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        await field.click()
                        await asyncio.sleep(0.1)
                        
                        # –í—ã–¥–µ–ª—è–µ–º –≤—Å—ë –∏ —É–¥–∞–ª—è–µ–º
                        await field.press("Control+a")
                        await asyncio.sleep(0.05)
                        await field.press("Delete")
                        await asyncio.sleep(0.05)
                        
                        # –í–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        await field.type(str(quantity), delay=70)
                        await asyncio.sleep(0.1)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ
                        entered_value = await field.input_value()
                        if str(quantity) in str(entered_value):
                            quantity_input_found = True
                            logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} –≤–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–ª–µ: {selector}")
                            break
                        
                except Exception as e:
                    logger.debug(f"–ü–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not quantity_input_found:
                logger.warning("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                
                # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ù–∞–π–¥–µ–º –í–°–ï input —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π
                try:
                    all_inputs = await page.query_selector_all('input')
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_inputs)} input —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    
                    for i, input_field in enumerate(all_inputs):
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º–æ –ª–∏ –ø–æ–ª–µ
                            if not await input_field.is_visible():
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—è
                            placeholder = await input_field.get_attribute('placeholder') or ""
                            input_type = await input_field.get_attribute('type') or ""
                            data_testid = await input_field.get_attribute('data-testid') or ""
                            class_name = await input_field.get_attribute('class') or ""
                            
                            logger.info(f"üîç Input #{i}: type='{input_type}', placeholder='{placeholder}', testid='{data_testid}', class='{class_name}'")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                            is_quantity_field = (
                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in placeholder.lower() or
                                'quantity' in placeholder.lower() or
                                'quantity' in data_testid.lower() or
                                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in class_name.lower() or
                                input_type == 'number' or
                                'numeric' in (await input_field.get_attribute('inputmode') or "")
                            )
                            
                            if is_quantity_field or i >= len(all_inputs) - 3:  # –ü—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ª—è
                                logger.info(f"üéØ –ü—Ä–æ–±—É–µ–º input #{i} –∫–∞–∫ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞...")
                                
                                # –ü—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                await input_field.click()
                                await asyncio.sleep(0.1)
                                
                                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                                await input_field.press("Control+a")
                                await asyncio.sleep(0.05)
                                await input_field.press("Delete")
                                await asyncio.sleep(0.05)
                                
                                # –í–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                await input_field.type(str(quantity), delay=70)
                                await asyncio.sleep(0.1)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ
                                entered_value = await input_field.input_value()
                                if str(quantity) in str(entered_value):
                                    quantity_input_found = True
                                    logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –≤ input #{i}!")
                                    break
                                
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–≤–æ–¥–∞ –≤ input #{i}: {e}")
                            continue
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ –ø–æ–ª–µ–π: {e}")
            
            if not quantity_input_found:
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                screenshot_path = f"screenshots_{user_id}/no_quantity_field.png"
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
                
                return {
                    "success": False,
                    "error": "–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "user_id": user_id,
                    "screenshot": screenshot_path
                }
            
            # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = f"screenshots_{user_id}/quantity_entered.png"
            if not self.fast_mode:
                Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
                await page.screenshot(path=screenshot_path)
            
            # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
            await asyncio.sleep(0.3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞
            
            redistribute_button_selectors = [
                # –¢–û–ß–ù–´–ô –°–ï–õ–ï–ö–¢–û–† —Å –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω–∞
                'button[data-testid="btg9qhQ8z1m__qenrv+npHf"]',
                'button[data-testid*="btg9qhQ8z1m"]',
                'button[data-testid*="qenrv+npHf"]',
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                'button:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å")',
                'button:has-text("–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å")',
                '[role="button"]:has-text("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å")',
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫
                'button[class*="button"]',
                'button[type="submit"]',
                'button[class*="primary"]'
            ]
            
            redistribute_clicked = False
            for selector in redistribute_button_selectors:
                try:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    if selector.startswith('button:has-text') or selector.startswith('[role="button"]:has-text'):
                        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                        buttons = await page.query_selector_all('button, [role="button"]')
                        for button in buttons:
                            try:
                                button_text = await button.text_content()
                                if button_text and '–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' in button_text.lower() and await button.is_visible():
                                    await button.click()
                                    await asyncio.sleep(0.3)
                                    redistribute_clicked = True
                                    logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞: '{button_text}'")
                                    break
                            except Exception as e:
                                continue
                    else:
                        # –û–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                        button = await page.wait_for_selector(selector, timeout=2000)
                        if button and await button.is_visible():
                            await button.click()
                            await asyncio.sleep(0.3)
                            redistribute_clicked = True
                            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                            break
                    
                    if redistribute_clicked:
                        break
                        
                except Exception as e:
                    logger.debug(f"–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            final_screenshot_path = f"screenshots_{user_id}/redistribution_completed.png"
            await page.screenshot(path=final_screenshot_path)
            
            if redistribute_clicked:
                return {
                    "success": True,
                    "message": f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} –≤–≤–µ–¥–µ–Ω–æ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
                    "quantity": quantity,
                    "user_id": user_id,
                    "screenshot": final_screenshot_path,
                    "redistribute_clicked": True
                }
            else:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {
                    "success": True,
                    "message": f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} –≤–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∫–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "quantity": quantity,
                    "user_id": user_id,
                    "screenshot": final_screenshot_path,
                    "redistribute_clicked": False,
                    "warning": "–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é"
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}",
                "user_id": user_id
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
redistribution_service = None

def get_redistribution_service(browser_manager: BrowserManager, fast_mode: bool = True) -> WBRedistributionService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    global redistribution_service
    if redistribution_service is None:
        redistribution_service = WBRedistributionService(browser_manager, fast_mode)
    return redistribution_service
