"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
"""
import asyncio
from typing import Optional, Dict, Any
from .browser_automation import WBBrowserAutomationPro
from ..utils.logger import get_logger

logger = get_logger(__name__)

class BrowserManager:
    """–ú–£–õ–¨–¢–ò–ë–†–ê–£–ó–ï–†–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π - –ö–ê–ñ–î–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ = –û–¢–î–ï–õ–¨–ù–´–ô –ë–†–ê–£–ó–ï–†!"""
    
    def __init__(self):
        # –ö–†–ò–¢–ò–ß–ù–û: –°–õ–û–í–ê–†–¨ –ë–†–ê–£–ó–ï–†–û–í! –ö–∞–∂–¥—ã–π user_id = –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        self._browsers: Dict[int, WBBrowserAutomationPro] = {}  # user_id -> browser_instance
        self._active_users: Dict[int, Any] = {}  # user_id -> session_data
        self._lock = asyncio.Lock()
    
    async def get_browser(self, user_id: int, headless: bool = True, debug_mode: bool = False, browser_type: str = "firefox") -> Optional[WBBrowserAutomationPro]:
        """–ü–û–õ–£–ß–ê–ï–¢ –ò–õ–ò –°–û–ó–î–ê–ï–¢ –û–¢–î–ï–õ–¨–ù–´–ô –ë–†–ê–£–ó–ï–† –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!"""
        async with self._lock:
            # –ü–†–û–í–ï–†–Ø–ï–ú: –µ—Å—Ç—å –ª–∏ —É–∂–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≠–¢–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self._browsers:
                browser = self._browsers[user_id]
                if browser and browser.page and not browser.page.is_closed():
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Ä—Ç {browser.debug_port})")
                    self._active_users[user_id] = {
                        "headless": headless,
                        "debug_mode": debug_mode,
                        "last_used": asyncio.get_event_loop().time()
                    }
                    return browser
                else:
                    # –ë—Ä–∞—É–∑–µ—Ä —É–º–µ—Ä - —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    logger.warning(f"‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    del self._browsers[user_id]
            
            # –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ë–†–ê–£–ó–ï–† –î–õ–Ø –≠–¢–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            try:
                logger.info(f"üöÄ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                browser = WBBrowserAutomationPro(
                    headless=headless, 
                    debug_mode=debug_mode, 
                    user_id=user_id,
                    browser_type=browser_type  # –ü–ï–†–ï–î–ê–ï–ú –¢–ò–ü –ë–†–ê–£–ó–ï–†–ê!
                )
                
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
                success = await browser.start_browser(headless=headless)
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {success}")
                
                if not success:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
                
                # –°–û–•–†–ê–ù–Ø–ï–ú –≤ —Å–ª–æ–≤–∞—Ä—å –±—Ä–∞—É–∑–µ—Ä–æ–≤
                self._browsers[user_id] = browser
                self._active_users[user_id] = {
                    "headless": headless,
                    "debug_mode": debug_mode,
                    "last_used": asyncio.get_event_loop().time()
                }
                
                logger.info(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Ä—Ç {browser.debug_port})")
                return browser
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                return None
    
    async def close_browser(self, user_id: int) -> bool:
        """–ó–ê–ö–†–´–í–ê–ï–¢ –ë–†–ê–£–ó–ï–† –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø."""
        async with self._lock:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if user_id in self._active_users:
                del self._active_users[user_id]
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
            
            # –ó–ê–ö–†–´–í–ê–ï–ú –ë–†–ê–£–ó–ï–† –≠–¢–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            if user_id in self._browsers:
                browser = self._browsers[user_id]
                try:
                    await browser.close_browser()
                    logger.info(f"üîí –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                finally:
                    del self._browsers[user_id]
                return True
            
            return False
    
    async def force_close_browser(self) -> None:
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ó–ê–ö–†–´–í–ê–ï–¢ –í–°–ï –ë–†–ê–£–ó–ï–†–´."""
        async with self._lock:
            # –ó–ê–ö–†–´–í–ê–ï–ú –í–°–ï –ë–†–ê–£–ó–ï–†–´
            for user_id, browser in self._browsers.items():
                try:
                    await browser.close_browser()
                    logger.info(f"üîí –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {user_id}: {e}")
            
            # –û–ß–ò–©–ê–ï–ú –í–°–ï –°–õ–û–í–ê–†–ò
            self._browsers.clear()
            self._active_users.clear()
    
    def is_browser_active(self, user_id: int = None) -> bool:
        """–ü–†–û–í–ï–†–Ø–ï–¢ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ë–†–ê–£–ó–ï–†–ê –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–õ–ò –õ–Æ–ë–û–ì–û."""
        if user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            browser = self._browsers.get(user_id)
            return browser is not None and browser.page is not None and not browser.page.is_closed()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            return len(self._browsers) > 0
    
    def get_active_users(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return list(self._active_users.keys())
    
    async def cleanup_inactive_users(self, timeout: int = 300) -> None:
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)."""
        current_time = asyncio.get_event_loop().time()
        inactive_users = []
        
        for user_id, data in self._active_users.items():
            if current_time - data["last_used"] > timeout:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            await self.close_browser(user_id)
            logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
browser_manager = BrowserManager()
