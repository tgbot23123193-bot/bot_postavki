"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
"""
import asyncio
from typing import Optional, Dict, Any
from .browser_automation import WBBrowserAutomationPro
from ..utils.logger import get_logger

logger = get_logger(__name__)

class BrowserManager:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π."""
    
    def __init__(self):
        self._browser: Optional[WBBrowserAutomationPro] = None
        self._active_users: Dict[int, Any] = {}  # user_id -> session_data
        self._lock = asyncio.Lock()
    
    async def get_browser(self, user_id: int, headless: bool = True, debug_mode: bool = False) -> Optional[WBBrowserAutomationPro]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self._lock:
            # –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if self._browser and self._browser.page and not self._browser.page.is_closed():
                logger.info(f"üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self._active_users[user_id] = {
                    "headless": headless,
                    "debug_mode": debug_mode,
                    "last_used": asyncio.get_event_loop().time()
                }
                return self._browser
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            try:
                logger.info(f"üöÄ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self._browser = WBBrowserAutomationPro(
                    headless=headless, 
                    debug_mode=debug_mode, 
                    user_id=user_id
                )
                
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
                success = await self._browser.start_browser(headless=headless)
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {success}")
                
                if not success:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    self._browser = None
                    return None
                
                self._active_users[user_id] = {
                    "headless": headless,
                    "debug_mode": debug_mode,
                    "last_used": asyncio.get_event_loop().time()
                }
                
                logger.info(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return self._browser
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                self._browser = None
                return None
    
    async def close_browser(self, user_id: int) -> bool:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self._lock:
            if user_id in self._active_users:
                del self._active_users[user_id]
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not self._active_users and self._browser:
                try:
                    await self._browser.close_browser()
                    logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
                finally:
                    self._browser = None
                return True
            
            return False
    
    async def force_close_browser(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä."""
        async with self._lock:
            if self._browser:
                try:
                    await self._browser.close_browser()
                    logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
                finally:
                    self._browser = None
                    self._active_users.clear()
    
    def is_browser_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä."""
        return self._browser is not None and self._browser.page is not None and not self._browser.page.is_closed()
    
    def get_active_users(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return list(self._active_users.keys())
    
    async def cleanup_inactive_users(self, timeout: int = 300) -> None:
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)."""
        current_time = asyncio.get_event_loop().time()
        inactive_users = []
        
        for user_id, data in self._active_users.items():
            if current_time - data["last_used"] > timeout:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            await self.close_browser(user_id)
            logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
browser_manager = BrowserManager()
