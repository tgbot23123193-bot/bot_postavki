"""
–ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ WB API.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
"""

import aiohttp
import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta


class WBSuppliesService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ Wildberries."""
    
    def __init__(self):
        self.BASE_URL = "https://supplies-api.wildberries.ru"
        self.session = None
    
    async def __aenter__(self):
        """Async context manager entry."""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        if self.session:
            await self.session.close()
    
    async def get_all_supplies(self, api_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            url = f"{self.BASE_URL}/api/v1/supplies"
            
            headers = {
                "Authorization": api_key,  # –ë–µ–∑ Bearer
                "Content-Type": "application/json"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB
            from datetime import datetime, timedelta
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ + –≥–æ–¥ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
            today = datetime.now()
            two_weeks_ago = today - timedelta(days=14)
            year_ago = today - timedelta(days=365)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ –¥–∞—Ç, —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã
            request_body_1 = {
                "statusIDs": [1, 2, 3, 4, 5, 6]  # –í–°–ï —Å—Ç–∞—Ç—É—Å—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–∞—Ç
            }
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ createDate
            request_body_2 = {
                "dates": [
                    {
                        "from": year_ago.strftime("%Y-%m-%d"),
                        "till": today.strftime("%Y-%m-%d"), 
                        "type": "createDate"
                    }
                ],
                "statusIDs": [1, 2, 3, 4, 5, 6]
            }
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            request_body_3 = {
                "dates": [
                    {
                        "from": "2020-01-01",
                        "till": "2030-12-31", 
                        "type": "createDate"
                    }
                ],
                "statusIDs": [1, 2, 3, 4, 5, 6]
            }
            
            # –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
            request_bodies = [
                ("–ë–µ–∑ –¥–∞—Ç", request_body_1),
                ("–ì–æ–¥ –Ω–∞–∑–∞–¥", request_body_2), 
                ("–®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω", request_body_3)
            ]
            
            for variant_name, request_body in request_bodies:
                print(f"üîç –ü—Ä–æ–±—É—é –≤–∞—Ä–∏–∞–Ω—Ç '{variant_name}': {request_body}")
                
                async with self.session.post(url, headers=headers, json=request_body) as response:
                    print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{variant_name}': {response.status}")
                    
                    if response.status == 200:
                        data = await response.json()
                        print(f"üì¶ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                        if isinstance(data, dict):
                            supplies_list = (
                                data.get('supplies') or 
                                data.get('data') or 
                                data.get('result') or 
                                data.get('items') or
                                []
                            )
                        else:
                            supplies_list = data if isinstance(data, list) else []
                        
                        print(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' –ø–æ–ª—É—á–∏–ª {len(supplies_list)} –ø–æ—Å—Ç–∞–≤–æ–∫")
                        
                        if len(supplies_list) > 0:
                            print(f"üéâ –£–°–ü–ï–•! –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç '{variant_name}'")
                            return supplies_list
                        else:
                            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' –≤–µ—Ä–Ω—É–ª 0 –ø–æ—Å—Ç–∞–≤–æ–∫, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' failed {response.status}: {error_text}")
            
            print("üí• –í–°–ï –í–ê–†–ò–ê–ù–¢–´ FAILED - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
            return []
    
    async def get_available_supplies_for_booking(self, api_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        all_supplies = await self.get_all_supplies(api_key)
        
        if not all_supplies:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –æ—Ç API")
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏
        two_weeks_ago = datetime.now() - timedelta(days=14)
        available_supplies = []
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(all_supplies)} –ø–æ—Å—Ç–∞–≤–æ–∫...")
        
        for i, supply in enumerate(all_supplies):
            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"üîç –ü–æ—Å—Ç–∞–≤–∫–∞ {i}: {supply}")
            
            supply_id = supply.get('supplyID', supply.get('id', supply.get('supplyId', f'unknown_{i}')))
            status_name = supply.get('statusName', supply.get('status', supply.get('state', '')))
            create_date_str = supply.get('createDate', supply.get('createdAt', supply.get('created', '')))
            supply_date_str = supply.get('supplyDate', supply.get('scheduledAt', supply.get('scheduled', '')))
            
            print(f"üìã –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}: —Å—Ç–∞—Ç—É—Å='{status_name}', —Å–æ–∑–¥–∞–Ω–∞='{create_date_str}', –Ω–∞–∑–Ω–∞—á–µ–Ω–∞='{supply_date_str}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            is_recent = False
            if create_date_str:
                try:
                    # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                    if 'T' in create_date_str:
                        # ISO —Ñ–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        if '+' in create_date_str:
                            create_date = datetime.fromisoformat(create_date_str.split('+')[0])
                        elif 'Z' in create_date_str:
                            create_date = datetime.fromisoformat(create_date_str.replace('Z', ''))
                        else:
                            create_date = datetime.fromisoformat(create_date_str)
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        create_date = datetime.strptime(create_date_str, '%Y-%m-%d')
                    
                    is_recent = create_date >= two_weeks_ago
                    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_date}, —Å–≤–µ–∂–∞—è: {is_recent}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {create_date_str}: {e}")
                    is_recent = True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∞—Ä—Å–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–µ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏
            status_lower = status_name.lower()
            
            # –°—Ç–∞—Ç—É—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            good_statuses = [
                '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '—Å–æ–∑–¥–∞–Ω–æ', '–Ω–æ–≤–∞—è', '–æ–∂–∏–¥–∞–µ—Ç', 'draft', 'created', 
                'pending', '–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', '—á–µ—Ä–Ω–æ–≤–∏–∫', '—Å–æ–∑–¥–∞–Ω–∞', '–Ω–æ–≤—ã–π'
            ]
            
            # –°—Ç–∞—Ç—É—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            bad_statuses = [
                '–ø—Ä–∏–Ω—è—Ç–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–æ—Ç–º–µ–Ω–µ–Ω–æ', '–∑–∞–∫—Ä—ã—Ç–æ', 'completed', 'cancelled', 
                'closed', 'delivered', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'rejected'
            ]
            
            is_good_status = any(good in status_lower for good in good_statuses)
            is_bad_status = any(bad in status_lower for bad in bad_statuses)
            is_no_schedule = not supply_date_str or supply_date_str.strip() == ''
            
            print(f"üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}:")
            print(f"   - –°–≤–µ–∂–∞—è (< 2 –Ω–µ–¥): {is_recent}")
            print(f"   - –•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ç—É—Å: {is_good_status}")
            print(f"   - –ü–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å: {is_bad_status}")
            print(f"   - –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {is_no_schedule}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –µ—Å–ª–∏:
            # 1. –°–æ–∑–¥–∞–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –ò–õ–ò
            # 2. –ò–º–µ–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å –ò–õ–ò
            # 3. –ù–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏
            # –ò –ù–ï –∏–º–µ–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å
            
            should_include = (is_recent or is_good_status or is_no_schedule) and not is_bad_status
            
            if should_include:
                available_supplies.append(supply)
                print(f"‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ø–æ—Å—Ç–∞–≤–∫–∞ {supply_id}")
            else:
                print(f"‚ùå –ü–†–û–ü–£–©–ï–ù–ê –ø–æ—Å—Ç–∞–≤–∫–∞ {supply_id}")
        
        print(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(available_supplies)} –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ {len(all_supplies)} –æ–±—â–∏—Ö")
        return available_supplies
    
    async def get_supply_details(self, api_key: str, supply_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏."""
        try:
            url = f"{self.BASE_URL}/api/v1/supplies/{supply_id}"
            
            headers = {
                "Authorization": api_key,
                "Content-Type": "application/json"
            }
            
            print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {url}")
            
            async with self.session.get(url, headers=headers) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}")
                    return data
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π {response.status}: {error_text}")
                    return None
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
            return None
