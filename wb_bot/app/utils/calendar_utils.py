"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ Telegram
"""
import calendar
from datetime import datetime, timedelta
from typing import List, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class TelegramCalendar:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ Telegram"""
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    MONTHS = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ)
    WEEKDAYS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    
    @classmethod
    def create_calendar(cls, year: int = None, month: int = None, supply_id: str = "", preorder_id: str = "") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        
        Args:
            year: –ì–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
            month: –ú–µ—Å—è—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
            supply_id: ID –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
            preorder_id: ID –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            InlineKeyboardMarkup —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        """
        if year is None:
            year = datetime.now().year
        if month is None:
            month = datetime.now().month
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        header = f"üìÖ {cls.MONTHS[month-1]} {year}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        cal = calendar.monthcalendar(year, month)
        
        keyboard = []
        
        # –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        keyboard.append([
            InlineKeyboardButton(
                text=header, 
                callback_data="calendar_ignore"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1
        
        keyboard.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è", 
                callback_data=f"calendar_nav_{prev_year}_{prev_month}_{supply_id}_{preorder_id}"
            ),
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è", 
                callback_data=f"calendar_nav_{next_year}_{next_month}_{supply_id}_{preorder_id}"
            )
        ])
        
        # –°—Ç—Ä–æ–∫–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        keyboard.append([
            InlineKeyboardButton(text=day, callback_data="calendar_ignore") 
            for day in cls.WEEKDAYS
        ])
        
        # –°—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        
        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    # –ü—É—Å—Ç—ã–µ –¥–Ω–∏
                    week_buttons.append(
                        InlineKeyboardButton(text=" ", callback_data="calendar_ignore")
                    )
                else:
                    current_date = datetime(year, month, day).date()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    if current_date < tomorrow:
                        # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –∏ —Å–µ–≥–æ–¥–Ω—è - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                        week_buttons.append(
                            InlineKeyboardButton(
                                text=f"‚ùå{day}", 
                                callback_data="calendar_ignore"
                            )
                        )
                    elif current_date == today:
                        # –°–µ–≥–æ–¥–Ω—è - –≤—ã–¥–µ–ª—è–µ–º –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                        week_buttons.append(
                            InlineKeyboardButton(
                                text=f"üî¥{day}", 
                                callback_data="calendar_ignore"
                            )
                        )
                    else:
                        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
                        date_str = current_date.strftime("%d.%m.%Y")
                        week_buttons.append(
                            InlineKeyboardButton(
                                text=str(day), 
                                callback_data=f"calendar_select_{date_str}_{supply_id}_{preorder_id}"
                            )
                        )
            
            keyboard.append(week_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º", 
                callback_data=f"browser_book_supply:{supply_id}"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @classmethod
    def get_calendar_text(cls, year: int, month: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        
        Args:
            year: –ì–æ–¥
            month: –ú–µ—Å—è—Ü
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return (
            f"üìÖ <b>–í–´–ë–û–† –î–ê–¢–´ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø</b>\n\n"
            f"üóìÔ∏è <b>{cls.MONTHS[month-1]} {year}</b>\n\n"
            f"‚úÖ <b>–ó–µ–ª–µ–Ω—ã–µ —á–∏—Å–ª–∞</b> - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã\n"
            f"üî¥ <b>–ö—Ä–∞—Å–Ω—ã–µ</b> - —Å–µ–≥–æ–¥–Ω—è (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n"
            f"‚ùå <b>–°–µ—Ä—ã–µ</b> - –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏\n\n"
            f"üëÜ <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É</b>\n"
            f"‚óÄÔ∏è‚ñ∂Ô∏è <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤</b>"
        )


def parse_calendar_callback(callback_data: str) -> Tuple[str, ...]:
    """
    –ü–∞—Ä—Å–∏—Ç callback_data –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ callback
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å —Ç–∏–ø–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    parts = callback_data.split("_")
    if len(parts) < 2:
        return ("unknown",)
    
    action_type = parts[1]  # nav, select, ignore
    
    if action_type == "nav":
        # calendar_nav_2024_9_supply_preorder
        if len(parts) >= 6:
            return ("nav", int(parts[2]), int(parts[3]), parts[4], parts[5])
        return ("nav",)
    
    elif action_type == "select":
        # calendar_select_15.09.2024_supply_preorder
        if len(parts) >= 5:
            return ("select", parts[2], parts[3], parts[4])
        return ("select",)
    
    else:
        return ("ignore",)

