"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from ...utils.logger import get_logger

logger = get_logger(__name__)
router = Router()


@router.callback_query(F.data == "supplies_settings")
async def show_supplies_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫."""
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫</b>\n\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã\n"
        f"ü§ñ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> –í–∫–ª—é—á–µ–Ω–æ\n"
        f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> 60 —Å–µ–∫\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="clear_all_sessions")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
        ])
    )


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    await callback.message.edit_text(
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö: –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö: –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
        f"<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="supplies_settings")]
        ])
    )


@router.callback_query(F.data == "clear_all_sessions")
async def clear_all_sessions(callback: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ booking_management
        from .booking_management import booking_browser_sessions, monitoring_sessions
        
        cleared_count = 0
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if user_id in booking_browser_sessions:
            session = booking_browser_sessions[user_id]
            session["status"] = "stopped"
            try:
                await session["browser"].close_browser()
            except:
                pass
            del booking_browser_sessions[user_id]
            cleared_count += 1
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if user_id in monitoring_sessions:
            session = monitoring_sessions[user_id]
            session["status"] = "stopped"
            del monitoring_sessions[user_id]
            cleared_count += 1
        
        await callback.message.edit_text(
            f"‚úÖ <b>–°–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã</b>\n\n"
            f"üóë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {cleared_count}\n"
            f"‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="supplies_settings")]
            ])
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏: {e}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="supplies_settings")]
            ])
        )
