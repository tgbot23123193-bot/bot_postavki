"""
API keys management handlers.

This module contains handlers for adding, managing, and validating
Wildberries API keys.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from ...services.database_service import db_service
from ...utils.logger import UserLogger, get_logger

logger = get_logger(__name__)
from ..keyboards.inline import (
    APIKeyCallback, get_api_keys_menu, get_api_keys_list_keyboard,
    get_api_key_management_keyboard, get_confirmation_keyboard, get_main_menu
)
from ..states import APIKeyStates

router = Router()


@router.callback_query(APIKeyCallback.filter(F.action == "add"))
async def start_add_api_key(callback: CallbackQuery, state: FSMContext):
    """Start adding new API key."""
    user_id = callback.from_user.id
    user_logger = UserLogger(user_id)
    
    # Check if user hasn't reached the limit
    existing_keys = await db_service.get_user_api_keys(user_id)
    
    if len(existing_keys) >= 5:  # Max API keys limit
        await callback.answer(
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (–º–∞–∫—Å–∏–º—É–º 5)",
            show_alert=True
        )
        return
    
    instruction_text = (
        "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Wildberries.\n\n"
        "üí° <b>–ì–¥–µ –Ω–∞–π—Ç–∏ API –∫–ª—é—á:</b>\n"
        "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ö–ª—é—á –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    await callback.message.edit_text(instruction_text, parse_mode="HTML")
    await state.set_state(APIKeyStates.waiting_for_api_key)
    await callback.answer()


@router.message(StateFilter(APIKeyStates.waiting_for_api_key))
async def add_api_key(message: Message, state: FSMContext):
    """Process new API key."""
    api_key = message.text.strip()
    user_id = message.from_user.id
    user_logger = UserLogger(user_id)
    
    if not api_key:
        await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # Show processing message
    processing_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
    
    # Add API key to database
    try:
        existing_keys = await db_service.get_user_api_keys(user_id)
        api_key_record = await db_service.add_api_key(
            user_id=user_id,
            api_key=api_key,
            name=f"API –∫–ª—é—á {len(existing_keys) + 1}"
        )
        success = True
        result_message = f"API –∫–ª—é—á '{api_key_record.name}' –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        user_logger.info(f"API key added successfully: {api_key_record.name}")
    except Exception as e:
        success = False
        result_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {str(e)}"
        logger.error(f"Failed to add API key for user {user_id}: {e}")
    
    await processing_msg.delete()
    
    if success:
        user_logger.info("API key added successfully")
        
        success_text = (
            "‚úÖ <b>API –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"{result_message}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–ª—é—á–∏."
        )
        
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_api_keys_menu()
        )
        
        # Ask for key name
        await message.answer(
            "üí≠ –•–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –∏–º—è —ç—Ç–æ–º—É –∫–ª—é—á—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥')\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
        )
        await state.set_state(APIKeyStates.waiting_for_key_name)
        
    else:
        user_logger.warning(f"Failed to add API key: {result_message}")
        
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:</b>\n\n"
            f"{result_message}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        
        await message.answer(error_text, parse_mode="HTML")


@router.message(StateFilter(APIKeyStates.waiting_for_key_name))
async def set_api_key_name(message: Message, state: FSMContext):
    """Set name for the API key."""
    if message.text.strip().lower() in ['/skip', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        await state.clear()
        await message.answer(
            "‚úÖ API –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–º–µ–Ω–∏.",
            reply_markup=get_api_keys_menu()
        )
        return
    
    key_name = message.text.strip()
    user_id = message.from_user.id
    
    # Get the last added key and update its name
    api_keys = await db_service.get_user_api_keys(user_id)
    if api_keys:
        last_key = api_keys[0]  # Most recent
        
        # Update key name in database
        from ...database import get_session
        from sqlalchemy import select
        from ...database.models import APIKey
        
        async with get_session() as session:
            query = select(APIKey).where(APIKey.id == last_key.id)
            result = await session.execute(query)
            api_key_obj = result.scalar_one_or_none()
            
            if api_key_obj:
                api_key_obj.name = key_name
                session.add(api_key_obj)
                await session.commit()
        
        await message.answer(
            f"‚úÖ –ò–º—è –∫–ª—é—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: '{key_name}'",
            reply_markup=get_api_keys_menu()
        )
    
    await state.clear()


@router.callback_query(APIKeyCallback.filter(F.action == "list"))
async def list_api_keys(callback: CallbackQuery):
    """Show list of user's API keys."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã API –∫–ª—é—á–µ–π –ü–†–Ø–ú–û –ò–ó PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info(f"üìã Loading API keys from PostgreSQL database for user {user_id}")
        api_keys = await db_service.get_user_api_keys(user_id)
        logger.info(f"‚úÖ Loaded {len(api_keys)} API keys from database for user {user_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ë–î
        for i, key in enumerate(api_keys):
            logger.info(f"  üìù Key {i+1}: ID={key.id}, Name='{key.name}', Valid={key.is_valid}, Active={key.is_active}, Created={key.created_at}")
            
    except Exception as e:
        logger.error(f"‚ùå Failed to load API keys from database for user {user_id}: {e}")
        import traceback
        logger.error(f"üìç Database error traceback: {traceback.format_exc()}")
        api_keys = []
    
    if not api_keys:
        no_keys_text = (
            "üîë <b>API –∫–ª—é—á–∏</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        
        await callback.message.edit_text(
            no_keys_text,
            parse_mode="HTML",
            reply_markup=get_api_keys_menu()
        )
        await callback.answer()
        return
    
    keys_text = (
        f"üîë <b>–í–∞—à–∏ API –∫–ª—é—á–∏ ({len(api_keys)}/5)</b>\n\n"
        "üìä <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n"
        "üëÜ <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for i, key in enumerate(api_keys, 1):
        status_emoji = "üü¢" if key.is_valid else "üî¥"
        keys_text += f"{i}. {status_emoji} <b>{key.name}</b> (ID: {key.id})\n"
        keys_text += f"   üìÖ –°–æ–∑–¥–∞–Ω: {key.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        keys_text += f"   üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if key.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    
    keys_text += "‚¨áÔ∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</b>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
    keyboard = get_api_keys_list_keyboard(api_keys)
    logger.info(f"üîß Created keyboard with {len(keyboard.inline_keyboard)} rows")
    
    for i, row in enumerate(keyboard.inline_keyboard):
        for j, button in enumerate(row):
            logger.info(f"  Button [{i}][{j}]: '{button.text}' -> '{button.callback_data}'")
    
    logger.info(f"üì§ Displaying {len(api_keys)} API keys from PostgreSQL to user {user_id}")
    await callback.message.edit_text(
        keys_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(APIKeyCallback.filter(F.action == "manage"))
async def manage_api_key(callback: CallbackQuery, callback_data: APIKeyCallback):
    """Show management options for specific API key."""
    user_id = callback.from_user.id
    key_id = callback_data.key_id
    
    logger.info(f"üîß User {user_id} clicked MANAGE for API key {key_id}")
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–æ–º...")
    
    api_keys = await db_service.get_user_api_keys(user_id)
    api_key = next((key for key in api_keys if key.id == key_id), None)
    
    if not api_key:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_emoji = "üü¢" if api_key.is_valid else "üî¥"
    last_used = api_key.last_used.strftime('%d.%m.%Y %H:%M') if api_key.last_used else "–ù–∏–∫–æ–≥–¥–∞"
    success_rate = api_key.get_success_rate() * 100 if api_key.total_requests > 0 else 0
    
    key_info_text = (
        f"üîë <b>{api_key.name}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if api_key.is_valid else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {api_key.created_at.strftime('%d.%m.%Y')}\n"
        f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {last_used}\n"
        f"üìà <b>–ó–∞–ø—Ä–æ—Å–æ–≤:</b> {api_key.total_requests}\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {api_key.successful_requests} ({success_rate:.1f}%)\n"
        f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {api_key.failed_requests}\n\n"
    )
    
    if api_key.validation_error:
        key_info_text += f"‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</b> {api_key.validation_error[:100]}...\n\n"
    
    key_info_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        key_info_text,
        parse_mode="HTML",
        reply_markup=get_api_key_management_keyboard(api_key)
    )
    await callback.answer()


@router.callback_query(APIKeyCallback.filter(F.action == "test"))
async def test_api_key(callback: CallbackQuery, callback_data: APIKeyCallback):
    """Test specific API key."""
    user_id = callback.from_user.id
    key_id = callback_data.key_id
    
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
    
    api_keys = await db_service.get_user_api_keys(user_id)
    api_key = next((key for key in api_keys if key.id == key_id), None)
    
    if not api_key:
        await callback.message.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Test the key
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'ey')
    is_valid = api_key.startswith('ey') and len(api_key) > 100
    
    if is_valid:
        result_text = f"‚úÖ API –∫–ª—é—á '{api_key.name}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    else:
        result_text = f"‚ùå API –∫–ª—é—á '{api_key.name}' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
    
    await callback.message.answer(result_text)
    
    # Refresh the management view
    await manage_api_key(callback, callback_data)


@router.callback_query(APIKeyCallback.filter(F.action == "rename"))
async def start_rename_api_key(callback: CallbackQuery, callback_data: APIKeyCallback, state: FSMContext):
    """Start renaming API key."""
    await state.update_data(key_id=callback_data.key_id)
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–ª—é—á–∞:"
    )
    
    await state.set_state(APIKeyStates.waiting_for_rename)
    await callback.answer()


@router.message(StateFilter(APIKeyStates.waiting_for_rename))
async def rename_api_key(message: Message, state: FSMContext):
    """Process API key rename."""
    data = await state.get_data()
    key_id = data.get('key_id')
    new_name = message.text.strip()
    user_id = message.from_user.id
    
    if not new_name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # Update key name
    from ...database import get_session
    from sqlalchemy import select, and_
    from ...database.models import APIKey
    
    async with get_session() as session:
        query = select(APIKey).where(
            and_(APIKey.id == key_id, APIKey.user_id == user_id)
        )
        result = await session.execute(query)
        api_key = result.scalar_one_or_none()
        
        if api_key:
            api_key.name = new_name
            session.add(api_key)
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ò–º—è –∫–ª—é—á–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: '{new_name}'",
                reply_markup=get_api_keys_menu()
            )
        else:
            await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(APIKeyCallback.filter(F.action == "delete"))
async def delete_api_key_handler(callback: CallbackQuery, callback_data: APIKeyCallback):
    """Confirm API key deletion."""
    key_id = callback_data.key_id
    
    confirmation_text = (
        "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?\n"
        "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ APIKeyCallback
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=APIKeyCallback(action="confirm_delete", key_id=key_id).pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=APIKeyCallback(action="back").pack()
            )
        ]
    ])
    
    await callback.message.edit_text(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=confirmation_keyboard
    )
    await callback.answer()


# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–≤—ã–µ —Å APIKeyCallback


@router.callback_query(APIKeyCallback.filter(F.action == "validate"))
async def validate_all_keys(callback: CallbackQuery):
    """Validate all user's API keys."""
    user_id = callback.from_user.id
    
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ API –∫–ª—é—á–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
    api_keys = await db_service.get_user_api_keys(user_id)
    total_count = len(api_keys)
    valid_count = len([key for key in api_keys if key.is_valid])
    
    result_text = (
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π</b>\n\n"
        f"‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö: {valid_count}\n"
        f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö: {total_count - valid_count}\n"
        f"üìä –í—Å–µ–≥–æ: {total_count}\n\n"
    )
    
    if valid_count == total_count:
        result_text += "üéâ –í—Å–µ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    elif valid_count == 0:
        result_text += "‚ö†Ô∏è –í—Å–µ –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    else:
        result_text += "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è."
    
    await callback.message.edit_text(
        result_text,
        parse_mode="HTML",
        reply_markup=get_api_keys_menu()
    )


@router.callback_query(APIKeyCallback.filter(F.action == "back"))
async def back_to_api_keys_menu(callback: CallbackQuery):
    """Return to API keys main menu."""
    await callback.message.edit_text(
        "üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_api_keys_menu()
    )
    await callback.answer()


@router.callback_query(APIKeyCallback.filter(F.action == "delete"))
async def delete_api_key_handler(callback: CallbackQuery, callback_data: APIKeyCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞."""
    try:
        user_id = callback.from_user.id
        key_id = callback_data.key_id
        
        logger.info(f"üóëÔ∏è DELETE REQUEST: User {user_id} wants to delete API key {key_id}")
        await callback.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –∫–ª—é—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        api_key = await db_service.get_api_key_by_id(key_id, user_id)
        
        if not api_key:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                parse_mode="HTML",
                reply_markup=get_api_keys_menu()
            )
            await callback.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {api_key.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {api_key.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if api_key.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {api_key.total_requests or 0}\n\n"
            f"‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç API –∫–ª—é—á?"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=APIKeyCallback(action="confirm_delete", key_id=key_id).pack()
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=APIKeyCallback(action="list").pack()
                )
            ]
        ])
        
        await callback.message.edit_text(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=confirm_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.",
            parse_mode="HTML",
            reply_markup=get_api_keys_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(APIKeyCallback.filter(F.action == "confirm_delete"))
async def execute_delete_api_key_handler(callback: CallbackQuery, callback_data: APIKeyCallback):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞."""
    try:
        user_id = callback.from_user.id
        key_id = callback_data.key_id
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ {key_id}")
        
        # –£–¥–∞–ª—è–µ–º API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = await db_service.delete_api_key(key_id, user_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>API –∫–ª—é—á —É–¥–∞–ª–µ–Ω</b>\n\n"
                "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode="HTML",
                reply_markup=get_api_keys_menu()
            )
            await callback.answer("‚úÖ –ö–ª—é—á —É–¥–∞–ª–µ–Ω", show_alert=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            user_logger = UserLogger(user_id)
            await user_logger.log_info(f"API –∫–ª—é—á {key_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML",
                reply_markup=get_api_keys_menu()
            )
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.",
            parse_mode="HTML",
            reply_markup=get_api_keys_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
