"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫.
"""

import asyncio
import uuid
from datetime import datetime, timedelta
from typing import Dict, List

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from ..keyboards.inline import MainMenuCallback
from ..states import BookingStates
from ...services.wb_booking import booking_service
from ...services.wb_real_api import wb_real_api, user_api_keys
from .callbacks import user_api_keys as local_api_keys
from ...utils.logger import get_logger

logger = get_logger(__name__)

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
user_booking_tasks = {}  # user_id: {task_id: task_info}


@router.callback_query(F.data == "auto_booking")
async def show_booking_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not local_api_keys.get(user_id):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    active_tasks = user_booking_tasks.get(user_id, {})
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data="create_booking"
        )],
        [InlineKeyboardButton(
            text="üì¶ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É",
            callback_data="book_existing_supply"
        )],
        [InlineKeyboardButton(
            text="üåê –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data="browser_booking"
        )],
        [InlineKeyboardButton(
            text=f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(active_tasks)})",
            callback_data="list_bookings"
        )] if active_tasks else [],
        [InlineKeyboardButton(
            text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            callback_data="booking_help"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        )]
    ])
    
    text = (
        "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ "
        "–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
        "‚ö° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è\n"
        "‚Ä¢ –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –∏ —Å–∫–ª–∞–¥–æ–≤\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "booking_help")
async def show_booking_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."""
    text = (
        "‚ùì <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "1Ô∏è‚É£ <b>–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É:</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        "2Ô∏è‚É£ <b>–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–ª–æ—Ç—ã —Å –Ω—É–∂–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏\n\n"
        "3Ô∏è‚É£ <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –û —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏\n"
        "‚Ä¢ –° –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–ª–æ—Ç—ã —Å x0\n"
        "‚Ä¢ –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ = –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="auto_booking"
        )]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "create_booking")
async def create_booking_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º API –∫–ª—é—á–∏
    user_api_keys.update(local_api_keys)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    loading_msg = await callback.message.edit_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...",
        parse_mode="HTML"
    )
    
    try:
        async with wb_real_api as service:
            warehouses = await service.get_warehouses(local_api_keys[user_id][0])
        
        if not warehouses:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–ª–∞–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(warehouses=warehouses)
        await state.set_state(BookingStates.selecting_warehouse)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã
        main_warehouses = {
            117986: "–ö–æ–ª–µ–¥–∏–Ω–æ",
            507: "–ü–æ–¥–æ–ª—å—Å–∫",
            120762: "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å",
            117501: "–ö–∞–∑–∞–Ω—å",
            1733: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            301: "–°–ü–± –®—É—à–∞—Ä—ã",
            206236: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            206348: "–•–∞–±–∞—Ä–æ–≤—Å–∫",
            130744: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            208941: "–°–ü–± –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥—å"
        }
        
        buttons = []
        for wh_id, wh_name in main_warehouses.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–∫–ª–∞–¥ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
            if any(w.get("ID") == wh_id for w in warehouses):
                buttons.append([InlineKeyboardButton(
                    text=f"üì¶ {wh_name}",
                    callback_data=f"book_wh:{wh_id}:{wh_name}"
                )])
        
        buttons.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="auto_booking"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await loading_msg.edit_text(
            "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error loading warehouses: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
            ])
        )


@router.callback_query(F.data.startswith("book_wh:"))
async def select_warehouse_for_booking(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    parts = callback.data.split(":")
    warehouse_id = int(parts[1])
    warehouse_name = parts[2]
    
    await state.update_data(
        warehouse_id=warehouse_id,
        warehouse_name=warehouse_name
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    loading_msg = await callback.message.edit_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã...",
        parse_mode="HTML"
    )
    
    user_id = callback.from_user.id
    
    try:
        async with wb_real_api as service:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π
            slots = await service.find_available_slots(
                user_id=user_id,
                warehouse_id=warehouse_id,
                supply_type="boxes",
                max_coefficient=5,
                days_ahead=30
            )
        
        if not slots:
            await loading_msg.edit_text(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_booking")]
                ])
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        dates_info = {}
        for slot in slots:
            date = slot['date']
            if date not in dates_info:
                dates_info[date] = {
                    'min_coef': slot['coefficient'],
                    'count': 1
                }
            else:
                dates_info[date]['min_coef'] = min(dates_info[date]['min_coef'], slot['coefficient'])
                dates_info[date]['count'] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(dates_info.keys())[:14]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å 14 –¥–Ω–µ–π
        
        await state.update_data(available_dates=sorted_dates)
        await state.set_state(BookingStates.selecting_dates)
        
        buttons = []
        for date in sorted_dates:
            info = dates_info[date]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                date_obj = datetime.strptime(date, "%Y-%m-%d")
                date_str = date_obj.strftime("%d.%m")
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date_obj.weekday()]
            except:
                date_str = date
                weekday = ""
            
            button_text = f"üìÖ {date_str} {weekday} (x{info['min_coef']})"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"book_date:{date}"
            )])
        
        buttons.extend([
            [InlineKeyboardButton(
                text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã",
                callback_data="book_date:all"
            )],
            [InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="book_dates_done"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="auto_booking"
            )]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await loading_msg.edit_text(
            f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–°–∫–ª–∞–¥: {warehouse_name}\n\n"
            f"üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç.\n"
            f"–ë–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error loading dates: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_booking")]
            ])
        )


@router.callback_query(F.data.startswith("book_date:"))
async def toggle_booking_date(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()
    selected_dates = data.get('selected_dates', [])
    available_dates = data.get('available_dates', [])
    
    date = callback.data.split(":")[1]
    
    if date == "all":
        # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã
        selected_dates = available_dates.copy()
    else:
        # Toggle –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        if date in selected_dates:
            selected_dates.remove(date)
        else:
            selected_dates.append(date)
    
    await state.update_data(selected_dates=selected_dates)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    warehouse_name = data.get('warehouse_name', '')
    
    buttons = []
    for avail_date in available_dates:
        try:
            date_obj = datetime.strptime(avail_date, "%Y-%m-%d")
            date_str = date_obj.strftime("%d.%m")
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date_obj.weekday()]
        except:
            date_str = avail_date
            weekday = ""
        
        is_selected = avail_date in selected_dates
        prefix = "‚úÖ" if is_selected else "üìÖ"
        
        button_text = f"{prefix} {date_str} {weekday}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"book_date:{avail_date}"
        )])
    
    buttons.extend([
        [InlineKeyboardButton(
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã",
            callback_data="book_date:all"
        )],
        [InlineKeyboardButton(
            text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" if selected_dates else "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã",
            callback_data="book_dates_done" if selected_dates else "none"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="auto_booking"
        )]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    selected_info = f"\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–∞—Ç: {len(selected_dates)}" if selected_dates else ""
    
    await callback.message.edit_text(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–°–∫–ª–∞–¥: {warehouse_name}{selected_info}\n\n"
        f"üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç.\n"
        f"–ë–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é.",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "book_dates_done")
async def finish_date_selection(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç."""
    data = await state.get_data()
    selected_dates = data.get('selected_dates', [])
    
    if not selected_dates:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É", show_alert=True)
        return
    
    await state.set_state(BookingStates.selecting_coefficient)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ x0 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="book_coef:0")],
        [InlineKeyboardButton(text="üí∞ –î–æ x1", callback_data="book_coef:1")],
        [InlineKeyboardButton(text="üí∞ –î–æ x2", callback_data="book_coef:2")],
        [InlineKeyboardButton(text="üí∞ –î–æ x3", callback_data="book_coef:3")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto_booking")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
    dates_str = ", ".join([
        datetime.strptime(d, "%Y-%m-%d").strftime("%d.%m")
        for d in sorted(selected_dates)[:5]
    ])
    if len(selected_dates) > 5:
        dates_str += f" –∏ –µ—â–µ {len(selected_dates) - 5}"
    
    await callback.message.edit_text(
        f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>\n\n"
        f"–°–∫–ª–∞–¥: {data['warehouse_name']}\n"
        f"–î–∞—Ç—ã: {dates_str}\n\n"
        f"üéØ –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º\n"
        f"–Ω–µ –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("book_coef:"))
async def select_coefficient(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç."""
    coef = int(callback.data.split(":")[1])
    
    await state.update_data(max_coefficient=coef)
    await state.set_state(BookingStates.selecting_interval)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    buttons = [
        [InlineKeyboardButton(text="‚ö° –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (VIP)", callback_data="book_interval:1")],
        [InlineKeyboardButton(text="üöÄ –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥", callback_data="book_interval:5")],
        [InlineKeyboardButton(text="‚è± –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥", callback_data="book_interval:10")],
        [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥", callback_data="book_interval:30")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto_booking")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"–ß–µ–º —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å\n"
        f"–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏.\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ß–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        f"—Å–æ–∑–¥–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("book_interval:"))
async def start_auto_booking(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    interval = int(callback.data.split(":")[1])
    
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task_id = str(uuid.uuid4())[:8]
    task_info = {
        'id': task_id,
        'warehouse_id': data['warehouse_id'],
        'warehouse_name': data['warehouse_name'],
        'selected_dates': data['selected_dates'],
        'max_coefficient': data['max_coefficient'],
        'check_interval': interval,
        'created_at': datetime.now().isoformat(),
        'status': 'active'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    if user_id not in user_booking_tasks:
        user_booking_tasks[user_id] = {}
    user_booking_tasks[user_id][task_id] = task_info
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(
        booking_service.start_auto_booking(
            user_id=user_id,
            task_id=task_id,
            warehouse_id=data['warehouse_id'],
            warehouse_name=data['warehouse_name'],
            supply_type="boxes",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞
            target_dates=data['selected_dates'],
            max_coefficient=data['max_coefficient'],
            check_interval=interval
        )
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–µ—Ä–≤–∏—Å–µ
    if user_id not in booking_service.active_bookings:
        booking_service.active_bookings[user_id] = {}
    booking_service.active_bookings[user_id][task_id] = task
    
    await state.clear()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    dates_str = ", ".join([
        datetime.strptime(d, "%Y-%m-%d").strftime("%d.%m")
        for d in sorted(data['selected_dates'])[:3]
    ])
    if len(data['selected_dates']) > 3:
        dates_str += f" –∏ –µ—â–µ {len(data['selected_dates']) - 3}"
    
    text = (
        f"‚úÖ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
        f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}\n"
        f"üì¶ –°–∫–ª–∞–¥: {data['warehouse_name']}\n"
        f"üìÖ –î–∞—Ç—ã: {dates_str}\n"
        f"üí∞ –ú–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{data['max_coefficient']}\n"
        f"‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫\n\n"
        f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n"
        f"üí° –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="list_bookings")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="auto_booking")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer("‚úÖ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!", show_alert=True)


@router.callback_query(F.data == "list_bookings")
async def list_booking_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    tasks = user_booking_tasks.get(user_id, {})
    
    if not tasks:
        await callback.message.edit_text(
            "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_booking")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
            ])
        )
        return
    
    text = "üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
    
    buttons = []
    for task_id, task in tasks.items():
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        created = datetime.fromisoformat(task['created_at'])
        duration = datetime.now() - created
        hours = int(duration.total_seconds() // 3600)
        minutes = int((duration.total_seconds() % 3600) // 60)
        
        text += (
            f"üî∏ <b>ID: {task_id}</b>\n"
            f"üì¶ {task['warehouse_name']}\n"
            f"üìÖ –î–∞—Ç: {len(task['selected_dates'])}\n"
            f"üí∞ –î–æ x{task['max_coefficient']}\n"
            f"‚è± –ö–∞–∂–¥—ã–µ {task['check_interval']} —Å–µ–∫\n"
            f"‚è≥ –†–∞–±–æ—Ç–∞–µ—Ç: {hours}—á {minutes}–º–∏–Ω\n\n"
        )
        
        buttons.append([InlineKeyboardButton(
            text=f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {task_id}",
            callback_data=f"stop_booking:{task_id}"
        )])
    
    buttons.extend([
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_booking")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("stop_booking:"))
async def stop_booking_task(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    task_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
    booking_service.stop_booking(user_id, task_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if user_id in user_booking_tasks and task_id in user_booking_tasks[user_id]:
        del user_booking_tasks[user_id][task_id]
    
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await list_booking_tasks(callback)


@router.callback_query(F.data == "book_existing_supply")
async def show_existing_supplies(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not local_api_keys.get(user_id):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á", show_alert=True)
        return
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º API –∫–ª—é—á–∏
    user_api_keys.update(local_api_keys)
    
    loading_msg = await callback.message.edit_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫...",
        parse_mode="HTML"
    )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
        from app.services.wb_supplies_new import WBSuppliesService
        
        async with WBSuppliesService() as wb_service:
            supplies = await wb_service.get_available_supplies_for_booking(local_api_keys[user_id][0])
        
        if not supplies:
            await loading_msg.edit_text(
                "üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n"
                "‚Ä¢ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API WB\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        buttons = []
        text = f"üì¶ <b>–í–∞—à–∏ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ ({len(supplies)} —à—Ç):</b>\n\n"
        
        if len(supplies) == 0:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'.\n\n"
            text += "üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB\n"
            text += "–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_supplies_to_show = 50  # –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        for i, supply in enumerate(supplies[:max_supplies_to_show]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 50 –ø–æ—Å—Ç–∞–≤–æ–∫
            supply_id = supply.get("supplyID")
            preorder_id = supply.get("preorderID")
            status = supply.get("statusName", "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            phone = supply.get("phone", "")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            create_date = supply.get("createDate", "")
            if create_date:
                try:
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(create_date.replace('Z', '+00:00').replace('+03:00', '+00:00'))
                    date_str = date_obj.strftime("%d.%m.%Y")
                except:
                    date_str = create_date[:10] if len(create_date) >= 10 else create_date
            else:
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
            text += (
                f"üî¥ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id or preorder_id or f'ID{i+1}'}</b>\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {date_str}\n"
                f"üìã –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            buttons.append([InlineKeyboardButton(
                text=f"üì¶ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å #{supply_id or preorder_id or f'ID{i+1}'}",
                callback_data=f"select_supply:{supply_id or preorder_id}"
            )])
        
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –±–æ–ª—å—à–µ —á–µ–º –ø–æ–∫–∞–∑–∞–Ω–æ
        if len(supplies) > max_supplies_to_show:
            text += f"\n<i>... –∏ –µ—â–µ {len(supplies) - max_supplies_to_show} –ø–æ—Å—Ç–∞–≤–æ–∫</i>\n"
            text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_supplies_to_show} –ø–æ—Å—Ç–∞–≤–æ–∫</i>\n"
        
        buttons.append([InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="auto_booking"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await loading_msg.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error loading supplies: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
            ])
        )


@router.callback_query(F.data.startswith("select_supply:"))
async def select_supply_for_booking(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    supply_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(selected_supply_id=supply_id)
    await state.set_state(BookingStates.selecting_supply)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = (
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ #{supply_id}:</b>\n\n"
        f"üìÖ <b>–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä</b> - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n"
        f"ü§ñ <b>–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ –ø–µ—Ä–∏–æ–¥–µ</b> - —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã", callback_data=f"manual_booking:{supply_id}")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ –ø–µ—Ä–∏–æ–¥–µ", callback_data=f"auto_period:{supply_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("manual_booking:"))
async def manual_booking_handler(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    supply_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    loading_msg = await callback.message.edit_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã...",
        parse_mode="HTML"
    )
    
    try:
        async with wb_real_api as service:
            supply_details = await service.get_supply_details(local_api_keys[user_id][0], supply_id)
            
            if not supply_details:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_supply:{supply_id}")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            warehouse_id = supply_details.get("warehouseID") or supply_details.get("actualWarehouseID")
            if not warehouse_id:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–ª–∞–¥ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
            await state.update_data(
                supply_details=supply_details,
                warehouse_id=warehouse_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
            slots = await service.find_available_slots(
                user_id=user_id,
                warehouse_id=warehouse_id,
                supply_type="boxes",
                max_coefficient=3,
                days_ahead=14
            )
            
            if not slots:
                await loading_msg.edit_text(
                    f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</b>\n\n"
                    f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
                    f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—Å—Ç–∞–≤–∫—É.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            dates_info = {}
            for slot in slots:
                date = slot['date']
                if date not in dates_info:
                    dates_info[date] = {
                        'min_coef': slot['coefficient'],
                        'count': 1
                    }
                else:
                    dates_info[date]['min_coef'] = min(dates_info[date]['min_coef'], slot['coefficient'])
                    dates_info[date]['count'] += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            sorted_dates = sorted(dates_info.keys())[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å 10 –¥–∞—Ç
            
            buttons = []
            for date in sorted_dates:
                info = dates_info[date]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    from datetime import datetime
                    date_obj = datetime.strptime(date, "%Y-%m-%d")
                    date_str = date_obj.strftime("%d.%m")
                    weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date_obj.weekday()]
                except:
                    date_str = date
                    weekday = ""
                
                button_text = f"üìÖ {date_str} {weekday} (x{info['min_coef']})"
                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"book_supply_date:{date}"
                )])
            
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="book_existing_supply"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            text = (
                f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
                f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"üìã –°—Ç–∞—Ç—É—Å: {supply_details.get('statusName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supply_details.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º:"
            )
            
            await loading_msg.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
    except Exception as e:
        print(f"Error loading supply details: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
            ])
        )


@router.callback_query(F.data.startswith("auto_period:"))
async def auto_period_booking(callback: CallbackQuery, state: FSMContext):
    """–ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ."""
    supply_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        supply_id=supply_id,
        booking_mode="auto_period"
    )
    await state.set_state(BookingStates.selecting_start_date)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    from datetime import datetime, timedelta
    
    text = (
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n\n"
        f"<b>–®–∞–≥ 1/2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞\n\n"
        f"üí° –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ\n"
        f"–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
    today = datetime.now().date()
    buttons = []
    
    for i in range(0, 30, 3):  # –ü–æ 3 –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
        row = []
        for j in range(3):
            day_offset = i + j
            if day_offset < 30:
                target_date = today + timedelta(days=day_offset)
                row.append(InlineKeyboardButton(
                    text=target_date.strftime("%d.%m"),
                    callback_data=f"start_date:{target_date.strftime('%Y-%m-%d')}"
                ))
        if row:
            buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="book_existing_supply")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("start_date:"), BookingStates.selecting_start_date)
async def handle_start_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞."""
    from datetime import datetime, timedelta
    
    selected_date = callback.data.split(":")[1]  # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
    await state.update_data(start_date=selected_date)
    await state.set_state(BookingStates.selecting_end_date)
    
    data = await state.get_data()
    supply_id = data.get('supply_id')
    
    text = (
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
        f"üìç –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: <b>{selected_date}</b>\n\n"
        f"<b>–®–∞–≥ 2/2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    start = datetime.strptime(selected_date, "%Y-%m-%d").date()
    buttons = []
    
    for i in range(1, 31, 3):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –¥–Ω—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        row = []
        for j in range(3):
            day_offset = i + j
            if day_offset <= 30:
                target_date = start + timedelta(days=day_offset)
                row.append(InlineKeyboardButton(
                    text=target_date.strftime("%d.%m"),
                    callback_data=f"end_date:{target_date.strftime('%Y-%m-%d')}"
                ))
        if row:
            buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="book_existing_supply")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("end_date:"), BookingStates.selecting_end_date)
async def handle_end_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞."""
    end_date = callback.data.split(":")[1]  # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
    data = await state.get_data()
    start_date = data.get('start_date')
    supply_id = data.get('supply_id')
    
    await state.update_data(end_date=end_date)
    await state.set_state(BookingStates.confirming_dates)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = (
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞</b>\n\n"
        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}\n\n"
        f"üéØ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
        f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1 - x3\n"
        f"‚Ä¢ –¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: –ö–æ—Ä–æ–±–∞\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 1 —Å–µ–∫\n\n"
        f"‚ö° –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫", callback_data="start_auto_search")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="configure_search")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="book_existing_supply")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "start_auto_search", BookingStates.confirming_dates)
async def start_auto_search(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ."""
    data = await state.get_data()
    supply_id = data.get('supply_id')
    start_date = data.get('start_date')
    end_date = data.get('end_date')
    user_id = callback.from_user.id
    
    await state.set_state(BookingStates.monitoring_slots)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_msg = await callback.message.edit_text(
        f"üîç <b>–ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–ø–æ–∏—Å–∫...</b>\n\n"
        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        f"‚è≥ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="stop_auto_search")]
        ])
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        import asyncio
        from datetime import datetime, timedelta
        
        async with wb_real_api as service:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏
            supply_details = await service.get_supply_details(local_api_keys[user_id][0], supply_id)
            
            if not supply_details:
                await monitoring_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
                    ])
                )
                return
            
            warehouse_id = supply_details.get("warehouseID") or supply_details.get("actualWarehouseID")
            
            # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            attempts = 0
            max_attempts = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            
            while attempts < max_attempts:
                current_state = await state.get_state()
                if current_state != BookingStates.monitoring_slots:
                    # –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    break
                
                attempts += 1
                
                # –ò—â–µ–º —Å–ª–æ—Ç—ã
                slots = await service.find_available_slots(
                    user_id=user_id,
                    warehouse_id=warehouse_id,
                    supply_type="boxes",
                    max_coefficient=3,
                    days_ahead=30
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
                filtered_slots = []
                for slot in slots:
                    slot_date = datetime.strptime(slot['date'], "%Y-%m-%d").date()
                    start = datetime.strptime(start_date, "%Y-%m-%d").date()
                    end = datetime.strptime(end_date, "%Y-%m-%d").date()
                    
                    if start <= slot_date <= end:
                        filtered_slots.append(slot)
                
                if filtered_slots:
                    # –ù–∞—à–ª–∏ —Å–ª–æ—Ç! –ë—Ä–æ–Ω–∏—Ä—É–µ–º
                    best_slot = min(filtered_slots, key=lambda x: x['coefficient'])
                    
                    await monitoring_msg.edit_text(
                        f"‚úÖ <b>–ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç!</b>\n\n"
                        f"üìÖ –î–∞—Ç–∞: {best_slot['date']}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {best_slot['time']}\n"
                        f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{best_slot['coefficient']}\n\n"
                        f"‚è≥ –ë—Ä–æ–Ω–∏—Ä—É—é...",
                        parse_mode="HTML"
                    )
                    
                    # –ë—Ä–æ–Ω–∏—Ä—É–µ–º
                    from app.services.wb_booking import WBBookingService
                    booking_service = WBBookingService()
                    
                    result = await booking_service.book_existing_supply(
                        api_key=local_api_keys[user_id][0],
                        supply_id=supply_id,
                        date=best_slot['date']
                    )
                    
                    if result.get('success'):
                        await monitoring_msg.edit_text(
                            f"üéâ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                            f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
                            f"üìÖ –î–∞—Ç–∞: {best_slot['date']}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {best_slot['time']}\n"
                            f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{best_slot['coefficient']}\n"
                            f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
                            f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="book_existing_supply")],
                                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                            ])
                        )
                    else:
                        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        await monitoring_msg.edit_text(
                            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</b>\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                            parse_mode="HTML",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"select_supply:{supply_id}")],
                                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
                            ])
                        )
                    
                    await state.clear()
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if attempts % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫
                    await monitoring_msg.edit_text(
                        f"üîç <b>–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
                        f"‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n"
                        f"üìä –°–ª–æ—Ç–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(filtered_slots)}\n\n"
                        f"<i>–ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...</i>",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="stop_auto_search")]
                        ])
                    )
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)
            
            # –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await monitoring_msg.edit_text(
                f"‚è± <b>–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"–ó–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ {start_date} - {end_date}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data=f"auto_period:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="book_existing_supply")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error in auto search: {e}")
        await monitoring_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
            ])
        )
    
    await state.clear()


@router.callback_query(F.data == "stop_auto_search")
async def stop_auto_search(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞."""
    await state.clear()
    
    await callback.message.edit_text(
        "‚èπ <b>–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="book_existing_supply")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )


@router.callback_query(F.data.startswith("book_supply_date:"))
async def book_supply_on_date(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    selected_date = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    data = await state.get_data()
    supply_id = data.get('selected_supply_id')
    warehouse_id = data.get('warehouse_id')
    supply_details = data.get('supply_details', {})
    
    if not supply_id or not warehouse_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_msg = await callback.message.edit_text(
        f"‚è≥ <b>–ë—Ä–æ–Ω–∏—Ä—É—é –ø–æ—Å—Ç–∞–≤–∫—É...</b>\n\n"
        f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: #{supply_id}\n"
        f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
        f"üì¶ –°–∫–ª–∞–¥: {supply_details.get('warehouseName', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}",
        parse_mode="HTML"
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        success, message = await booking_service.book_existing_supply(
            user_id=user_id,
            supply_id=supply_id,
            warehouse_id=warehouse_id,
            supply_date=selected_date
        )
        
        if success:
            # –£—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
            await booking_msg.edit_text(
                message,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –î—Ä—É–≥–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞", callback_data="book_existing_supply")],
                    [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
            await callback.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
            
        else:
            # –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await booking_msg.edit_text(
                message,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"select_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
                ])
            )
            
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
    
    except Exception as e:
        print(f"Error booking supply: {e}")
        await booking_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_existing_supply")]
            ])
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
