"""
General callback handlers for the bot.

This module contains handlers for various callback queries that don't
belong to specific modules like monitoring or API keys.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..keyboards.inline import MainMenuCallback, get_main_menu
from ..states import APIKeyStates

router = Router()

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ API –∫–ª—é—á–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
user_api_keys = {}  # user_id: [list of api keys]


def has_api_keys(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API –∫–ª—é—á–∏."""
    return user_id in user_api_keys and len(user_api_keys[user_id]) > 0


def add_api_key(user_id: int, api_key: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if user_id not in user_api_keys:
        user_api_keys[user_id] = []
    
    if len(user_api_keys[user_id]) >= 5:
        return False  # –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
    
    user_api_keys[user_id].append(api_key)
    return True


def get_user_keys_count(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return len(user_api_keys.get(user_id, []))


def create_blocked_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ API –∫–ª—é—á–µ–π."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key")],
        [InlineKeyboardButton(text="‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á?", callback_data="help_api_key")]
    ])


@router.callback_query(MainMenuCallback.filter(F.action == "api_keys"))
async def show_api_keys_menu(callback: CallbackQuery):
    """Show API keys main menu."""
    try:
        user_id = callback.from_user.id
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="list_api_keys")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        keys_count = get_user_keys_count(user_id)
        
        api_keys_text = (
            f"üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {keys_count}/5 –∫–ª—é—á–µ–π\n\n"
            f"API –∫–ª—é—á–∏ Wildberries –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ—Å—Ç–∞–≤–æ–∫.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 5 –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.\n\n"
            f"üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –í—Å–µ –∫–ª—é—á–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(
            api_keys_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(MainMenuCallback.filter(F.action == "monitoring"))
async def show_monitoring_menu(callback: CallbackQuery):
    """Show monitoring menu - —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏."""
    user_id = callback.from_user.id
    
    if not has_api_keys(user_id):
        await callback.message.edit_text(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á Wildberries.\n\n"
            "üîë –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            parse_mode="HTML",
            reply_markup=create_blocked_menu()
        )
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á!", show_alert=True)
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    from .monitoring_simple import show_monitoring_options
    await show_monitoring_options(callback)


@router.callback_query(MainMenuCallback.filter(F.action == "settings"))
async def show_settings_menu(callback: CallbackQuery):
    """Show settings menu - —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏."""
    user_id = callback.from_user.id
    
    if not has_api_keys(user_id):
        await callback.message.edit_text(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "‚ùå –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á Wildberries.\n\n"
            "üîë –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
            parse_mode="HTML",
            reply_markup=create_blocked_menu()
        )
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á!", show_alert=True)
        return
    
    await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(MainMenuCallback.filter(F.action == "stats"))
async def show_stats_menu(callback: CallbackQuery):
    """Show stats menu - —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏."""
    user_id = callback.from_user.id
    
    if not has_api_keys(user_id):
        await callback.message.edit_text(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞.\n\n"
            "üîë –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            parse_mode="HTML",
            reply_markup=create_blocked_menu()
        )
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á!", show_alert=True)
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    from .monitoring_simple import user_monitoring_tasks
    
    keys_count = get_user_keys_count(user_id)
    monitoring_count = len(user_monitoring_tasks.get(user_id, []))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    stats_text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üîë <b>API –∫–ª—é—á–µ–π:</b> {keys_count}/5\n"
        f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤:</b> {monitoring_count}\n"
        f"üéØ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "üìà <b>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: 0\n"
        "‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: 0\n"
        "‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: 0\n"
        "‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%\n\n"
        "üí° <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    )
    
    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(MainMenuCallback.filter(F.action == "help"))
async def show_help_menu(callback: CallbackQuery):
    """Show help menu - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    help_text = (
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
        "üîë <b>–®–∞–≥ 1: API –∫–ª—é—á–∏</b>\n"
        "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ Wildberries –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ—Å—Ç–∞–≤–æ–∫.\n\n"
        "üìä <b>–®–∞–≥ 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.\n\n"
        "ü§ñ <b>–®–∞–≥ 3: –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏.\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b> –ë–µ–∑ API –∫–ª—é—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!"
    )
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π
@router.callback_query(F.data == "add_api_key")
async def start_add_api_key(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞."""
    user_id = callback.from_user.id
    
    if get_user_keys_count(user_id) >= 5:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (–º–∞–∫—Å–∏–º—É–º 5)", show_alert=True)
        return
    
    await state.set_state(APIKeyStates.waiting_for_api_key)
    
    instruction_text = (
        "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Wildberries –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
        "üí° <b>–ì–¥–µ –Ω–∞–π—Ç–∏ API –∫–ª—é—á:</b>\n"
        "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ö–ª—é—á –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        instruction_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(APIKeyStates.waiting_for_api_key)
async def handle_api_key_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞."""
    current_state = await state.get_state()
    print(f"DEBUG: Current state = {current_state}")
    print(f"DEBUG: Expected state = {APIKeyStates.waiting_for_api_key}")
    print(f"DEBUG: Message text = {message.text[:50]}...")
    
    if current_state == APIKeyStates.waiting_for_api_key:
        user_id = message.from_user.id
        api_key = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
        if len(api_key) < 10:
            await message.answer(
                "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ey)
        if not api_key.startswith('ey'):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. API –∫–ª—é—á Wildberries –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'ey'.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ WB API
        if add_api_key(user_id, api_key):
            await state.clear()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–ª—é—á", callback_data="add_api_key")]
            ])
            
            await message.answer(
                f"‚úÖ <b>API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {get_user_keys_count(user_id)}/5\n\n"
                f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n\n"
                f"üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'.",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (–º–∞–∫—Å–∏–º—É–º 5)")


@router.callback_query(F.data == "list_api_keys")
async def list_user_api_keys(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    keys = user_api_keys.get(user_id, [])
    
    if not keys:
        await callback.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π", show_alert=True)
        return
    
    keys_text = "üìã <b>–í–∞—à–∏ API –∫–ª—é—á–∏:</b>\n\n"
    for i, key in enumerate(keys, 1):
        masked_key = f"{key[:8]}...{key[-4:]}" if len(key) > 12 else f"{key[:4]}..."
        keys_text += f"{i}. <code>{masked_key}</code>\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        keys_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "help_api_key")
async def show_api_key_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞."""
    help_text = (
        "üîë <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Wildberries:</b>\n\n"
        "1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ WB\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'</b>\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ <b>'–î–æ—Å—Ç—É–ø –∫ API'</b>\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω'</b>\n"
        "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞: <b>'–ü–æ—Å—Ç–∞–≤–∫–∏'</b>\n"
        "6Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n"
        "7Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–æ—Ç–∞\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤–∞—à API –∫–ª—é—á!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    await state.clear()
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Auto-Booking Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )