"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.
"""

import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ...services.browser_manager import browser_manager
from ...utils.logger import get_logger

logger = get_logger(__name__)
router = Router()


class BrowserBookingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    waiting_for_phone = State()
    waiting_for_sms_code = State()
    selecting_supply = State()
    selecting_dates = State()
    monitoring = State()


@router.callback_query(F.data == "browser_booking")
async def start_browser_booking(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = callback.from_user.id
    
    text = (
        "üåê <b>–ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WB –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤.\n\n"
        "‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b>\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WB\n"
        "‚Ä¢ –°–ú–° –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        "üîí –ë—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä", callback_data="browser_start_headless")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto_booking")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "browser_stop")
async def browser_stop(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
    user_id = callback.from_user.id
    
    try:
        closed = await browser_manager.close_browser(user_id)
        
        if closed:
            await callback.message.edit_text(
                "‚úÖ <b>–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="browser_booking")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
                ])
            )
        else:
            await callback.message.edit_text(
                "‚ÑπÔ∏è <b>–ë—Ä–∞—É–∑–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
                "–í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–æ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ", callback_data="browser_booking")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error closing browser: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="browser_stop")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
            ])
        )
    
    await callback.answer()


@router.callback_query(F.data == "browser_start_headless")
async def browser_start_mode_fixed(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""
    user_id = callback.from_user.id
    headless = True  # –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
    if browser_manager.is_browser_active():
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä", callback_data="browser_stop")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_booking")]
            ])
        )
        await callback.answer()
        return
    
    mode_text = "—Å–∫—Ä—ã—Ç–æ–º" if headless else "–≤–∏–¥–∏–º–æ–º"
    
    loading_msg = await callback.message.edit_text(
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –≤ {mode_text} —Ä–µ–∂–∏–º–µ...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
        
        if not browser:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
        try:
            should_skip = await browser.should_skip_login()
            if should_skip:
                await loading_msg.edit_text(
                    "‚úÖ <b>–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ WB!</b>\n\n"
                    "üéâ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–ª–æ—Ç—ã", callback_data="browser_find_slots")],
                        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="browser_my_supplies")],
                        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="browser_auto_monitor")],
                        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä", callback_data="browser_close")]
                    ])
                )
                await state.clear()
                return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        
        await loading_msg.edit_text(
            f"‚úÖ <b>–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ {mode_text} —Ä–µ–∂–∏–º–µ!</b>\n\n"
            "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WB:\n"
            "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ +996500441234)",
            parse_mode="HTML"
        )
        
        await state.set_state(BrowserBookingStates.waiting_for_phone)
        
    except Exception as e:
        logger.error(f"Error starting browser: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_booking")]
            ])
        )


@router.message(BrowserBookingStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    logger.info(f"üîç BROWSER: Processing phone from user {message.from_user.id}: {message.text}")
    user_id = message.from_user.id
    phone = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    if phone.startswith('/'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not phone.startswith("+") or len(phone) < 10:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567 –∏–ª–∏ +996500441234"
        )
        return
    
    browser = await browser_manager.get_browser(user_id)
    if not browser:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    loading_msg = await message.answer(
        "üì± –í–≤–æ–∂—É –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º—É WB...\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ..."
    )
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º—É WB
        success = await browser.login_step1_phone(phone)
        
        if success:
            await loading_msg.edit_text(
                f"‚úÖ <b>–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –≤ —Ñ–æ—Ä–º—É WB!</b>\n\n"
                f"üì± –ù–æ–º–µ—Ä: {phone[:4]}****{phone[-2:]}\n"
                f"üì® –°–ú–° –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
                f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:"
            )
            
            await state.update_data(phone=phone)
            await state.set_state(BrowserBookingStates.waiting_for_sms_code)
        else:
            await loading_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º—É WB.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
        
    except Exception as e:
        logger.error(f"Error during phone input: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.message(BrowserBookingStates.waiting_for_sms_code)
async def process_sms_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –°–ú–° –∫–æ–¥–∞."""
    user_id = message.from_user.id
    code = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞
    if code.startswith('/'):
        return
    
    browser = await browser_manager.get_browser(user_id)
    if not browser:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –°–ú–° –∫–æ–¥–∞
    if not code.isdigit() or len(code) < 4 or len(code) > 6:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ 4-6 —Ü–∏—Ñ—Ä –∏–∑ –°–ú–°."
        )
        return
    
    loading_msg = await message.answer(
        "üîê –í–≤–æ–∂—É –°–ú–° –∫–æ–¥ –≤ —Ñ–æ—Ä–º—É WB...\n"
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ö–æ–¥..."
    )
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º –°–ú–° –∫–æ–¥ –≤ —Ñ–æ—Ä–º—É WB
        result = await browser.login_step2_sms(code)
        
        if result == "email_required":
            await loading_msg.edit_text(
                "üìß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ email</b>\n\n"
                "WB —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n\n"
                "üìã <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n"
                "2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –ø–∏—Å—å–º–æ –æ—Ç Wildberries\n"
                "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –ø–∏—Å—å–º–µ\n"
                "4Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
                "‚ö†Ô∏è –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="browser_start")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="browser_close")]
                ])
            )
            await state.clear()
        elif result:
            await loading_msg.edit_text(
                "‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ WB!</b>\n\n"
                "üéâ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–ª–æ—Ç—ã", callback_data="browser_find_slots")],
                    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="browser_my_supplies")],
                    [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="browser_auto_monitor")],
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä", callback_data="browser_close")]
                ])
            )
            await state.clear()
        else:
            await loading_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞</b>\n\n"
                "–ù–µ–≤–µ—Ä–Ω—ã–π –°–ú–° –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º WB.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
    
    except Exception as e:
        logger.error(f"Error during SMS code input: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –°–ú–° –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.callback_query(F.data == "browser_find_slots")
async def browser_find_slots(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    user_id = callback.from_user.id
    browser = await browser_manager.get_browser(user_id)
    
    if not browser:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    loading_msg = await callback.message.edit_text(
        "üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    try:
        slots = await browser.find_available_slots()
        
        if slots:
            text = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}</b>\n\n"
            
            for i, slot in enumerate(slots[:10], 1):
                text += f"{i}. üìÖ {slot['date']} - –ö–æ—ç—Ñ: x{slot['coefficient']}\n"
            
            if len(slots) > 10:
                text += f"\n... –∏ –µ—â–µ {len(slots) - 10} —Å–ª–æ—Ç–æ–≤"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="browser_book_slot")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="browser_find_slots")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
            ])
            
            await loading_msg.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await loading_msg.edit_text(
                "üòî –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="browser_find_slots")],
                    [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="browser_auto_monitor")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error finding slots: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
            ])
        )


@router.callback_query(F.data == "browser_auto_monitor")
async def browser_auto_monitor(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_id = callback.from_user.id
    browser = await browser_manager.get_browser(user_id)
    
    if not browser:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = (
        "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å "
        "–ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π.\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="browser_select_period")],
        [InlineKeyboardButton(text="üìä –ú–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data="browser_select_coef")],
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="browser_start_monitor")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "browser_close")
async def browser_close(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
    user_id = callback.from_user.id
    try:
        await browser_manager.close_browser(user_id)
    except Exception as e:
        logger.error(f"Error closing browser: {e}")
        
    await callback.message.edit_text(
        "‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )


@router.callback_query(F.data == "browser_my_supplies")
async def browser_my_supplies(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    user_id = callback.from_user.id
    browser = await browser_manager.get_browser(user_id)
    
    if not browser:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    loading_msg = await callback.message.edit_text(
        "üì¶ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–æ—Å—Ç–∞–≤–∫–∏...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫
        await browser.navigate_to_supplies_page()
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        supplies = await browser.get_my_supplies()
        
        if supplies:
            text = f"üì¶ <b>–í–∞—à–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ ({len(supplies)} —à—Ç):</b>\n\n"
            
            for i, supply in enumerate(supplies[:10], 1):
                status = supply.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                date = supply.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                text += f"{i}. üÜî #{supply.get('id', 'N/A')} - {status}\n"
                text += f"   üìÖ –î–∞—Ç–∞: {date}\n\n"
            
            if len(supplies) > 10:
                text += f"... –∏ –µ—â–µ {len(supplies) - 10} –ø–æ—Å—Ç–∞–≤–æ–∫"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="browser_my_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
            ])
            
            await loading_msg.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await loading_msg.edit_text(
                "üòî –ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="browser_my_supplies")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error getting supplies: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="browser_my_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="browser_menu")]
            ])
        )
