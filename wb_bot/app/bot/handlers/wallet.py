"""
Wallet and payment handlers for the Telegram bot.

Handles personal cabinet, balance management, payments and transaction history.
"""

import re
from datetime import datetime
from typing import Any, Dict, List

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
)

from ...services.payment_service import payment_service
from ...utils.logger import get_logger

logger = get_logger(__name__)

# Create router
router = Router()


class WalletStates(StatesGroup):
    """States for wallet operations."""
    entering_amount = State()
    confirming_payment = State()


def format_balance_text(balance_info: Dict[str, Any]) -> str:
    """Format balance information text."""
    return (
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {balance_info['balance']:.2f} ‚ÇΩ</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {balance_info['total_deposited']:.2f} ‚ÇΩ\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {balance_info['total_spent']:.2f} ‚ÇΩ\n"
        f"‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {balance_info['bookings_count']} —à—Ç.\n\n"
        f"üí° <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        f"‚Ä¢ –û–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: 10 ‚ÇΩ\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 500 ‚ÇΩ\n\n"
        f"{'‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' if balance_info['can_afford_booking'] else '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'}"
    )


def get_wallet_keyboard() -> InlineKeyboardMarkup:
    """Get wallet main keyboard."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="wallet_deposit")],
        [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="wallet_history")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="wallet_refresh")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def get_deposit_amounts_keyboard() -> InlineKeyboardMarkup:
    """Get deposit amounts keyboard."""
    amounts = [500, 1000, 2000, 5000, 10000]
    buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å—É–º–º–∞–º–∏ –ø–æ 2 –≤ —Ä—è–¥—É
    for i in range(0, len(amounts), 2):
        row = []
        for j in range(2):
            if i + j < len(amounts):
                amount = amounts[i + j]
                row.append(InlineKeyboardButton(
                    text=f"{amount} ‚ÇΩ",
                    callback_data=f"deposit_amount:{amount}"
                ))
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–∞—è —Å—É–º–º–∞"
    buttons.append([InlineKeyboardButton(text="üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="deposit_custom")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("wallet", "balance"))
async def wallet_command(message: Message):
    """Handle wallet command."""
    from ...config import get_settings
    settings = get_settings()
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not settings.payment.payment_enabled:
        await message.answer(
            "üí∞ <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
            "–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        balance_info = await payment_service.get_user_balance_info(user_id)
        
        text = format_balance_text(balance_info)
        keyboard = get_wallet_keyboard()
        
        await loading_msg.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing wallet for user {user_id}: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="wallet_main")]
            ])
        )


@router.callback_query(F.data == "wallet_main")
async def wallet_main_callback(callback: CallbackQuery):
    """Handle wallet main callback."""
    from ...config import get_settings
    settings = get_settings()
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not settings.payment.payment_enabled:
        await callback.message.edit_text(
            "üí∞ <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
            "–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        balance_info = await payment_service.get_user_balance_info(user_id)
        
        text = format_balance_text(balance_info)
        keyboard = get_wallet_keyboard()
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing wallet for user {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)


@router.callback_query(F.data == "wallet_refresh")
async def wallet_refresh_callback(callback: CallbackQuery):
    """Handle wallet refresh callback."""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    await wallet_main_callback(callback)


@router.callback_query(F.data == "wallet_deposit")
async def wallet_deposit_callback(callback: CallbackQuery):
    """Handle wallet deposit callback."""
    text = (
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:\n\n"
        "üí° <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 500 ‚ÇΩ\n"
        "üí° <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 50 000 ‚ÇΩ\n\n"
        "‚ö° –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    )
    
    keyboard = get_deposit_amounts_keyboard()
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("deposit_amount:"))
async def deposit_amount_callback(callback: CallbackQuery, state: FSMContext):
    """Handle deposit amount selection."""
    amount = int(callback.data.split(":")[1])
    await process_deposit_amount(callback, state, amount)


@router.callback_query(F.data == "deposit_custom")
async def deposit_custom_callback(callback: CallbackQuery, state: FSMContext):
    """Handle custom deposit amount."""
    text = (
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 500 –¥–æ 50 000 —Ä—É–±–ª–µ–π:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1000</code>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(WalletStates.entering_amount)
    await callback.answer()


@router.message(WalletStates.entering_amount)
async def handle_custom_amount(message: Message, state: FSMContext):
    """Handle custom amount input."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        amount_text = re.sub(r'[^\d]', '', message.text)
        if not amount_text:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 500 –¥–æ 50 000:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
                ])
            )
            return
        
        amount = int(amount_text)
        
        if amount < 500:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 500 ‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
                ])
            )
            return
        
        if amount > 50000:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 50 000 ‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
            
            async def answer(self, text="", show_alert=False):
                pass
        
        fake_callback = FakeCallback(message)
        await process_deposit_amount(fake_callback, state, amount)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 500 –¥–æ 50 000:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
            ])
        )


async def process_deposit_amount(callback: CallbackQuery, state: FSMContext, amount: int):
    """Process deposit amount and create payment."""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = (
        f"üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
        f"üí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ÆKassa\n"
        f"‚ö° –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"confirm_payment:{amount}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_deposit")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data.startswith("confirm_payment:"))
async def confirm_payment_callback(callback: CallbackQuery):
    """Handle payment confirmation."""
    amount = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await callback.message.edit_text(
        "‚è≥ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã...",
        parse_mode="HTML"
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success, payment, error = await payment_service.create_payment(
            user_id=user_id,
            amount=float(amount),
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –Ω–∞ {amount} ‚ÇΩ"
        )
        
        if success and payment:
            text = (
                f"üí≥ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                f"üí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
                f"üÜî –ü–ª–∞—Ç–µ–∂: <code>{payment.yookassa_payment_id}</code>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation_url)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{payment.yookassa_payment_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n{error}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="wallet_deposit")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
                ])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error creating payment for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
            ])
        )
        await callback.answer()


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment_callback(callback: CallbackQuery):
    """Handle payment status check."""
    payment_id = callback.data.split(":")[1]
    
    await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        success, status, error = await payment_service.check_payment_status(payment_id)
        
        if success and status:
            if status.value == "succeeded":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                processed, process_error = await payment_service.process_successful_payment(payment_id)
                
                if processed:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    balance_info = await payment_service.get_user_balance_info(callback.from_user.id)
                    
                    text = (
                        f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance_info['balance']:.2f} ‚ÇΩ</b>\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí∞ –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")],
                        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                    
                    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                    
                else:
                    await callback.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {process_error}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
                        ])
                    )
                    
            elif status.value == "pending":
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
                
            elif status.value == "canceled":
                await callback.message.edit_text(
                    "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="wallet_deposit")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
                    ])
                )
                
            else:
                await callback.answer(f"‚ùå {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}", show_alert=True)
        else:
            await callback.answer(f"‚ùå {error or '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'}", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error checking payment {payment_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data == "wallet_history")
async def wallet_history_callback(callback: CallbackQuery):
    """Handle wallet history callback."""
    user_id = callback.from_user.id
    
    await callback.answer("üìã –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = await payment_service.get_user_transactions(user_id, limit=10)
        
        if not transactions:
            text = (
                "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"
                "üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
            )
        else:
            text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
            
            for tx in transactions:
                date = datetime.fromisoformat(tx['created_at'].replace('Z', '+00:00'))
                date_str = date.strftime("%d.%m.%Y %H:%M")
                
                if tx['amount'] > 0:
                    emoji = "üí∞"
                    amount_str = f"+{tx['amount']:.2f} ‚ÇΩ"
                else:
                    emoji = "üí∏"
                    amount_str = f"{tx['amount']:.2f} ‚ÇΩ"
                
                text += f"{emoji} <b>{amount_str}</b>\n"
                text += f"üìù {tx['description']}\n"
                text += f"üìÖ {date_str}\n"
                text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {tx['balance_after']:.2f} ‚ÇΩ\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="wallet_history")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing wallet history for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –±–∞–ª–∞–Ω—Å—É", callback_data="wallet_main")]
            ])
        )


# Export router
__all__ = ["router"]
