"""
Monitoring management handlers.

This module contains handlers for creating, managing, and configuring
monitoring tasks for warehouse slots.
"""

from datetime import date
from typing import Optional, Tuple

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_

from ...database import get_session, User, MonitoringTask
from ...database.models import SupplyType, DeliveryType, MonitoringMode
from ...services.auth import auth_service
from ...utils.logger import UserLogger
from ..keyboards.inline import (
    MonitoringCallback, get_monitoring_menu, get_monitoring_list_keyboard,
    get_monitoring_task_keyboard, get_supply_type_keyboard, get_delivery_type_keyboard,
    get_monitoring_mode_keyboard, get_coefficient_keyboard, get_check_interval_keyboard,
    get_confirmation_keyboard, SettingsCallback
)
from ..keyboards.calendar import (
    get_date_range_calendar, handle_calendar_callback, CalendarCallback
)
from ..states import MonitoringStates

router = Router()


@router.callback_query(MonitoringCallback.filter(F.action == "create"))
async def start_create_monitoring(callback: CallbackQuery, state: FSMContext):
    """Start creating new monitoring task."""
    user_id = callback.from_user.id
    user_logger = UserLogger(user_id)
    
    # Check if user has API keys
    api_keys = await auth_service.get_user_api_keys(user_id)
    if not api_keys:
        await callback.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ 'API –∫–ª—é—á–∏'",
            show_alert=True
        )
        return
    
    # Check if user can create monitoring (trial or premium)
    async with get_session() as session:
        query = select(User).where(User.id == user_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if not user or not user.can_use_auto_booking():
            await callback.answer(
                "‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞",
                show_alert=True
            )
            return
    
    # Initialize monitoring creation
    await state.set_data({
        'supply_type': user.default_supply_type,
        'delivery_type': user.default_delivery_type,
        'monitoring_mode': user.default_monitoring_mode,
        'max_coefficient': user.default_max_coefficient,
        'check_interval': user.default_check_interval
    })
    
    step_text = (
        "üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        "–®–∞–≥ 1/6: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    
    await callback.message.edit_text(step_text, parse_mode="HTML")
    await state.set_state(MonitoringStates.waiting_for_warehouse_selection)
    await callback.answer()


@router.message(StateFilter(MonitoringStates.waiting_for_warehouse_selection))
async def handle_warehouse_selection(message: Message, state: FSMContext):
    """Handle warehouse selection."""
    warehouse_input = message.text.strip()
    
    # Try to parse as ID first
    try:
        warehouse_id = int(warehouse_input)
        warehouse_name = f"–°–∫–ª–∞–¥ {warehouse_id}"  # Default name
    except ValueError:
        # Search by name (simplified - in real implementation would search via API)
        warehouse_name = warehouse_input
        warehouse_id = 1  # Placeholder - would be resolved via API
    
    # Save warehouse info
    await state.update_data(
        warehouse_id=warehouse_id,
        warehouse_name=warehouse_name
    )
    
    # Move to date selection
    step_text = (
        f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"–®–∞–≥ 2/6: –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    )
    
    await message.answer(
        step_text,
        parse_mode="HTML",
        reply_markup=get_date_range_calendar(message.from_user.id)
    )
    await state.set_state(MonitoringStates.waiting_for_date_range)


@router.callback_query(
    CalendarCallback.filter(),
    StateFilter(MonitoringStates.waiting_for_date_range)
)
async def handle_date_selection(
    callback: CallbackQuery,
    callback_data: CalendarCallback,
    state: FSMContext
):
    """Handle date range selection."""
    user_id = callback.from_user.id
    
    result_text, new_keyboard, selected_dates = handle_calendar_callback(
        user_id, callback_data
    )
    
    if new_keyboard:
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    
    if selected_dates:
        start_date, end_date = selected_dates
        await state.update_data(date_from=start_date, date_to=end_date)
        
        # Move to supply type selection
        data = await state.get_data()
        
        step_text = (
            f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
            f"–®–∞–≥ 3/6: –¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏\n\n"
            f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']}\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:"
        )
        
        await callback.message.edit_text(
            step_text,
            parse_mode="HTML",
            reply_markup=get_supply_type_keyboard()
        )
        await state.set_state(MonitoringStates.waiting_for_supply_type)
    
    await callback.answer(result_text if not new_keyboard else "")


@router.callback_query(
    SettingsCallback.filter(F.action == "supply_type"),
    StateFilter(MonitoringStates.waiting_for_supply_type)
)
async def handle_supply_type_selection(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    state: FSMContext
):
    """Handle supply type selection."""
    supply_type = callback_data.value
    await state.update_data(supply_type=supply_type)
    
    data = await state.get_data()
    
    supply_type_text = "üì¶ –ö–æ—Ä–æ–±" if supply_type == "box" else "üèó –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞"
    
    step_text = (
        f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"–®–∞–≥ 4/6: –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {data['date_from'].strftime('%d.%m.%Y')} - {data['date_to'].strftime('%d.%m.%Y')}\n"
        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {supply_type_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    
    await callback.message.edit_text(
        step_text,
        parse_mode="HTML",
        reply_markup=get_delivery_type_keyboard()
    )
    await state.set_state(MonitoringStates.waiting_for_delivery_type)
    await callback.answer()


@router.callback_query(
    SettingsCallback.filter(F.action == "delivery_type"),
    StateFilter(MonitoringStates.waiting_for_delivery_type)
)
async def handle_delivery_type_selection(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    state: FSMContext
):
    """Handle delivery type selection."""
    delivery_type = callback_data.value
    await state.update_data(delivery_type=delivery_type)
    
    data = await state.get_data()
    
    delivery_type_text = "üöö –ü—Ä—è–º–∞—è" if delivery_type == "direct" else "üîÑ –¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è"
    supply_type_text = "üì¶ –ö–æ—Ä–æ–±" if data['supply_type'] == "box" else "üèó –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞"
    
    step_text = (
        f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"–®–∞–≥ 5/6: –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {data['date_from'].strftime('%d.%m.%Y')} - {data['date_to'].strftime('%d.%m.%Y')}\n"
        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {supply_type_text}\n"
        f"üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    )
    
    await callback.message.edit_text(
        step_text,
        parse_mode="HTML",
        reply_markup=get_monitoring_mode_keyboard()
    )
    await state.set_state(MonitoringStates.waiting_for_monitoring_mode)
    await callback.answer()


@router.callback_query(
    SettingsCallback.filter(F.action == "mode"),
    StateFilter(MonitoringStates.waiting_for_monitoring_mode)
)
async def handle_monitoring_mode_selection(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    state: FSMContext
):
    """Handle monitoring mode selection."""
    monitoring_mode = callback_data.value
    await state.update_data(monitoring_mode=monitoring_mode)
    
    data = await state.get_data()
    
    mode_text = "üîî –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if monitoring_mode == "notification" else "ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    delivery_type_text = "üöö –ü—Ä—è–º–∞—è" if data['delivery_type'] == "direct" else "üîÑ –¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è"
    supply_type_text = "üì¶ –ö–æ—Ä–æ–±" if data['supply_type'] == "box" else "üèó –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞"
    
    step_text = (
        f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"–®–∞–≥ 6/6: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {data['date_from'].strftime('%d.%m.%Y')} - {data['date_to'].strftime('%d.%m.%Y')}\n"
        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {supply_type_text}\n"
        f"üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type_text}\n"
        f"ü§ñ <b>–†–µ–∂–∏–º:</b> {mode_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏:"
    )
    
    await callback.message.edit_text(
        step_text,
        parse_mode="HTML",
        reply_markup=get_coefficient_keyboard()
    )
    await state.set_state(MonitoringStates.waiting_for_max_coefficient)
    await callback.answer()


@router.callback_query(
    SettingsCallback.filter(F.action == "coefficient"),
    StateFilter(MonitoringStates.waiting_for_max_coefficient)
)
async def handle_coefficient_selection(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    state: FSMContext
):
    """Handle coefficient selection."""
    max_coefficient = float(callback_data.value)
    await state.update_data(max_coefficient=max_coefficient)
    
    data = await state.get_data()
    
    mode_text = "üîî –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if data['monitoring_mode'] == "notification" else "ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    delivery_type_text = "üöö –ü—Ä—è–º–∞—è" if data['delivery_type'] == "direct" else "üîÑ –¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è"
    supply_type_text = "üì¶ –ö–æ—Ä–æ–±" if data['supply_type'] == "box" else "üèó –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞"
    
    # Show final confirmation
    confirmation_text = (
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']} (ID: {data['warehouse_id']})\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {data['date_from'].strftime('%d.%m.%Y')} - {data['date_to'].strftime('%d.%m.%Y')}\n"
        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {supply_type_text}\n"
        f"üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type_text}\n"
        f"ü§ñ <b>–†–µ–∂–∏–º:</b> {mode_text}\n"
        f"üìä <b>–ú–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {max_coefficient}x\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {data['check_interval']} —Å–µ–∫\n\n"
        "–°–æ–∑–¥–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥?"
    )
    
    await callback.message.edit_text(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard("create_monitoring")
    )
    await state.set_state(MonitoringStates.waiting_for_confirmation)
    await callback.answer()


@router.callback_query(
    F.data == "confirm_create_monitoring_0",
    StateFilter(MonitoringStates.waiting_for_confirmation)
)
async def create_monitoring_task(callback: CallbackQuery, state: FSMContext):
    """Create the monitoring task."""
    data = await state.get_data()
    user_id = callback.from_user.id
    user_logger = UserLogger(user_id)
    
    try:
        async with get_session() as session:
            # Create monitoring task
            monitoring_task = MonitoringTask(
                user_id=user_id,
                warehouse_id=data['warehouse_id'],
                warehouse_name=data['warehouse_name'],
                date_from=data['date_from'],
                date_to=data['date_to'],
                supply_type=data['supply_type'],
                delivery_type=data['delivery_type'],
                monitoring_mode=data['monitoring_mode'],
                max_coefficient=data['max_coefficient'],
                check_interval=data['check_interval'],
                is_active=True
            )
            
            session.add(monitoring_task)
            await session.commit()
            
            user_logger.info(f"Created monitoring task {monitoring_task.id}")
            
            success_text = (
                f"üéâ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {monitoring_task.id}\n"
                f"üì¶ <b>–°–∫–ª–∞–¥:</b> {data['warehouse_name']}\n"
                f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {data['date_from'].strftime('%d.%m.%Y')} - {data['date_to'].strftime('%d.%m.%Y')}\n\n"
                f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω!\n"
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö."
            )
            
            await callback.message.edit_text(
                success_text,
                parse_mode="HTML",
                reply_markup=get_monitoring_menu()
            )
            
    except Exception as e:
        user_logger.error(f"Failed to create monitoring task: {e}")
        
        error_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        
        await callback.message.edit_text(
            error_text,
            parse_mode="HTML",
            reply_markup=get_monitoring_menu()
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(MonitoringCallback.filter(F.action == "list"))
async def list_monitoring_tasks(callback: CallbackQuery):
    """Show list of user's monitoring tasks."""
    user_id = callback.from_user.id
    
    async with get_session() as session:
        query = select(MonitoringTask).where(
            MonitoringTask.user_id == user_id
        ).order_by(MonitoringTask.created_at.desc())
        
        result = await session.execute(query)
        tasks = result.scalars().all()
    
    if not tasks:
        no_tasks_text = (
            "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        
        await callback.message.edit_text(
            no_tasks_text,
            parse_mode="HTML",
            reply_markup=get_monitoring_menu()
        )
        await callback.answer()
        return
    
    tasks_text = (
        f"üìä <b>–í–∞—à–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ ({len(tasks)})</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        tasks_text,
        parse_mode="HTML",
        reply_markup=get_monitoring_list_keyboard(tasks)
    )
    await callback.answer()


@router.callback_query(MonitoringCallback.filter(F.action == "edit"))
async def show_monitoring_task(callback: CallbackQuery, callback_data: MonitoringCallback):
    """Show specific monitoring task details."""
    user_id = callback.from_user.id
    task_id = callback_data.task_id
    
    async with get_session() as session:
        query = select(MonitoringTask).where(
            and_(
                MonitoringTask.id == task_id,
                MonitoringTask.user_id == user_id
            )
        )
        result = await session.execute(query)
        task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_emoji = "üü¢" if task.is_active and not task.is_paused else "üî¥" if task.is_paused else "‚ö™"
    mode_text = "ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" if task.monitoring_mode == "auto_booking" else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    supply_type_text = "üì¶ –ö–æ—Ä–æ–±" if task.supply_type == "box" else "üèó –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞"
    delivery_type_text = "üöö –ü—Ä—è–º–∞—è" if task.delivery_type == "direct" else "üîÑ –¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è"
    
    last_check = task.last_check.strftime('%d.%m.%Y %H:%M') if task.last_check else "–ù–∏–∫–æ–≥–¥–∞"
    
    task_info_text = (
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{task.id}</b>\n\n"
        f"üì¶ <b>–°–∫–ª–∞–¥:</b> {task.warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {task.date_from.strftime('%d.%m.%Y')} - {task.date_to.strftime('%d.%m.%Y')}\n"
        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {supply_type_text}\n"
        f"üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type_text}\n"
        f"ü§ñ <b>–†–µ–∂–∏–º:</b> {mode_text}\n"
        f"üìä <b>–ú–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {task.max_coefficient}x\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {task.check_interval} —Å–µ–∫\n\n"
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä–æ–∫: {task.total_checks}\n"
        f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {task.slots_found}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–µ–π: {task.successful_bookings}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –±—Ä–æ–Ω–µ–π: {task.failed_bookings}\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if task.is_active and not task.is_paused else '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if task.is_paused else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_check}"
    )
    
    await callback.message.edit_text(
        task_info_text,
        parse_mode="HTML",
        reply_markup=get_monitoring_task_keyboard(task)
    )
    await callback.answer()


@router.callback_query(MonitoringCallback.filter(F.action.in_(["pause", "resume"])))
async def toggle_monitoring_task(callback: CallbackQuery, callback_data: MonitoringCallback):
    """Pause or resume monitoring task."""
    user_id = callback.from_user.id
    task_id = callback_data.task_id
    action = callback_data.action
    
    user_logger = UserLogger(user_id)
    
    # Import monitoring service here to avoid circular imports
    from ...services.monitoring import monitoring_service
    
    if action == "pause":
        await monitoring_service.pause_task(task_id)
        user_logger.info(f"Paused monitoring task {task_id}")
        message = "‚è∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else:
        await monitoring_service.resume_task(task_id)
        user_logger.info(f"Resumed monitoring task {task_id}")
        message = "‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω"
    
    await callback.answer(message)
    
    # Refresh the task view
    await show_monitoring_task(callback, callback_data)


@router.callback_query(MonitoringCallback.filter(F.action == "back"))
async def back_to_monitoring_menu(callback: CallbackQuery):
    """Return to monitoring main menu."""
    await callback.message.edit_text(
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_monitoring_menu()
    )
    await callback.answer()
