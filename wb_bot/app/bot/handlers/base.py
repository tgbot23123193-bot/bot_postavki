"""
Base command handlers for the bot.

This module contains handlers for basic commands like /start, /help,
and main menu navigation.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from ..keyboards.inline import get_main_menu, MainMenuCallback
from ...services.database_service import db_service
from ...utils.logger import get_logger

logger = get_logger(__name__)

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command."""
    user_id = message.from_user.id
    logger.info(f"üöÄ START command from user {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info(f"üìù Creating/updating user {user_id}")
        await db_service.get_or_create_user(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )
        logger.info(f"‚úÖ User {user_id} created/updated")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üîç Getting API keys for user {user_id}")
        api_keys = await db_service.get_user_api_keys(user_id)
        has_api_keys_db = len(api_keys) > 0
        logger.info(f"üîë Found {len(api_keys)} API keys for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to create/update user {user_id}: {e}")
        import traceback
        logger.error(f"üìç Traceback: {traceback.format_exc()}")
        has_api_keys_db = False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–ª—é—á–µ–π –Ω–µ—Ç
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API –∫–ª—é—á–∏
    logger.info(f"üîç Checking has_api_keys_db for user {user_id}: {has_api_keys_db}")
    if has_api_keys_db:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å API –∫–ª—é—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info(f"‚úÖ Showing MAIN MENU to user {user_id} (has API keys)")
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã"
        menu_text = (
            f"{greeting}\n\n"
            "ü§ñ <b>WB Auto-Booking Bot</b> –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
            "‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.answer(
            menu_text,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        logger.info(f"üì§ MAIN MENU sent to user {user_id}")
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç API –∫–ª—é—á–µ–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        logger.info(f"‚ùå Showing ADD API KEY menu to user {user_id} (no API keys)")
        welcome_text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Auto-Booking Bot!</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫\n"
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã\n"
            "üì± –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö\n"
            "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫\n\n"
            "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–π–º–∞–°–¢–í–∫–∏\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Wildberries:"
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key")],
            [InlineKeyboardButton(text="‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á?", callback_data="help_api_key")]
        ])
        
        await message.answer(welcome_text, parse_mode="HTML", reply_markup=keyboard)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        
        "<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ Wildberries\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –ø—Ä–∏–µ–º–∫–∏\n"
        "‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ—Ä–æ–±/–º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞)\n"
        "‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä—è–º–∞—è/—Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è)\n\n"
        
        "<b>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
        "‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b> x1, x2, x3, x5 (—Ñ–∏–ª—å—Ç—Ä –¥–æ—Ä–æ–≥–∏—Ö —Å–ª–æ—Ç–æ–≤)\n"
        "‚Ä¢ <b>–†–µ–∂–∏–º—ã:</b> —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        
        "<b>üîë API –∫–ª—é—á–∏:</b>\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –∫–ª—é—á–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        "<b>üíé –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b>\n"
        "‚Ä¢ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–π–º–∞–°–°–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
        
        "<b>üì± –ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        
        "<b>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùì –ü–æ–º–æ—â—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_menu())


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """Handle /stats command."""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = await db_service.get_user_stats(user_id)
        
        if stats and stats.get('user'):
            user = stats['user']
            keys_count = stats.get('api_keys_count', 0)
            active_tasks = stats.get('active_tasks_count', 0)
            total_bookings = stats.get('total_bookings', 0)
            successful_bookings = stats.get('successful_bookings', 0)
            trial_left = stats.get('trial_bookings_left')
            
            # Calculate stats
            stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name}\n"
                f"üîë <b>API –∫–ª—é—á–µ–π:</b> {keys_count}/5\n"
                f"üíé <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if keys_count > 0 else '‚ùå –ù—É–∂–µ–Ω API –∫–ª—é—á'}\n"
                f"üéÅ <b>–ü—Ä–æ–±–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {trial_left if trial_left is not None else '–ü—Ä–µ–º–∏—É–º'}\n\n"
                
                f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {active_tasks}\n"
                f"üéØ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total_bookings}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {successful_bookings}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_bookings/total_bookings*100) if total_bookings > 0 else 0:.1f}%\n\n"
                
                "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
        else:
            # Fallback –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name}\n"
                f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            
    except Exception as e:
        logger.error(f"Failed to get user stats {user_id}: {e}")
        # Fallback to in-memory storage
        from .callbacks import get_user_keys_count, has_api_keys
        
        keys_count = await get_user_keys_count(user_id)
        has_keys = await has_api_keys(user_id)
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name}\n"
            f"üîë <b>API –∫–ª—é—á–µ–π:</b> {keys_count}/5\n"
            f"üíé <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if has_keys else '‚ùå –ù—É–∂–µ–Ω API –∫–ª—é—á'}\n\n"
            
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: 0\n"
            f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: 0\n\n"
            
            "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
    
    await message.answer(stats_text, parse_mode="HTML", reply_markup=get_main_menu())


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """Handle /cancel command."""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_main_menu()
        )
        return
    
    await state.clear()
    await message.answer(
        "‚úÖ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu()
    )


# Main menu callback handler
@router.callback_query(MainMenuCallback.filter())
async def handle_main_menu(callback: CallbackQuery, callback_data: MainMenuCallback):
    """Handle main menu callbacks."""
    action = callback_data.action
    
    if action == "main":
        menu_text = (
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(
            menu_text,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    
    elif action == "help":
        # Redirect to help handler
        await cmd_help(callback.message)
    
    elif action == "stats":
        # This will be handled by dedicated stats handler
        await callback.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    else:
        # Other actions are handled by dedicated routers
        await callback.answer()




# –£–î–ê–õ–ï–ù: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_unknown_message 
# –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ—à–∞–ª FSM
