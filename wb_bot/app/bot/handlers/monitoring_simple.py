"""
–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–î.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData

from ...utils.logger import get_logger

logger = get_logger(__name__)

router = Router(name="monitoring_simple")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
WAREHOUSES_PER_PAGE = 5

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
user_monitoring_tasks = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
user_pagination_data = {}


class MonitoringCallback(CallbackData, prefix="mon"):
    """Callback data –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    action: str
    value: str = ""


async def show_monitoring_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    text = (
        "üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º\n"
        "‚ö° <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data="quick_search")],
        [InlineKeyboardButton(text="‚ö° –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_booking")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "quick_search")
async def quick_search_handler(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤."""
    logger.info(f"üöÄ –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö –ó–ê–ü–£–©–ï–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
    
    from .callbacks import get_user_api_keys_list
    
    user_id = callback.from_user.id
    api_keys = await get_user_api_keys_list(user_id)
    
    logger.info(f"üîë –ù–∞–π–¥–µ–Ω–æ API –∫–ª—é—á–µ–π: {len(api_keys)}")
    
    if not api_keys:
        await callback.message.edit_text(
            "‚ùå <b>API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring")]
            ])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    loading_msg = await callback.message.edit_text(
        "üîç <b>–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º...</b>\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç\n"
        "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏ —Å–ª–æ—Ç—ã...",
        parse_mode="HTML"
    )
    
    try:
        from ...services.wb_supplies_api import WBSuppliesAPIClient
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
            logger.info("üè¨ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤...")
            warehouses = await api_client.get_warehouses()
            
            if not warehouses:
                await loading_msg.edit_text(
                    "‚ùå <b>–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring")]
                    ])
                )
                return
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-30 —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            top_warehouses = warehouses[:30]
            warehouse_ids = [wh.get('id') for wh in top_warehouses if wh.get('id')]
            
            logger.info(f"üìä –ü–æ–ª—É—á–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è {len(warehouse_ids)} —Å–∫–ª–∞–¥–æ–≤...")
            available_slots = await api_client.get_acceptance_coefficients(warehouse_ids)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            wh_id = slot.get("warehouseID")
            if wh_id not in slots_by_warehouse:
                slots_by_warehouse[wh_id] = []
            slots_by_warehouse[wh_id].append(slot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        user_id = callback.from_user.id
        user_pagination_data[user_id] = {
            'warehouses': warehouses,
            'available_slots': available_slots,
            'slots_by_warehouse': slots_by_warehouse
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_warehouses_page(loading_msg, 0, warehouses, available_slots, slots_by_warehouse)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º –ø–æ–∏—Å–∫–µ: {type(e).__name__}: {str(e)}")
        await loading_msg.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ—Ç–æ–≤</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            f"<i>–î–µ—Ç–∞–ª–∏: {str(e)[:100]}...</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="quick_search")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring")]
            ])
        )


@router.callback_query(F.data == "my_tasks")
async def show_my_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    tasks = user_monitoring_tasks.get(user_id, [])
    
    if not tasks:
        text = (
            "üìä <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤."
        )
    else:
        text = f"üìä <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)} —à—Ç.)</b>\n\n"
        for i, task in enumerate(tasks, 1):
            text += f"{i}. {task.get('name', '–ó–∞–¥–∞—á–∞')} - {task.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "create_task")
async def create_task_handler(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


async def show_warehouses_page(message, page: int, warehouses, available_slots, slots_by_warehouse):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–ª–∞–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    warehouses_with_slots = [w for w in warehouses if w.get('id') in slots_by_warehouse]
    
    total_pages = (len(warehouses_with_slots) + WAREHOUSES_PER_PAGE - 1) // WAREHOUSES_PER_PAGE
    start_idx = page * WAREHOUSES_PER_PAGE
    end_idx = min(start_idx + WAREHOUSES_PER_PAGE, len(warehouses_with_slots))
    
    if available_slots:
        text = f"üéØ <b>–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}</b>\n\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} (—Å–∫–ª–∞–¥–æ–≤ —Å–æ —Å–ª–æ—Ç–∞–º–∏: {len(warehouses_with_slots)})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–ª–∞–¥—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            warehouse = warehouses_with_slots[i]
            wh_id = warehouse.get('id')
            wh_name = warehouse.get('name', f'–°–∫–ª–∞–¥ #{wh_id}')
            
            slots = slots_by_warehouse.get(wh_id, [])
            text += f"üè¨ <b>{wh_name}</b>\n"
            text += f"   üÜî ID: {wh_id}\n"
            text += f"   üéØ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
            dates = [slot.get("date", "").split("T")[0] for slot in slots[:3]]
            if dates:
                text += f"   üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã: {', '.join(dates)}\n"
            
            text += "\n"
    else:
        text = f"üè¨ <b>–ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}</b>\n\n"
        text += "‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
        text += "–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n\n"
        
    text += "üí° <i>–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏'</i>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warehouses_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"warehouses_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥—ã", callback_data="quick_search")],
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏", callback_data="view_supplies")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring")]
    ])
    
    await message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.callback_query(F.data.startswith("warehouses_page:"))
async def show_warehouses_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤."""
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
    
    page = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_pagination_data:
        data = user_pagination_data[user_id]
        warehouses = data['warehouses']
        available_slots = data['available_slots']
        slots_by_warehouse = data['slots_by_warehouse']
        
        await show_warehouses_page(callback.message, page, warehouses, available_slots, slots_by_warehouse)
    else:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", show_alert=True)


