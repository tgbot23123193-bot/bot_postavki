"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any

from ...utils.logger import get_logger
from ...services.wb_supplies_api import WBSuppliesAPIClient
# Removed user_api_keys - using PostgreSQL database only
from ..keyboards.inline import back_to_main_menu_keyboard

logger = get_logger(__name__)
router = Router()


class SuppliesStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏."""
    waiting_for_api_key = State()
    viewing_supplies = State()
    selecting_dates = State()
    monitoring_slots = State()


def create_supplies_keyboard(supplies: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –í–°–ï–• –ø–æ—Å—Ç–∞–≤–æ–∫."""
    keyboard = []
    
    for supply in supplies[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –ø–æ—Å—Ç–∞–≤–æ–∫
        supply_id = supply.get("id", "")
        supply_name = supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
        status = supply.get("status", "unknown")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        status_emoji = "üì¶"
        if "–ü—Ä–∏–Ω—è—Ç–æ" in status:
            status_emoji = "‚úÖ"
        elif "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" in status:
            status_emoji = "üî•"
        elif "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" in status:
            status_emoji = "üìÖ"
        elif "–û—Ç–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞" in status:
            status_emoji = "üöö"
        elif "–ò–¥—ë—Ç –ø—Ä–∏—ë–º–∫–∞" in status:
            status_emoji = "üì¶"
        elif "–û—Ç–≥—Ä—É–∂–µ–Ω–æ" in status:
            status_emoji = "üèÅ"
        
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        display_name = supply_name[:25]
        if len(supply_name) > 25:
            display_name += "..."
            
        button_text = f"{status_emoji} {display_name} ({status})"
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"supply_select:{supply_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="supplies_refresh")],
        [InlineKeyboardButton(text="üè¨ –°–∫–ª–∞–¥—ã", callback_data="view_warehouses")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_warehouses_keyboard(warehouses: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤."""
    keyboard = []
    
    for warehouse in warehouses[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 15 —Å–∫–ª–∞–¥–æ–≤
        warehouse_id = warehouse.get("id", "")
        warehouse_name = warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = warehouse_name[:35]
        if len(warehouse_name) > 35:
            display_name += "..."
            
        keyboard.append([
            InlineKeyboardButton(
                text=f"üè¨ {display_name}",
                callback_data=f"warehouse_info:{warehouse_id}"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouses_refresh")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "view_supplies")
async def show_supplies_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from .callbacks import get_user_api_keys_list
    api_keys = await get_user_api_keys_list(user_id)
    if not api_keys:
        await callback.message.edit_text(
            "‚ùå <b>API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á Wildberries.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await state.set_state(SuppliesStates.waiting_for_api_key)
        return
    
    await callback.message.edit_text(
        "‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫...</b>\n\n"
        "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ API Wildberries...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ API
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            supplies = await api_client.get_supplies(limit=50)
            
        if not supplies:
            await callback.message.edit_text(
                "üì≠ <b>–ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_supplies")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 1 –∏ 2
        await callback.message.edit_text(
            f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({len(supplies)})</b>\n\n"
            "üî• –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞:",
            parse_mode="HTML",
            reply_markup=create_supplies_keyboard(supplies)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(supplies=supplies)
        await state.set_state(SuppliesStates.viewing_supplies)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )


@router.callback_query(F.data == "view_warehouses")
async def show_warehouses_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤."""
    user_id = callback.from_user.id
    
    from .callbacks import get_user_api_keys_list
    api_keys = await get_user_api_keys_list(user_id)
    if not api_keys:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...</b>\n\n"
        "–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–∞—Ö WB...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ API
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            warehouses = await api_client.get_warehouses()
            
        if not warehouses:
            await callback.message.edit_text(
                "üè¨ <b>–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_warehouses")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
        await callback.message.edit_text(
            f"üè¨ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã ({len(warehouses)})</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            parse_mode="HTML",
            reply_markup=create_warehouses_keyboard(warehouses)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(warehouses=warehouses)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤:\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="view_warehouses")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


@router.callback_query(F.data.startswith("supply_select:"))
async def select_supply(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    supplies = data.get("supplies", [])
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
    selected_supply = None
    for supply in supplies:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∫–∞–∫ supply_id –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if str(supply.get("id")) == str(supply_id):
            selected_supply = supply
            break
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    supply_status = selected_supply.get("status", "unknown")
    created_at = selected_supply.get("createDate", "")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if created_at:
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = created_at
    
    await callback.message.edit_text(
        f"üì¶ <b>{supply_name}</b>\n\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {supply_status}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {formatted_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", callback_data=f"book_supply:{supply_id}")],
            [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤", callback_data=f"monitor_supply:{supply_id}")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"supply_details:{supply_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫", callback_data="view_supplies")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
    await state.update_data(selected_supply=selected_supply)


@router.message(SuppliesStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞."""
    api_key = message.text.strip()
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    if not api_key or len(api_key) < 10:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞</b>\n\n"
            "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    loading_msg = await message.answer(
        "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...</b>\n\n"
        "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ API Wildberries...",
        parse_mode="HTML"
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        async with WBSuppliesAPIClient(api_key) as api_client:
            warehouses = await api_client.get_warehouses()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await get_user_by_telegram_id(user_id)
        if user:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # user.api_key = api_key
            # await user.save()
            pass
        
        await loading_msg.edit_text(
            "‚úÖ <b>API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: {e}")
        await loading_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API WB:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "supplies_refresh")
async def refresh_supplies(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫."""
    await show_supplies_menu(callback, state)


@router.callback_query(F.data == "back_to_supply")
async def back_to_supply(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ."""
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await show_supplies_menu(callback, state)
        return
    
    supply_id = selected_supply.get("id")
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    supply_status = selected_supply.get("status", "unknown")
    created_at = selected_supply.get("createDate", "")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if created_at:
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = created_at
    
    await callback.message.edit_text(
        f"üì¶ <b>{supply_name}</b>\n\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {supply_status}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {formatted_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", callback_data=f"book_supply:{supply_id}")],
            [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤", callback_data=f"monitor_supply:{supply_id}")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"supply_details:{supply_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫", callback_data="view_supplies")]
        ])
    )
