"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ 
–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.
"""

import asyncio
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.callback_data import CallbackData

from ...utils.logger import get_logger
from ...services.database_service import db_service
from ...services.browser_manager import BrowserManager
from ...services.redistribution_service import get_redistribution_service
from ...services.wb_stocks_service import get_wb_stocks_service, WBStocksService
from ..keyboards.inline import get_main_menu
from ..keyboards.inline_redistribution import get_redistribution_menu, create_warehouses_keyboard, RedistributionCallback, WarehouseCallback

logger = get_logger(__name__)
router = Router()


@router.callback_query(F.data == "redistrib_wait_31min")
async def wait_31_minutes_retry(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è 31 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞."""
    try:
        import asyncio
        
        user_id = callback.from_user.id
        state_data = await state.get_data()
        
        await state.set_state(RedistributionStates.waiting_for_retry)
        
        await callback.message.edit_text(
            f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ 31 –º–∏–Ω—É—Ç—ã</b>\n\n"
            f"üïê –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–ø—ã—Ç–∫—É\n"
            f"—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 31 –º–∏–Ω—É—Ç—É.\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{state_data.get('article')}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{state_data.get('source_warehouse', {}).get('name')}</b>\n"
            f"üì¶ –ö—É–¥–∞: <b>{state_data.get('destination_warehouse', {}).get('name')}</b>\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{state_data.get('quantity')}</b> —à—Ç\n\n"
            f"‚ö†Ô∏è –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä!\n"
            f"üì± –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–µ—Ä–Ω—É—Ç—å Telegram.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ",
                        callback_data="redistribution_menu"
                    )
                ]
            ])
        )
        
        await callback.answer()
        
        # –ñ–¥–µ–º 31 –º–∏–Ω—É—Ç—É
        await asyncio.sleep(31 * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_state = await state.get_state()
        if current_state != RedistributionStates.waiting_for_retry.state:
            return
        
        # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
        await callback.message.edit_text(
            f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</b>\n\n"
            f"‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ...",
            parse_mode="HTML"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ
        redistribution_service = get_redistribution_service(browser_manager)
        
        # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        await redistribution_service.close_and_reopen_redistribution(
            user_id, 
            state_data.get('article')
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞
        await redistribution_service.select_warehouse(
            user_id,
            state_data.get('source_warehouse')
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –∫—É–¥–∞  
        await redistribution_service.select_destination_warehouse(
            user_id,
            state_data.get('destination_warehouse')
        )
        
        # –í–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        input_result = await redistribution_service.input_quantity(
            user_id, 
            state_data.get('quantity')
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if input_result["success"]:
            await callback.message.edit_text(
                f"‚úÖ <b>–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
                f"–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n\n"
                f"–û—à–∏–±–∫–∞: {input_result.get('error')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ 31 –º–∏–Ω—É—Ç—ã: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()


@router.callback_query(F.data == "redistrib_wait_window")
async def wait_for_time_window(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞."""
    try:
        from ...utils.time_utils import get_minutes_until_next_window
        import asyncio
        
        user_id = callback.from_user.id
        minutes_wait = get_minutes_until_next_window()
        
        await state.set_state(RedistributionStates.waiting_for_retry)
        
        await callback.message.edit_text(
            f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞</b>\n\n"
            f"üïê –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
            f"—á–µ—Ä–µ–∑ {minutes_wait} –º–∏–Ω—É—Ç, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ.\n\n"
            f"‚ö†Ô∏è –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä!\n"
            f"üì± –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å Telegram, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ",
                        callback_data="redistribution_menu"
                    )
                ]
            ])
        )
        
        await callback.answer()
        
        # –ñ–¥–µ–º –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(minutes_wait * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_state = await state.get_state()
        if current_state != RedistributionStates.waiting_for_retry.state:
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ
        await state.clear()
        await request_article_input(callback, state)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()


async def safe_callback_answer(callback: CallbackQuery, text: str = None, show_alert: bool = False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ callback.answer —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timeout."""
    try:
        await callback.answer(text, show_alert=show_alert)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer '{text}': {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
browser_manager: Optional[BrowserManager] = None

def init_redistribution_handlers(bm: BrowserManager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    global browser_manager
    browser_manager = bm


class RedistributionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    waiting_for_article = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
    waiting_for_source_warehouse = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å
    waiting_for_destination_warehouse = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫—É–¥–∞)
    waiting_for_quantity = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    processing_redistribution = State()  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ—Ö–æ—Ç–∞)
    waiting_for_retry = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ 31 –º–∏–Ω—É—Ç—É


# Callback –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ keyboards.inline_redistribution

class DestinationCallback(CallbackData, prefix="destination"):
    """Callback data for destination warehouse selection."""
    action: str  # select, retry
    warehouse_id: str  # ID —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
    

# –§—É–Ω–∫—Ü–∏—è create_warehouses_keyboard –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ keyboards.inline_redistribution

def create_destination_keyboard(warehouses: list, show_retry: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ 1 –≤ —Ä—è–¥ –¥–ª—è —É–¥–æ–±–Ω–æ—Å—Ç–∏)
    for warehouse in warehouses:
        warehouse_button = InlineKeyboardButton(
            text=f"üì¶ {warehouse['name']}",
            callback_data=DestinationCallback(
                action="select",
                warehouse_id=warehouse['id']
            ).pack()
        )
        keyboard.append([warehouse_button])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞)
    if show_retry:
        retry_button = InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data=DestinationCallback(
                action="retry",
                warehouse_id="none"
            ).pack()
        )
        keyboard.append([retry_button])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="redistribution_menu"
    )
    keyboard.append([cancel_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_redistribution_menu() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
                callback_data=RedistributionCallback(action="start").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                callback_data=RedistributionCallback(action="help").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_redistribution_progress_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=RedistributionCallback(action="cancel").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="back_to_main"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "redistribution_menu")
async def show_redistribution_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    try:
        user_id = callback.from_user.id
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–ª–∏–¥–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã browser_sessions
        browser_session = await db_service.get_browser_session(user_id)
        
        if not browser_session:
            await callback.message.edit_text(
                "‚ùå <b>–ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1. –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á\n"
                "2. –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n\n"
                "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return
        
        if not browser_session.session_valid:
            await callback.message.edit_text(
                "‚ùå <b>–°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</b>\n\n"
                "–í–∞—à–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ WB.\n\n"
                "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return
        
        if not browser_session.wb_login_success:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WB –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Wildberries —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
                "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É\n\n"
                "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        last_login = browser_session.last_successful_login
        login_info = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {last_login.strftime('%d.%m.%Y %H:%M')}" if last_login else "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        menu_text = (
            "üîÑ <b>–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π:\n"
            "üìã –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å–∫–ª–∞–¥–µ\n\n"
            f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞\n"
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WB –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
            f"üìÖ {login_info}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(
            menu_text,
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(RedistributionCallback.filter(F.action == "start"))
async def request_article_input(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    try:
        user_id = callback.from_user.id
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª")
        
        # –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ü–û –í–†–ï–ú–ï–ù–ò - —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞!
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        await state.set_state(RedistributionStates.waiting_for_article)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="redistribution_menu"
                )
            ]
        ])
        
        await callback.message.edit_text(
            "üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "üî§ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ WB –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456789</code>\n\n"
            "‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—Ä—Ç–∏–∫—É–ª –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n"
            "‚Ä¢ –û–±—ã—á–Ω–æ 8-10 —Ü–∏—Ñ—Ä\n"
            "‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—Ä—Ç–∏–∫—É–ª–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(RedistributionStates.waiting_for_article)
async def process_article_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    try:
        user_id = message.from_user.id
        article = message.text.strip()
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∞—Ä—Ç–∏–∫—É–ª: {article}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        if not article.isdigit():
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞</b>\n\n"
                "–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        if len(article) < 6 or len(article) > 15:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∞—Ä—Ç–∏–∫—É–ª–∞</b>\n\n"
                "–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 15 —Ü–∏—Ñ—Ä.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article=article)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ API –î–û –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        status_message = await message.answer(
            f"üîÑ <b>–®–∞–≥ 2 –∏–∑ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n\n"
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ WB API...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ WB API
        try:
            wb_stocks_service = WBStocksService()
            stocks_result = await wb_stocks_service.get_user_stocks(user_id, article)
            
            if not stocks_result["success"]:
                await status_message.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n\n"
                    f"‚ùå {stocks_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                    f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                    parse_mode="HTML",
                    reply_markup=get_redistribution_menu()
                )
                await state.clear()
                return
            
            warehouses = stocks_result.get("warehouses", [])
            if not warehouses:
                await status_message.edit_text(
                    f"üì¶ <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n\n"
                    f"‚ùå –¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤–∞—à–∏—Ö —Å–∫–ª–∞–¥–∞—Ö –∏–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤.\n\n"
                    f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞.",
                    parse_mode="HTML",
                    reply_markup=get_redistribution_menu()
                )
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–ª–∞–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(available_warehouses=warehouses)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞ –æ—Ç–∫—É–¥–∞
            await state.set_state(RedistributionStates.waiting_for_source_warehouse)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
            source_keyboard = create_warehouses_keyboard(warehouses, "source")
            
            total_quantity = sum(w.get('quantity', 0) for w in warehouses)
            full_quantity = sum(w.get('full_quantity', 0) for w in warehouses)
            
            await status_message.edit_text(
                f"üè™ <b>–®–∞–≥ 2 –∏–∑ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –û–¢–ö–£–î–ê –∑–∞–±—Ä–∞—Ç—å</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: <b>{len(warehouses)}</b>\n"
                f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é: <b>{total_quantity}</b> —à—Ç\n"
                f"üìã –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{full_quantity}</b> —à—Ç\n\n"
                f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä:",
                parse_mode="HTML",
                reply_markup=source_keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}")
            await status_message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n\n"
                f"‚ùå {str(e)}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
            await state.clear()
            return
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞: {e}")
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.clear()


@router.callback_query(WarehouseCallback.filter(F.action == "select"))
async def handle_warehouse_selection(callback: CallbackQuery, callback_data: WarehouseCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        user_id = callback.from_user.id
        warehouse_id = callback_data.warehouse_id
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–∫–ª–∞–¥: {warehouse_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        warehouses = state_data.get('warehouses', [])
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
        selected_warehouse = None
        for warehouse in warehouses:
            if warehouse['id'] == warehouse_id:
                selected_warehouse = warehouse
                break
        
        if not selected_warehouse:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞</b>\n\n"
                "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
            await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        if not browser_manager:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "–ë—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        await callback.message.edit_text(
            f"üéØ <b>–í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –°–∫–ª–∞–¥: <b>{selected_warehouse['name']}</b>\n\n"
            f"‚è≥ –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–∫–ª–∞–¥—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ (–≤–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É)
        redistribution_service = get_redistribution_service(browser_manager, fast_mode=False)
        result = await redistribution_service.select_warehouse(user_id, selected_warehouse)
        
        logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ë–û–†–ê –°–ö–õ–ê–î–ê: {result}")
        
        if result.get("warehouse_not_in_list"):
            # –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ –Ω–∞ —Å–∞–π—Ç–µ
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ WB</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –°–∫–ª–∞–¥: <b>{selected_warehouse['name']}</b>\n\n"
                f"‚ùå –í –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç—É —Å–∫–ª–∞–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–±—Ä–∞–ª–∏.\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Å–∫–ª–∞–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n\n"
                f"‚è≥ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...",
                parse_mode="HTML"
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            reopen_result = await redistribution_service.close_and_reopen_redistribution(user_id, article)
            
            if reopen_result["success"]:
                await callback.message.edit_text(
                    f"üîÑ <b>–§–æ—Ä–º–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n\n"
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∫–ª–∞–¥ '{selected_warehouse['name']}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    parse_mode="HTML",
                    reply_markup=create_warehouses_keyboard(warehouses, "source")
                )
            else:
                await callback.message.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                    parse_mode="HTML",
                    reply_markup=get_redistribution_menu()
                )
            
            await safe_callback_answer(callback, "‚ö†Ô∏è –°–∫–ª–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        elif result["success"]:
            # –°–∫–ª–∞–¥ "–æ—Ç–∫—É–¥–∞" –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ "–∫—É–¥–∞"
            await callback.message.edit_text(
                f"‚úÖ <b>–°–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –°–∫–ª–∞–¥ (–æ—Ç–∫—É–¥–∞): <b>{selected_warehouse['name']}</b>\n\n"
                f"‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...",
                parse_mode="HTML"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            destination_warehouses = [
                {"id": "dest_1", "name": "–ö–æ–ª–µ–¥–∏–Ω–æ"},
                {"id": "dest_2", "name": "–ö–∞–∑–∞–Ω—å"},
                {"id": "dest_3", "name": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å"},
                {"id": "dest_4", "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥"},
                {"id": "dest_5", "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Äì –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π 14–≥"},
                {"id": "dest_6", "name": "–¢—É–ª–∞"},
                {"id": "dest_7", "name": "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"},
                {"id": "dest_8", "name": "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)"},
                {"id": "dest_9", "name": "–ö–æ—Ç–æ–≤—Å–∫"},
                {"id": "dest_10", "name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥"},
                {"id": "dest_11", "name": "–°–∞—Ä–∞–ø—É–ª"}
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º - —É–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞
            destination_warehouses = [
                w for w in destination_warehouses 
                if w["name"] != selected_warehouse["name"]
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            await state.set_state(RedistributionStates.waiting_for_destination)
            await state.update_data(
                article=article,
                source_warehouse=selected_warehouse,
                destination_warehouses=destination_warehouses
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–∫–ª–∞–¥–∞–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            destination_keyboard = create_destination_keyboard(destination_warehouses)
            
            await callback.message.edit_text(
                f"üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{selected_warehouse['name']}</b>\n"
                f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(destination_warehouses)}\n\n"
                f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                parse_mode="HTML",
                reply_markup=destination_keyboard
            )
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–π–º–∞—É—Ç)
            await safe_callback_answer(callback, "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∞
            if result.get("error") == "warehouse_selection_error" and result.get("need_retry"):
                # –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                error_messages = result.get("error_messages", [])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫
                if error_messages:
                    if len(error_messages) == 1:
                        # –û–¥–Ω–∞ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
                        error_display = f"‚ùå {error_messages[0]}"
                    else:
                        # –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–æ–º
                        error_display = "‚ùå <b>–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {msg}" for msg in error_messages])
                else:
                    error_display = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤
                warehouse_keyboard = create_warehouses_keyboard(warehouses, "source")
                
                await callback.message.edit_text(
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                    f"üè™ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥: <b>{selected_warehouse['name']}</b>\n\n"
                    f"{error_display}\n\n"
                    f"üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                    parse_mode="HTML",
                    reply_markup=warehouse_keyboard
                )
                await safe_callback_answer(callback, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥", show_alert=True)
            else:
                # –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
                error_message = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                # –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º
                if error_message and isinstance(error_message, str):
                    if len(error_message) > 100:
                        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ–∫—Ä–∞—â–∞–µ–º
                        display_error = error_message[:100] + "..."
                    else:
                        display_error = error_message
                else:
                    display_error = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥"
                
                await callback.message.edit_text(
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                    f"üè™ –°–∫–ª–∞–¥: <b>{selected_warehouse['name']}</b>\n\n"
                    f"‚ùå {display_error}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
                    parse_mode="HTML",
                    reply_markup=get_redistribution_menu()
                )
                await safe_callback_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", show_alert=True)
                await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞.",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


@router.callback_query(RedistributionCallback.filter(F.action == "help"))
async def show_redistribution_help(callback: CallbackQuery, callback_data: RedistributionCallback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é."""
    help_text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
        
        "üéØ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å–∫–ª–∞–¥–µ'\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏'\n"
        "‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º\n\n"
        
        "üîß <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API –∫–ª—é—á\n"
        "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WB —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
        "‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n\n"
        
        "üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
        "3. –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –æ—Ç–∫—Ä—ã–≤—à–∏–º—Å—è –º–µ–Ω—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n\n"
        
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WB –Ω–µ –∏—Å—Ç–µ–∫–ª–∞\n"
        "‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
    )
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_redistribution_menu()
    )
    await callback.answer()


@router.callback_query(DestinationCallback.filter(F.action == "select"))
async def handle_destination_selection(callback: CallbackQuery, callback_data: DestinationCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    try:
        user_id = callback.from_user.id
        destination_warehouse_id = callback_data.warehouse_id
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination_warehouse_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        destination_warehouses = state_data.get('destination_warehouses', [])
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        selected_destination = None
        for warehouse in destination_warehouses:
            if warehouse['id'] == destination_warehouse_id:
                selected_destination = warehouse
                break
        
        if not selected_destination:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
            await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await callback.message.edit_text(
            f"üéØ <b>–í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
            f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n\n"
            f"‚è≥ –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–∫–ª–∞–¥—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        redistribution_service = get_redistribution_service(browser_manager)
        result = await redistribution_service.select_destination_warehouse(user_id, selected_destination)
        
        if result["success"]:
            # –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await callback.message.edit_text(
                f"‚úÖ <b>–°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω!</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n\n"
                f"‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞...",
                parse_mode="HTML"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            quantity_result = await redistribution_service.get_available_quantity(user_id)
            
            if quantity_result["success"]:
                quantity_text = quantity_result["quantity_text"]
                quantity_number = quantity_result.get("quantity_number")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                await state.set_state(RedistributionStates.waiting_for_quantity)
                await state.update_data(
                    article=article,
                    source_warehouse=source_warehouse,
                    destination_warehouse=selected_destination,
                    available_quantity=quantity_number,
                    quantity_text=quantity_text
                )
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
                cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞",
                            callback_data="redistribution_menu"
                        )
                    ]
                ])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                quantity_message = (
                    f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                    f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                    f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n\n"
                    f"üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {quantity_text}\n\n"
                    f"üî¢ <b>–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å?</b>\n\n"
                    f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10</code>):"
                )
                
                if quantity_number:
                    quantity_message += f"\nüìù –ú–∞–∫—Å–∏–º—É–º: <code>{quantity_number}</code> —à—Ç"
                
                await callback.message.edit_text(
                    quantity_message,
                    parse_mode="HTML",
                    reply_markup=cancel_keyboard
                )
                await safe_callback_answer(callback, "‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            else:
                await callback.message.edit_text(
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                    f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                    f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {quantity_result['error']}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
                    parse_mode="HTML",
                    reply_markup=get_redistribution_menu()
                )
                await safe_callback_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", show_alert=True)
                await state.clear()
        
        elif result.get("need_retry"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            error_messages = result.get("error_messages", [result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")])
            error_text = "\n".join(f"‚Ä¢ {msg}" for msg in error_messages)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            destination_keyboard = create_destination_keyboard(destination_warehouses, show_retry=True)
            
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n\n"
                f"üö® <b>–û—à–∏–±–∫–∏:</b>\n{error_text}\n\n"
                f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {result.get('screenshot', '–ù–µ —Å–æ–∑–¥–∞–Ω')}\n\n"
                f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫:",
                parse_mode="HTML",
                reply_markup=destination_keyboard
            )
            await callback.answer("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥", show_alert=True)
        
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"üì¶ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n"
                f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", show_alert=True)
            await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


@router.callback_query(DestinationCallback.filter(F.action == "retry"))
async def retry_destination_warehouses(callback: CallbackQuery, callback_data: DestinationCallback, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    try:
        user_id = callback.from_user.id
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        
        await callback.message.edit_text(
            f"üîÑ <b>–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n\n"
            f"‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        redistribution_service = get_redistribution_service(browser_manager)
        destination_result = await redistribution_service.get_destination_warehouses(user_id)
        
        if destination_result["success"]:
            destination_warehouses = destination_result["warehouses"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(destination_warehouses=destination_warehouses)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            destination_keyboard = create_destination_keyboard(destination_warehouses)
            
            await callback.message.edit_text(
                f"üîÑ <b>–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(destination_warehouses)}\n\n"
                f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
                parse_mode="HTML",
                reply_markup=destination_keyboard
            )
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"‚ùå –û—à–∏–±–∫–∞: {destination_result['error']}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
                parse_mode="HTML",
                reply_markup=get_redistribution_menu()
            )
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


async def start_redistribution_cycle(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."""
    try:
        import asyncio
        from ...utils.redistribution_config import RedistributionConfig
        
        user_id = message.from_user.id
        state_data = await state.get_data()
        
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        destination_warehouse = state_data.get('destination_warehouse')
        quantity = state_data.get('quantity')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_message = await message.answer(
            f"üöÄ <b>–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ö–æ—Ç—É –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π!</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
            f"üì¶ –ö—É–¥–∞: <b>{destination_warehouse['name']}</b>\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b> —à—Ç\n\n"
            f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: {', '.join([f'{s.hour:02d}:{s.minute:02d}-{e.hour:02d}:{e.minute:02d}' for s, e in RedistributionConfig.get_booking_periods()])} –ú–°–ö\n"
            f"üî• –í –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: –∫–∞–∂–¥—É—é <b>{RedistributionConfig.get_active_retry_minutes()} –º–∏–Ω—É—Ç—É</b>\n"
            f"‚è≥ –í–Ω–µ –ø–µ—Ä–∏–æ–¥–æ–≤: –∫–∞–∂–¥—ã–µ <b>{RedistributionConfig.get_retry_minutes()} –º–∏–Ω—É—Ç</b>\n"
            f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {RedistributionConfig.get_max_attempts()}\n\n"
            f"üéØ –ë–æ—Ç –±—É–¥–µ—Ç <b>—É–º–Ω–æ</b> –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–π–º–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ö–æ—Ç—É",
                        callback_data="redistribution_stop"
                    )
                ]
            ])
        )
        
        await state.set_state(RedistributionStates.processing_redistribution)
        
        attempts = 0
        max_attempts = RedistributionConfig.get_max_attempts()
        
        redistribution_service = get_redistribution_service(browser_manager, fast_mode=True)
        
        while attempts < max_attempts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            current_state = await state.get_state()
            if current_state != RedistributionStates.processing_redistribution.state:
                break
            
            attempts += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Ä–µ–∂–∏–º
            in_active_period = RedistributionConfig.is_in_booking_period()
            current_retry_interval = RedistributionConfig.get_current_retry_interval()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∂–∏–º–µ
            if in_active_period:
                mode_text = f"üî• <b>–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú</b> (–∫–∞–∂–¥—É—é {current_retry_interval} –º–∏–Ω)"
            else:
                mode_text = f"‚è≥ <b>–û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú</b> (–∫–∞–∂–¥—ã–µ {current_retry_interval} –º–∏–Ω)"
                minutes_until_active = RedistributionConfig.minutes_until_next_period()
                mode_text += f"\n‚è∞ –î–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {minutes_until_active} –º–∏–Ω"
            
            await status_message.edit_text(
                f"üéØ <b>–ü–æ–ø—ã—Ç–∫–∞ #{attempts}</b>\n\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                f"üì¶ –ö—É–¥–∞: <b>{destination_warehouse['name']}</b>\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b> —à—Ç\n\n"
                f"{mode_text}\n\n"
                f"‚è≥ –ü—Ä–æ–±—É–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å...",
                parse_mode="HTML"
            )
            
            try:
                # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                await redistribution_service.close_and_reopen_redistribution(user_id, article)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞
                select_result = await redistribution_service.select_warehouse(user_id, source_warehouse)
                if not select_result["success"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
                    if select_result.get("warehouse_not_in_list"):
                        # –°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        raise Exception(f"üì¶ –°–∫–ª–∞–¥ '{source_warehouse['name']}' —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ WB. –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...")
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞: {select_result.get('error')}")
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –∫—É–¥–∞
                dest_result = await redistribution_service.select_destination_warehouse(user_id, destination_warehouse)
                if not dest_result["success"]:
                    if dest_result.get("warehouse_not_in_list"):
                        # –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                        raise Exception(f"üè≠ –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{destination_warehouse['name']}' —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...")
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥ –∫—É–¥–∞: {dest_result.get('error')}")
                
                # –í–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                input_result = await redistribution_service.input_quantity(user_id, quantity)
                
                if input_result["success"] and input_result.get("redistribute_clicked"):
                    # –£–°–ü–ï–•! –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                    try:
                        logger.info("üéâ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–π–º–∞–Ω–∞! –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                        await browser_manager.close_browser(user_id)
                        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                    except Exception as browser_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {browser_error}")
                    
                    await status_message.edit_text(
                        f"üéâüéâüéâ <b>–ü–û–°–¢–ê–í–ö–ê –ü–û–ô–ú–ê–ù–ê!</b> üéâüéâüéâ\n\n"
                        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                        f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
                        f"üì¶ –ö—É–¥–∞: <b>{destination_warehouse['name']}</b>\n"
                        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b> —à—Ç\n\n"
                        f"‚úÖ <b>–í–°–ï –£–°–ü–ï–®–ù–û –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û!</b>\n"
                        f"üéØ –ü–æ–ø—ã—Ç–∫–∞ #{attempts} —É—Å–ø–µ—à–Ω–∞!\n\n"
                        f"üòé –ú–æ–∂–µ—Ç–µ –∫–∞–π—Ñ–æ–≤–∞—Ç—å!",
                        parse_mode="HTML",
                        reply_markup=get_redistribution_menu()
                    )
                    await state.clear()
                    return
                else:
                    raise Exception(input_result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'))
                    
            except Exception as e:
                error_msg = str(e)
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ WB" in error_msg or "–ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫" in error_msg:
                    error_icon = "üì¶"
                    error_type = "–°–∫–ª–∞–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                elif "–ª–∏–º–∏—Ç" in error_msg.lower() or "–∏—Å—á–µ—Ä–ø–∞–Ω" in error_msg.lower():
                    error_icon = "‚è∞"
                    error_type = "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
                elif "–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in error_msg:
                    error_icon = "üî¢"
                    error_type = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
                else:
                    error_icon = "‚ùå"
                    error_type = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
                
                await status_message.edit_text(
                    f"{error_icon} <b>–ü–æ–ø—ã—Ç–∫–∞ #{attempts}: {error_type}</b>\n\n"
                    f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
                    f"üè™ –ò—â—É: <b>{source_warehouse['name']}</b> ‚Üí <b>{destination_warehouse['name']}</b>\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b> —à—Ç\n\n"
                    f"üí¨ {error_msg}\n\n"
                    f"{mode_text}\n"
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {current_retry_interval} –º–∏–Ω—É—Ç...",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ö–æ—Ç—É",
                                callback_data="redistribution_stop"
                            )
                        ]
                    ])
                )
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            await asyncio.sleep(current_retry_interval * 60)
        
        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            logger.info("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            await browser_manager.close_browser(user_id)
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞")
        except Exception as browser_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –ª–∏–º–∏—Ç–µ: {browser_error}")
        
        await status_message.edit_text(
            f"‚ö†Ô∏è <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üìä –°–¥–µ–ª–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n\n"
            f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        try:
            logger.info("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            await browser_manager.close_browser(user_id)
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        except Exception as browser_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ: {browser_error}")
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ö–æ—Ç—ã –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π.\n"
            "–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()


@router.message(RedistributionStates.waiting_for_quantity)
async def process_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è."""
    try:
        user_id = message.from_user.id
        quantity_str = message.text.strip()
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_str}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            quantity = int(quantity_str)
            if quantity <= 0:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    parse_mode="HTML"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10</code>).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        destination_warehouse = state_data.get('destination_warehouse')
        available_quantity = state_data.get('available_quantity')
        quantity_text = state_data.get('quantity_text')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        if available_quantity and quantity > available_quantity:
            await message.answer(
                f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_quantity}</b> —à—Ç\n"
                f"üìù –í—ã –≤–≤–µ–ª–∏: <b>{quantity}</b> —à—Ç\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –±–æ–ª—å—à–µ {available_quantity}:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        await state.update_data(quantity=quantity)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ—Ö–æ—Ç—ã –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π
        await start_redistribution_cycle(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()


@router.callback_query(F.data == "redistribution_stop")
async def stop_redistribution_hunt(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ö–æ—Ç—É –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π."""
    user_id = callback.from_user.id
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    try:
        logger.info(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ö–æ—Ç—É. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser_manager = BrowserManager()
        await browser_manager.close_browser(user_id)
        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ö–æ—Ç—ã")
    except Exception as browser_error:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {browser_error}")
    
    await state.clear()
    await callback.message.edit_text(
        "üõë <b>–û—Ö–æ—Ç–∞ –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
        "–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –æ—Ö–æ—Ç—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=get_redistribution_menu()
    )
    await callback.answer("–û—Ö–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(RedistributionCallback.filter(F.action == "cancel"))
async def cancel_redistribution(callback: CallbackQuery, callback_data: RedistributionCallback):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    await callback.message.edit_text(
        "‚ùå <b>–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=get_redistribution_menu()
    )
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(WarehouseCallback.filter(F.action == "source"))
async def handle_source_warehouse_selection(callback: CallbackQuery, callback_data: WarehouseCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –û–¢–ö–£–î–ê –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä."""
    try:
        user_id = callback.from_user.id
        warehouse_id = callback_data.warehouse_id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        available_warehouses = state_data.get('available_warehouses', [])
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
        selected_warehouse = None
        for warehouse in available_warehouses:
            if warehouse.get('id') == warehouse_id:
                selected_warehouse = warehouse
                break
        
        if not selected_warehouse:
            await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
        await state.update_data(source_warehouse=selected_warehouse)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await state.set_state(RedistributionStates.waiting_for_destination_warehouse)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        destination_warehouses = [
            {"id": "dest_1", "name": "–ö–æ–ª–µ–¥–∏–Ω–æ"},
            {"id": "dest_2", "name": "–ö–∞–∑–∞–Ω—å"},
            {"id": "dest_3", "name": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å"},
            {"id": "dest_4", "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥"},
            {"id": "dest_5", "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Äì –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π 14–≥"},
            {"id": "dest_6", "name": "–¢—É–ª–∞"},
            {"id": "dest_7", "name": "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"},
            {"id": "dest_8", "name": "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)"},
            {"id": "dest_9", "name": "–ö–æ—Ç–æ–≤—Å–∫"},
            {"id": "dest_10", "name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥"},
            {"id": "dest_11", "name": "–°–∞—Ä–∞–ø—É–ª"}
        ]
        
        # –£–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        destination_warehouses = [
            w for w in destination_warehouses 
            if w["name"] != selected_warehouse["name"]
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        destination_keyboard = create_warehouses_keyboard(destination_warehouses, "destination")
        
        await callback.message.edit_text(
            f"üè≠ <b>–®–∞–≥ 3 –∏–∑ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –ö–£–î–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{selected_warehouse['name']}</b>\n"
            f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{selected_warehouse.get('quantity', 0)}</b> —à—Ç\n\n"
            f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=destination_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –æ—Ç–∫—É–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(WarehouseCallback.filter(F.action == "destination"))
async def handle_destination_warehouse_selection(callback: CallbackQuery, callback_data: WarehouseCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –ö–£–î–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä."""
    try:
        user_id = callback.from_user.id
        warehouse_id = callback_data.warehouse_id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        destination_warehouses = [
            {"id": "dest_1", "name": "–ö–æ–ª–µ–¥–∏–Ω–æ"},
            {"id": "dest_2", "name": "–ö–∞–∑–∞–Ω—å"},
            {"id": "dest_3", "name": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å"},
            {"id": "dest_4", "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥"},
            {"id": "dest_5", "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Äì –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π 14–≥"},
            {"id": "dest_6", "name": "–¢—É–ª–∞"},
            {"id": "dest_7", "name": "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"},
            {"id": "dest_8", "name": "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)"},
            {"id": "dest_9", "name": "–ö–æ—Ç–æ–≤—Å–∫"},
            {"id": "dest_10", "name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥"},
            {"id": "dest_11", "name": "–°–∞—Ä–∞–ø—É–ª"}
        ]
        
        selected_destination = None
        for warehouse in destination_warehouses:
            if warehouse.get('id') == warehouse_id:
                selected_destination = warehouse
                break
        
        if not selected_destination:
            await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await state.update_data(destination_warehouse=selected_destination)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await state.set_state(RedistributionStates.waiting_for_quantity)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="redistribution_menu"
                )
            ]
        ])
        
        available_quantity = source_warehouse.get('quantity', 0)
        
        await callback.message.edit_text(
            f"üî¢ <b>–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{article}</code>\n"
            f"üè™ –û—Ç–∫—É–¥–∞: <b>{source_warehouse['name']}</b>\n"
            f"üè≠ –ö—É–¥–∞: <b>{selected_destination['name']}</b>\n"
            f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_quantity}</b> —à—Ç\n\n"
            f"üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:\n"
            f"(–æ—Ç 1 –¥–æ {available_quantity} —à—Ç)",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(RedistributionStates.waiting_for_quantity)
async def handle_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –æ—Ö–æ—Ç—ã."""
    try:
        user_id = message.from_user.id
        quantity_str = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if not quantity_str.isdigit():
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                parse_mode="HTML"
            )
            return
        
        quantity = int(quantity_str)
        if quantity <= 0:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
                "üí° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        article = state_data.get('article')
        source_warehouse = state_data.get('source_warehouse')
        destination_warehouse = state_data.get('destination_warehouse')
        available_quantity = source_warehouse.get('quantity', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        if quantity > available_quantity:
            await message.answer(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_quantity}</b> —à—Ç\n"
                f"üìù –í—ã –≤–≤–µ–ª–∏: <b>{quantity}</b> —à—Ç\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –±–æ–ª—å—à–µ {available_quantity}:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ—Ö–æ—Ç—É
        await state.update_data(quantity=quantity)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ—Ö–æ—Ç—É –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–æ–π
        await start_redistribution_cycle(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
            parse_mode="HTML",
            reply_markup=get_redistribution_menu()
        )
        await state.clear()
