"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from datetime import datetime, timedelta
from typing import List, Dict, Any
import asyncio

from ...utils.logger import get_logger
from ...utils.calendar_utils import TelegramCalendar, parse_calendar_callback
from ...services.wb_supplies_api import WBSuppliesAPIClient
from ...services.browser_manager import browser_manager
# Removed user_api_keys - using PostgreSQL database only

def escape_html(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤."""
    if not text:
        return text
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
    text = str(text)
    text = text.replace('&', '&amp;')  # –°–Ω–∞—á–∞–ª–∞ &
    text = text.replace('<', '&lt;')   # –ü–æ—Ç–æ–º <
    text = text.replace('>', '&gt;')   # –ü–æ—Ç–æ–º >
    text = text.replace('"', '&quot;') # –ö–∞–≤—ã—á–∫–∏
    text = text.replace("'", '&#39;')  # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    return text

async def safe_edit_text(message, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message is not modified'."""
    try:
        await message.edit_text(text, **kwargs)
    except Exception as e:
        if "message is not modified" not in str(e):
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ parse entities
            if "can't parse entities" in str(e) and kwargs.get("parse_mode") == "HTML":
                try:
                    # –£–±–∏—Ä–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    import re
                    clean_text = re.sub(r'<[^>]+>', '', text)  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
                    kwargs_copy = kwargs.copy()
                    kwargs_copy.pop("parse_mode", None)
                    await message.edit_text(clean_text, **kwargs_copy)
                except Exception as e2:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
from ..keyboards.inline import back_to_main_menu_keyboard

logger = get_logger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤
monitoring_sessions = {}


class BookingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫."""
    selecting_warehouse = State()
    selecting_dates = State()
    confirming_booking = State()
    monitoring_slots = State()
    waiting_for_phone = State()
    waiting_for_sms_code = State()


def create_date_range_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""
    today = datetime.now()
    keyboard = []
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    date_ranges = [
        ("üìÖ –°–µ–≥–æ–¥–Ω—è", today, today),
        ("üìÖ –ó–∞–≤—Ç—Ä–∞", today + timedelta(days=1), today + timedelta(days=1)),
        ("üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", today, today + timedelta(days=7)),
        ("üìÖ –ù–∞ –º–µ—Å—è—Ü", today, today + timedelta(days=30))
    ]
    
    for text, date_from, date_to in date_ranges:
        keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"date_range:{date_from.strftime('%Y-%m-%d')}:{date_to.strftime('%Y-%m-%d')}"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="custom_dates")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_book_supply")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_warehouse_selection_keyboard(warehouses: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞."""
    keyboard = []
    
    for warehouse in warehouses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–∫–ª–∞–¥–æ–≤
        warehouse_id = warehouse.get("id", "")
        warehouse_name = warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = warehouse_name[:40]
        if len(warehouse_name) > 40:
            display_name += "..."
            
        keyboard.append([
            InlineKeyboardButton(
                text=f"üè¨ {display_name}",
                callback_data=f"select_warehouse:{warehouse_id}"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã", callback_data="show_all_warehouses")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("book_supply:"))
async def start_booking_process(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    preorder_id = selected_supply.get("preorderId", supply_id)  # –ë–µ—Ä–µ–º preorderId –µ—Å–ª–∏ –µ—Å—Ç—å
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        booking_supply_id=supply_id,
        selected_supply=selected_supply
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        f"üéØ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID –ø–æ—Å—Ç–∞–≤–∫–∏: <code>{supply_id}</code>\n"
        f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{preorder_id}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üåê –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                callback_data=f"browser_book_supply:{supply_id}"
            )],
            [InlineKeyboardButton(
                text="ü§ñ –ß–µ—Ä–µ–∑ API (–≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤)",
                callback_data=f"api_book_supply:{supply_id}"
            )],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"supply_select:{supply_id}"
            )]
        ])
    )


@router.callback_query(F.data.startswith("api_book_supply:"))
async def api_book_supply(callback: CallbackQuery, state: FSMContext):
    """–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API —Å –≤—ã–±–æ—Ä–æ–º —Å–∫–ª–∞–¥–æ–≤."""
    supply_id = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    await callback.message.edit_text(
        f"ü§ñ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID: <code>{supply_id}</code>\n\n"
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=create_date_range_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(booking_supply_id=supply_id)
    await state.set_state(BookingStates.selecting_dates)


@router.callback_query(F.data == "custom_dates")
async def custom_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç."""
    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–æ—Ä –¥–∞—Ç –≤—Ä—É—á–Ω—É—é</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-09-10 2025-09-17\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=create_date_selection_keyboard()
    )
    await state.set_state(BookingStates.selecting_dates)


@router.callback_query(F.data.startswith("date_range:"))
async def process_date_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""
    _, date_from_str, date_to_str = callback.data.split(":")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
    from .callbacks import get_user_api_keys_list
    api_keys = await get_user_api_keys_list(user_id)
    if not api_keys:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
        f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–∞—Ö...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            warehouses = await api_client.get_warehouses()
            
            if warehouses:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è —Ç–æ–ø-25 —Å–∫–ª–∞–¥–æ–≤ (–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                top_warehouses = warehouses[:25]
                warehouse_ids = [w.get("id") for w in top_warehouses if w.get("id")]
                available_slots = await api_client.get_acceptance_coefficients(warehouse_ids)
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
            else:
                available_slots = []
            
        if not warehouses:
            await callback.message.edit_text(
                "‚ùå <b>–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–ª–∞–¥—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        warehouses_with_slots = []
        if available_slots:
            slot_warehouse_ids = set(slot.get("warehouseID") for slot in available_slots)
            warehouses_with_slots = [w for w in warehouses if w.get("id") in slot_warehouse_ids]
        
        if not warehouses_with_slots:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
                f"‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–∏–µ –¥–∞—Ç—ã", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        await callback.message.edit_text(
            f"üè¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses_with_slots)}\n"
            f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(available_slots)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏:",
            parse_mode="HTML",
            reply_markup=create_warehouse_selection_keyboard(warehouses_with_slots)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã, —Å–∫–ª–∞–¥—ã –∏ —Å–ª–æ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            date_from=date_from_str,
            date_to=date_to_str,
            warehouses=warehouses_with_slots,
            available_slots=available_slots
        )
        await state.set_state(BookingStates.selecting_warehouse)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤:\n"
            f"<code>{escape_html(str(e))}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_supply")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


@router.callback_query(F.data == "back_to_supply")
async def back_to_supply_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await callback.message.edit_text(
            "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫...",
            parse_mode="HTML"
        )
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫
        from .supplies_management import show_supplies_menu
        await show_supplies_menu(callback, state)
        return
    
    supply_id = selected_supply.get("id")
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    supply_status = selected_supply.get("status", "unknown")
    created_at = selected_supply.get("createDate", "")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if created_at:
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = created_at
    
    await callback.message.edit_text(
        f"üì¶ <b>{supply_name}</b>\n\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {supply_status}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {formatted_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", callback_data=f"book_supply:{supply_id}")],
            [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤", callback_data=f"monitor_supply:{supply_id}")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"supply_details:{supply_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫", callback_data="view_supplies")]
        ])
    )


@router.callback_query(F.data == "auto_book_supply")
async def auto_book_supply_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    
    if not booking_supply_id:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    await state.update_data(
        date_from="2025-09-07",
        date_to="2025-09-14"
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
    from aiogram.types import CallbackQuery
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    new_callback = CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        message=callback.message,
        data=f"browser_book_supply:{booking_supply_id}",
        chat_instance=callback.chat_instance
    )
    
    await browser_book_supply(new_callback, state)


@router.callback_query(F.data.startswith("browser_book_supply:"))
async def browser_book_supply(callback: CallbackQuery, state: FSMContext):
    """–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º preorderId - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    preorder_id = selected_supply.get("preorderId") or selected_supply.get("preorderID") or selected_supply.get("preorder_id")
    
    # –ï—Å–ª–∏ preorderId –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º supply_id
    if not preorder_id:
        logger.warning(f"‚ö†Ô∏è preorderId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º supply_id")
        preorder_id = supply_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"select_date_{supply_id}_{preorder_id}")],
        [InlineKeyboardButton(text="üí∞ –í—ã–±—Ä–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data=f"select_coefficient_{supply_id}_{preorder_id}")],
        [InlineKeyboardButton(text="üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data=f"max_coeff_{supply_id}_{preorder_id}")],
        [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)", callback_data=f"quick_book_{supply_id}_{preorder_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
    ])
    
    await safe_edit_text(
        callback.message,
        f"üì¶ <b>–í–ê–†–ò–ê–ù–¢–´ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n\n"
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        f"üìÖ <b>–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É</b> - –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        f"üí∞ <b>–í—ã–±—Ä–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b> - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç 1 –¥–æ 20 –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        f"üìä <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\n"
        f"‚ö° <b>–ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —á–µ—Ä–µ–∑ 3 –¥–Ω—è",
        parse_mode="HTML",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)
@router.callback_query(F.data.startswith("quick_book_"))
async def quick_book_handler(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è."""
    parts = callback.data.split("_")
    supply_id = parts[2]
    preorder_id = parts[3]
    
    await _execute_booking(callback, state, supply_id, preorder_id, "quick")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
@router.callback_query(F.data.startswith("max_coeff_"))
async def max_coeff_handler(callback: CallbackQuery, state: FSMContext):
    """–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º."""
    parts = callback.data.split("_")
    supply_id = parts[2]
    preorder_id = parts[3]
    
    await _execute_booking(callback, state, supply_id, preorder_id, "max_coeff")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (–ø–æ–∫–∞–∑ –º–µ–Ω—é)
@router.callback_query(F.data.startswith("select_coefficient_"))
async def select_coefficient_handler(callback: CallbackQuery, state: FSMContext, multi_booking: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞."""
    if not multi_booking:
        parts = callback.data.split("_")
        supply_id = parts[2]
        preorder_id = parts[3]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            "booking_supply_id": supply_id,
            "booking_preorder_id": preorder_id
        })
    else:
        supply_id = "multi"
        preorder_id = "multi"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ 1-20
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ 1-10 (–ø–æ 5 –≤ —Ä—è–¥—É)
    for row_start in range(1, 11, 5):
        row = []
        for coeff in range(row_start, min(row_start + 5, 11)):
            row.append(InlineKeyboardButton(
                text=f"üìä {coeff}",
                callback_data=f"coeff_select_{coeff}_{supply_id}_{preorder_id}"
            ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ 11-20 (–ø–æ 5 –≤ —Ä—è–¥—É)
    for row_start in range(11, 21, 5):
        row = []
        for coeff in range(row_start, min(row_start + 5, 21)):
            row.append(InlineKeyboardButton(
                text=f"üìä {coeff}",
                callback_data=f"coeff_select_{coeff}_{supply_id}_{preorder_id}"
            ))
        keyboard.append(row)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –±—Ä–æ–Ω–∏ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0)
    keyboard.append([
        InlineKeyboardButton(
            text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—å",
            callback_data=f"coeff_select_0_{supply_id}_{preorder_id}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if multi_booking:
        keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_multi_booking")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"book_supply:{supply_id}")
        ])
    
    title = "üéØ –í—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" if multi_booking else "üìä –í—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"
    
    await callback.message.edit_text(
        f"{title}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏:\n"
        f"‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –¥–∞—Ç—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ‚â§ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
        f"‚Ä¢ –ß–µ–º –º–µ–Ω—å—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —Ç–µ–º –¥–µ—à–µ–≤–ª–µ\n"
        f"‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—å = –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–ø–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
@router.callback_query(F.data.startswith("select_date_"))
async def select_date_handler(callback: CallbackQuery, state: FSMContext, multi_booking: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not multi_booking:
        parts = callback.data.split("_")
        supply_id = parts[2]  
        preorder_id = parts[3]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            "booking_supply_id": supply_id,
            "booking_preorder_id": preorder_id
        })
    else:
        # –î–ª—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω—É–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π supply_id
        supply_id = "multi"
        preorder_id = "multi"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    current_date = datetime.now()
    calendar_markup = TelegramCalendar.create_calendar(
        year=current_date.year,
        month=current_date.month,
        supply_id=supply_id,
        preorder_id=preorder_id
    )
    
    calendar_text = TelegramCalendar.get_calendar_text(
        year=current_date.year,
        month=current_date.month
    )
    
    if multi_booking:
        calendar_text = f"üéØ <b>–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n{calendar_text}"
    
    await callback.message.edit_text(
        calendar_text,
        parse_mode="HTML",
        reply_markup=calendar_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.callback_query(F.data.startswith("calendar_"))
async def calendar_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    callback_data = callback.data
    parsed = parse_calendar_callback(callback_data)
    
    if not parsed or parsed[0] == "ignore":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ –¥–Ω–∏
        await callback.answer()
        return
    
    action_type = parsed[0]
    
    if action_type == "nav":
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        if len(parsed) >= 5:
            year, month, supply_id, preorder_id = parsed[1], parsed[2], parsed[3], parsed[4]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
            calendar_markup = TelegramCalendar.create_calendar(
                year=year,
                month=month,
                supply_id=supply_id,
                preorder_id=preorder_id
            )
            
            calendar_text = TelegramCalendar.get_calendar_text(year=year, month=month)
            
            await callback.message.edit_text(
                calendar_text,
                parse_mode="HTML",
                reply_markup=calendar_markup
            )
            await callback.answer()
    
    elif action_type == "select":
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        if len(parsed) >= 4:
            selected_date, supply_id, preorder_id = parsed[1], parsed[2], parsed[3]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            data = await state.get_data()
            selected_dates = data.get("selected_dates", [])
            if selected_date not in selected_dates:
                selected_dates.append(selected_date)
            await state.update_data(selected_dates=selected_dates, supply_id=supply_id, preorder_id=preorder_id)
            
            # –¢–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
            dates_text = "\n".join([f"‚Ä¢ {d}" for d in selected_dates]) if selected_dates else "‚Äî"
            
            # –ö–Ω–æ–ø–∫–∏: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∞—Ç—É, –≤—ã–±—Ä–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –æ—á–∏—Å—Ç–∏—Ç—å, –Ω–∞–∑–∞–¥
            next_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∞—Ç—É",
                    callback_data=f"select_date_{supply_id}_{preorder_id}"
                )],
                [InlineKeyboardButton(
                    text="üí∞ –í—ã–±—Ä–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
                    callback_data=f"coeff_after_dates_{supply_id}_{preorder_id}"
                )],
                [InlineKeyboardButton(
                    text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data=f"clear_dates_{supply_id}_{preorder_id}"
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º",
                    callback_data=f"browser_book_supply:{supply_id}"
                )]
            ])
            
            await callback.message.edit_text(
                f"üìÖ <b>–í–´–ë–†–ê–ù–ù–´–ï –î–ê–¢–´</b>\n\n"
                f"üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{supply_id}</code>\n"
                f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n\n"
                f"üìÖ <b>–°–ø–∏—Å–æ–∫ –¥–∞—Ç:</b>\n{dates_text}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–∞—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞.",
                parse_mode="HTML",
                reply_markup=next_keyboard
            )
            await callback.answer("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    else:
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
@router.callback_query(F.data.startswith("clear_dates_"))
async def clear_dates_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_")
    supply_id = parts[2]
    preorder_id = parts[3]
    
    await state.update_data(selected_dates=[])
    
    await callback.message.edit_text(
        f"üßπ –í—ã–±–æ—Ä –¥–∞—Ç –æ—á–∏—â–µ–Ω.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data=f"select_date_{supply_id}_{preorder_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º", callback_data=f"browser_book_supply:{supply_id}")]
        ]),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
@router.callback_query(F.data.startswith("coeff_after_dates_"))
async def coeff_after_dates_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    supply_id = parts[3]
    preorder_id = parts[4]
    
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    if not selected_dates:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (0-20)
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(
        text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (0)",
        callback_data=f"coeff_select_0_{supply_id}_{preorder_id}"
    )])
    coeff_buttons = []
    for i in range(1, 21):
        coeff_buttons.append(InlineKeyboardButton(
            text=f"{i}",
            callback_data=f"coeff_select_{i}_{supply_id}_{preorder_id}"
        ))
        if len(coeff_buttons) == 5:
            keyboard_buttons.append(coeff_buttons)
            coeff_buttons = []
    if coeff_buttons:
        keyboard_buttons.append(coeff_buttons)
    keyboard_buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º",
        callback_data=f"select_date_{supply_id}_{preorder_id}"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    dates_text = ", ".join(selected_dates)
    await callback.message.edit_text(
        f"üí∞ <b>–í–´–ë–û–† –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> <code>{supply_id}</code>\n"
        f"üìã <b>–ó–∞–∫–∞–∑:</b> <code>{preorder_id}</code>\n"
        f"üìÖ <b>–î–∞—Ç—ã:</b> {dates_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ö.",
        parse_mode="HTML",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
@router.callback_query(F.data.startswith("coeff_select_"))
async def coefficient_selected_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞."""
    parts = callback.data.split("_")
    coefficient = float(parts[2])
    supply_id = parts[3]
    preorder_id = parts[4]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –º—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ
    if supply_id == "multi" and preorder_id == "multi":
        # –ú—É–ª—å—Ç–∏–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ supplies_management
        from .supplies_management import _execute_multi_booking
        data = await state.get_data()
        selected_dates = data.get("selected_dates", [])
        
        if selected_dates:
            await _execute_multi_booking(
                callback, state, "coefficient_dates", coefficient=coefficient
            )
        else:
            await _execute_multi_booking(
                callback, state, "coefficient", coefficient=coefficient
            )
    else:
        # –û–±—ã—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏
        data = await state.get_data()
        selected_dates = data.get("selected_dates", [])
        
        if selected_dates:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã ‚Äî –±—Ä–æ–Ω–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
            await _execute_booking(
                callback, state, supply_id, preorder_id,
                "coefficient_dates", custom_date=None, coefficient=coefficient
            )
        else:
            # –ò–Ω–∞—á–µ ‚Äî —Å—Ç–∞—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–ø–æ–∏—Å–∫ –¥–∞—Ç—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º)
            await _execute_booking(
                callback, state, supply_id, preorder_id,
                "coefficient", custom_date=None, coefficient=coefficient
            )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
@router.callback_query(F.data.startswith("confirm_date_"))
async def confirm_date_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    parts = callback.data.split("_")
    selected_date = parts[2]  # DD.MM.YYYY
    supply_id = parts[3]
    preorder_id = parts[4]
    
    # –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï! –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏!
    # await state.clear()  # –£–ë–ò–†–ê–Æ –≠–¢–£ –°–¢–†–û–ö–£!
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    await _execute_booking(callback, state, supply_id, preorder_id, "custom", selected_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.message(F.text, StateFilter("waiting_for_custom_date"))
async def process_custom_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É."""
    user_date = message.text.strip()
    data = await state.get_data()
    supply_id = data.get("booking_supply_id")
    preorder_id = data.get("booking_preorder_id")
    
    if not supply_id or not preorder_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        from datetime import datetime, timedelta
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y']
        parsed_date = None
        
        for fmt in formats:
            try:
                parsed_date = datetime.strptime(user_date, fmt)
                break
            except ValueError:
                continue
        
        if not parsed_date:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                f"üîç –í—ã –≤–≤–µ–ª–∏: <code>{user_date}</code>\n\n"
                f"üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                f"‚Ä¢ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2024)\n"
                f"‚Ä¢ DD/MM/YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20/09/2024)\n"
                f"‚Ä¢ DD-MM-YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-09-2024)",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        tomorrow = datetime.now() + timedelta(days=1)
        if parsed_date.date() < tomorrow.date():
            await message.answer(
                f"‚ùå <b>–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω—è—è!</b>\n\n"
                f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏: <code>{parsed_date.strftime('%d.%m.%Y')}</code>\n"
                f"üìÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <code>{tomorrow.strftime('%d.%m.%Y')}</code>\n\n"
                f"‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
        await state.update_data({"custom_date": user_date})
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        fake_callback = type('FakeCallback', (), {
            'message': message,
            'from_user': message.from_user,
            'data': f"custom_date_{supply_id}_{preorder_id}"
        })()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        await _execute_booking(fake_callback, state, supply_id, preorder_id, "custom", user_date)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def _execute_booking(callback, state: FSMContext, supply_id: str, preorder_id: str, booking_type: str, custom_date: str = None, coefficient: float = None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API
        logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è supply_id: {supply_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from ...services.database_service import DatabaseService
            db_service = DatabaseService()
            api_keys = await db_service.get_decrypted_api_keys(user_id)
            
            if api_keys:
                api_key = api_keys[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á
                wb_api = WBSuppliesAPIClient(api_key)
                supplies = await wb_api.get_supplies()
                
                # –ò—â–µ–º –Ω—É–∂–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
                found_supply = None
                for supply in supplies:
                    if str(supply.get('id')) == str(supply_id) or str(supply.get('preorderID')) == str(preorder_id):
                        found_supply = supply
                        break
                
                if found_supply:
                    selected_supply = found_supply
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API: {found_supply}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    await state.update_data({"selected_supply": selected_supply})
                else:
                    await safe_edit_text(callback.message, f"‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API", parse_mode="HTML")
                    return
            else:
                await safe_edit_text(callback.message, "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
                return
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
            await safe_edit_text(callback.message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {str(e).replace('<', '&lt;').replace('>', '&gt;')}", parse_mode="HTML")
            return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    booking_type_text = {
        "quick": "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)",
        "max_coeff": "üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
        "custom": f"üìÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∞—Ç–∞: {custom_date}"
    }.get(booking_type, "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    await safe_edit_text(
        callback.message,
        f"ü§ñ <b>–ó–∞–ø—É—Å–∫–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n"
        f"üéØ –†–µ–∂–∏–º: {booking_type_text}\n\n"
        f"‚è≥ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
        
        if not browser or not browser.page:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.\n"
                f"–ë—Ä–∞—É–∑–µ—Ä: {browser is not None}\n"
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {browser.page is not None if browser else False}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è
        should_skip_login = await browser.should_skip_login()
        if should_skip_login:
            await callback.message.edit_text(
                f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...",
                parse_mode="HTML"
            )
        
        # –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ browser_manager, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not browser.page or browser.page.is_closed():
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞</b>\n\n"
                f"–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª–∏ —Ä–∞–Ω–µ–µ)
        if not should_skip_login:
            await callback.message.edit_text(
                f"ü§ñ <b>–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...",
                parse_mode="HTML"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_logged_in = await browser.check_if_logged_in()
        else:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –≤–∞–ª–∏–¥–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            is_logged_in = True
            await callback.message.edit_text(
                f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤–∫–∏...",
                parse_mode="HTML"
            )
        
        if not is_logged_in:
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏–Ω–∞
            await callback.message.edit_text(
                f"üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WB:\n"
                f"(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ +996500441234)",
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                supply_id=supply_id,
                supply_name=supply_name,
                preorder_id=preorder_id,
                selected_supply=selected_supply
            )
            await state.set_state(BookingStates.waiting_for_phone)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await callback.message.edit_text(
            f"‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"‚è≥ –ò—â—É –ø–æ—Å—Ç–∞–≤–∫—É –∏ –±—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if booking_type == "quick":
            # –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            booking_result = await browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(preorder_id),
                min_hours_ahead=80
            )
        elif booking_type == "max_coeff":
            # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
            booking_result = await browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(preorder_id),
                min_hours_ahead=80,
                use_max_coefficient=True
            )
        elif booking_type == "custom":
            # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–∞—Ç—É
            booking_result = await browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(preorder_id),
                min_hours_ahead=80,
                custom_date=custom_date
            )
        elif booking_type == "coefficient":
            # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
            booking_result = await browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(preorder_id),
                min_hours_ahead=80,
                target_coefficient=coefficient
            )
        elif booking_type == "coefficient_dates":
            # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
            data = await state.get_data()
            selected_dates = data.get("selected_dates", [])
            
            if not selected_dates:
                booking_result = {"success": False, "message": "‚ùå –î–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"}
            else:
                # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ browser_automation –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                booking_result = await browser.book_supply_by_id(
                    supply_id=str(supply_id),
                    preorder_id=str(preorder_id),
                    min_hours_ahead=80,
                    target_coefficient=coefficient,
                    selected_dates=selected_dates
                )
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            booking_result = await browser.book_supply_by_id(
                supply_id=str(supply_id),
                preorder_id=str(preorder_id),
                min_hours_ahead=80
            )
        
        booking_success = booking_result["success"]
        booking_message = booking_result["message"]
        booked_date = booking_result.get("booked_date")
        
        # –ü–û–õ–£–ß–ê–ï–ú –î–ï–¢–ê–õ–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
        booking_date = booking_result.get("booking_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        warehouse_name = booking_result.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        coefficient = booking_result.get("coefficient", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        new_supply_id = booking_result.get("new_supply_id")
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await browser.close_browser()
        
        if booking_success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ ID
            message_text = (
                f"üéâ <b>–ü–û–°–¢–ê–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üÜî –°—Ç–∞—Ä—ã–π ID: <code>{supply_id}</code>\n"
                f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            if new_supply_id and new_supply_id != str(supply_id):
                message_text += f"üÜî <b>–ù–æ–≤—ã–π ID –ø–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{new_supply_id}</code>\n"
            
            message_text += (
                f"\nüìÖ <b>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {booking_date}\n"
                f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
                f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coefficient}\n\n"
                f"‚úÖ {escape_html(booking_message)}"
            )
            
            await callback.message.edit_text(
                message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in booking_message:
                error_text = (
                    f"üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                    f"üì¶ <b>{supply_name}</b>\n"
                    f"‚ùå {escape_html(booking_message)}\n\n"
                    f"–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç WB —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
                )
                buttons = [
                    [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data="browser_booking")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ]
            elif "–ø–æ–ø—ã—Ç–æ–∫" in booking_message.lower():
                error_text = (
                    f"‚ö†Ô∏è <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å</b>\n\n"
                    f"üì¶ <b>{supply_name}</b>\n"
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∏: {booking_result.get('attempts', 0)}\n"
                    f"‚ùå {escape_html(booking_message)}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                )
                buttons = [
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ]
            else:
                error_text = (
                    f"‚ö†Ô∏è <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å</b>\n\n"
                    f"üì¶ <b>{supply_name}</b>\n"
                    f"‚ùå {escape_html(booking_message)}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                buttons = [
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ]
            
            await callback.message.edit_text(
                error_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç HTML —Ç–µ–≥–æ–≤
        import html
        error_text = html.escape(str(e))
        
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{error_text}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
            ])
        )


@router.callback_query(F.data.startswith("select_warehouse:"))
async def select_warehouse_for_booking(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–∫–ª–∞–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    warehouses = data.get("warehouses", [])
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
    selected_warehouse = None
    for warehouse in warehouses:
        if str(warehouse.get("id")) == warehouse_id:
            selected_warehouse = warehouse
            break
    
    if not selected_warehouse:
        await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    
    await callback.message.edit_text(
        f"üéØ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"auto_book:{warehouse_id}")],
            [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤", callback_data=f"monitor_slots:{warehouse_id}")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã —Å–µ–π—á–∞—Å", callback_data=f"check_slots:{warehouse_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥", callback_data=f"date_range:{date_from}:{date_to}")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
    await state.update_data(
        selected_warehouse=selected_warehouse,
        selected_warehouse_id=warehouse_id
    )


@router.callback_query(F.data.startswith("auto_book:"))
async def start_auto_booking(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    selected_warehouse = data.get("selected_warehouse")
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"ü§ñ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–≤–∏–¥–∏–º—ã–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
        
        if not browser:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        monitoring_sessions[user_id] = {
            "supply_id": booking_supply_id,
            "warehouse_id": warehouse_id,
            "date_from": date_from,
            "date_to": date_to,
            "status": "active"
        }
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!</b>\n\n"
            f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
            f"üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n"
            f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"<i>–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"stop_auto_book:{user_id}")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data=f"booking_status:{user_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        asyncio.create_task(auto_booking_task(user_id, callback.bot))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"<code>{escape_html(str(e))}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"auto_book:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


@router.callback_query(F.data.startswith("check_slots:"))
async def check_available_slots(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    selected_warehouse = data.get("selected_warehouse")
    
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç—ã...</b>\n\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ API WB...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
        from .callbacks import get_user_api_keys_list
        api_keys = await get_user_api_keys_list(user_id)
        if not api_keys:
            await callback.message.edit_text(
                "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=back_to_main_menu_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            slots = await api_client.get_available_slots(
                warehouse_id=int(warehouse_id),
                date_from=date_from,
                date_to=date_to
            )
        
        if not slots:
            await callback.message.edit_text(
                f"üì≠ <b>–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
                f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
                f"‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã –∏–ª–∏ —Å–∫–ª–∞–¥.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ", callback_data=f"monitor_slots:{warehouse_id}")],
                    [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ—Ç–∞–º–∏
        slots_text = ""
        for i, slot in enumerate(slots[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ—Ç–æ–≤
            date = slot.get("date", "")
            coefficient = slot.get("coefficient", 0)
            slots_text += f"üìÖ {date} - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}x\n"
        
        if len(slots) > 5:
            slots_text += f"\n... –∏ –µ—â–µ {len(slots) - 5} —Å–ª–æ—Ç–æ–≤"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã!</b>\n\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤:</b> {len(slots)}\n\n"
            f"{slots_text}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"auto_book:{warehouse_id}")],
                [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"monitor_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"check_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–∞—Ö:\n"
            f"<code>{escape_html(str(e))}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


async def auto_booking_task(user_id: int, bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    session = monitoring_sessions.get(user_id)
    if not session:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–≤–∏–¥–∏–º—ã–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
    if not browser:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    supply_id = session["supply_id"]
    warehouse_id = session["warehouse_id"]
    date_from = session["date_from"]
    date_to = session["date_to"]
    
    logger.info(f"ü§ñ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        while session.get("status") == "active":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ API
            user = await get_user_by_telegram_id(user_id)
            if not user or not user.api_key:
                break
                
            async with WBSuppliesAPIClient(api_keys[0]) as api_client:
                slots = await api_client.get_available_slots(
                    warehouse_id=int(warehouse_id),
                    date_from=date_from,
                    date_to=date_to
                )
            
            if slots:
                # –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã! –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                best_slot = slots[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                slot_date = best_slot.get("date")
                
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {slot_date}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ API
                booking_success = await api_client.create_supply_booking(
                    supply_id=supply_id,
                    warehouse_id=int(warehouse_id),
                    date=slot_date
                )
                
                if booking_success:
                    # –£—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!
                    await bot.send_message(
                        user_id,
                        f"üéâ <b>–ü–û–°–¢–ê–í–ö–ê –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê!</b>\n\n"
                        f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: {supply_id}\n"
                        f"üè¨ –°–∫–ª–∞–¥: {warehouse_id}\n"
                        f"üìÖ –î–∞—Ç–∞: {slot_date}\n"
                        f"‚ö° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best_slot.get('coefficient', 0)}x\n\n"
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
                        parse_mode="HTML"
                    )
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç {slot_date}")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(30)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(
            user_id,
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
            parse_mode="HTML"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in monitoring_sessions:
            del monitoring_sessions[user_id]
        await browser_manager.close_browser(user_id)
        
        logger.info(f"üî¥ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(F.data.startswith("stop_auto_book:"))
async def stop_auto_booking(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    user_id = int(callback.data.split(":")[1])
    
    if user_id in monitoring_sessions:
        monitoring_sessions[user_id]["status"] = "stopped"
        del monitoring_sessions[user_id]
        await browser_manager.close_browser(user_id)
        
        await callback.message.edit_text(
            "‚èπ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)


@router.callback_query(F.data.startswith("monitor_slots:"))
async def start_slots_monitoring(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    selected_warehouse = data.get("selected_warehouse")
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"üëÅ‚Äçüó® <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥\n"
        f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"<i>–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data=f"monitoring_status:{user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_sessions[user_id] = {
        "supply_id": booking_supply_id,
        "supply_name": supply_name,
        "warehouse_id": warehouse_id,
        "warehouse_name": warehouse_name,
        "date_from": date_from,
        "date_to": date_to,
        "status": "active",
        "last_slots": [],
        "notifications_sent": 0
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    asyncio.create_task(monitoring_task(user_id, callback.bot))


@router.callback_query(F.data.startswith("monitor_supply:"))
async def monitor_supply_directly(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
    from .callbacks import get_user_api_keys_list
    api_keys = await get_user_api_keys_list(user_id)
    if not api_keys:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"‚è≥ –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            warehouses = await api_client.get_warehouses()
            
            if warehouses:
                # –ë–µ—Ä–µ–º —Ç–æ–ø-30 —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã)
                top_warehouses = warehouses[:30]
                warehouse_ids = [w.get("id") for w in top_warehouses if w.get("id")]
                available_slots = await api_client.get_acceptance_coefficients(warehouse_ids)
            else:
                available_slots = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            wh_id = slot.get("warehouseID")
            if wh_id not in slots_by_warehouse:
                slots_by_warehouse[wh_id] = []
            slots_by_warehouse[wh_id].append(slot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
        monitoring_sessions[user_id] = {
            'supply_id': supply_id,
            'supply_name': supply_name,
            'warehouses': warehouses,
            'available_slots': available_slots,
            'slots_by_warehouse': slots_by_warehouse
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await show_supply_monitoring_page(callback.message, 0, supply_id, supply_name, warehouses, available_slots, slots_by_warehouse)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–∞—Ö.\n\n"
            f"–û—à–∏–±–∫–∞: <code>{escape_html(str(e))}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"monitor_supply:{supply_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
            ])
        )


async def show_supply_monitoring_page(message, page: int, supply_id: str, supply_name: str, warehouses, available_slots, slots_by_warehouse):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    warehouses_with_slots = [w for w in warehouses if w.get('id') in slots_by_warehouse]
    
    MONITORING_PER_PAGE = 5
    total_pages = (len(warehouses_with_slots) + MONITORING_PER_PAGE - 1) // MONITORING_PER_PAGE
    start_idx = page * MONITORING_PER_PAGE
    end_idx = min(start_idx + MONITORING_PER_PAGE, len(warehouses_with_slots))
    
    if available_slots:
        text = f"üéØ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        text += f"üì¶ <b>{supply_name}</b>\n"
        text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} (—Å–∫–ª–∞–¥–æ–≤ —Å–æ —Å–ª–æ—Ç–∞–º–∏: {len(warehouses_with_slots)})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–ª–∞–¥—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            warehouse = warehouses_with_slots[i]
            wh_id = warehouse.get('id')
            wh_name = warehouse.get('name', f'–°–∫–ª–∞–¥ #{wh_id}')
            
            slots = slots_by_warehouse.get(wh_id, [])
            text += f"üè¨ <b>{wh_name}</b>\n"
            text += f"   üéØ –°–ª–æ—Ç–æ–≤: {len(slots)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
            dates = [slot.get("date", "").split("T")[0] for slot in slots[:3]]
            if dates:
                text += f"   üìÖ –î–∞—Ç—ã: {', '.join(dates)}\n"
            
            text += "\n"
        
        text += "üí° <i>–ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞</i>"
    else:
        text = f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        text += f"üì¶ <b>{supply_name}</b>\n"
        text += f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
        text += f"–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
        text += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"monitor_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"monitor_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", callback_data=f"book_supply:{supply_id}")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"monitor_supply:{supply_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    await message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.callback_query(F.data.startswith("monitor_page:"))
async def show_monitor_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏."""
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
    
    page = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in monitoring_sessions:
        data = monitoring_sessions[user_id]
        supply_id = data['supply_id']
        supply_name = data['supply_name']
        warehouses = data['warehouses']
        available_slots = data['available_slots']
        slots_by_warehouse = data['slots_by_warehouse']
        
        await show_supply_monitoring_page(callback.message, page, supply_id, supply_name, warehouses, available_slots, slots_by_warehouse)
    else:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ", show_alert=True)


@router.callback_query(F.data == "browser_login")
async def browser_login_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ WB —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    await callback.answer()
    
    await callback.message.edit_text(
        f"üîê <b>–í—Ö–æ–¥ –≤ Wildberries</b>\n\n"
        f"–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç WB –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ SMS-–∫–æ–¥–æ–º\n"
        f"4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n\n"
        f"üí° –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîê –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="browser_booking")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
        ])
    )


async def monitoring_task(user_id: int, bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤."""
    session = monitoring_sessions.get(user_id)
    if not session:
        return
    
    supply_name = session["supply_name"]
    warehouse_name = session["warehouse_name"]
    warehouse_id = session["warehouse_id"]
    date_from = session["date_from"]
    date_to = session["date_to"]
    
    logger.info(f"üëÅ‚Äçüó® –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        while session.get("status") == "active":
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
            from .callbacks import get_user_api_keys_list
            api_keys = await get_user_api_keys_list(user_id)
            if not api_keys:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ API
            async with WBSuppliesAPIClient(api_keys[0]) as api_client:
                current_slots = await api_client.get_available_slots(
                    warehouse_id=int(warehouse_id),
                    date_from=date_from,
                    date_to=date_to
                )
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
            last_slots = session.get("last_slots", [])
            new_slots = []
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
            for slot in current_slots:
                slot_date = slot.get("date")
                slot_coefficient = slot.get("coefficient", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑
                was_present = any(
                    old_slot.get("date") == slot_date and 
                    old_slot.get("coefficient") == slot_coefficient
                    for old_slot in last_slots
                )
                
                if not was_present:
                    new_slots.append(slot)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if new_slots:
                slots_text = ""
                for slot in new_slots[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ—Ç–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                    date = slot.get("date", "")
                    coefficient = slot.get("coefficient", 0)
                    slots_text += f"üìÖ {date} - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}x\n"
                
                if len(new_slots) > 3:
                    slots_text += f"... –∏ –µ—â–µ {len(new_slots) - 3} —Å–ª–æ—Ç–æ–≤"
                
                await bot.send_message(
                    user_id,
                    f"üîî <b>–ù–û–í–´–ï –°–õ–û–¢–´ –ù–ê–ô–î–ï–ù–´!</b>\n\n"
                    f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
                    f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n\n"
                    f"‚ú® <b>–ù–æ–≤—ã–µ —Å–ª–æ—Ç—ã:</b>\n{slots_text}\n\n"
                    f"üéØ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(current_slots)} —Å–ª–æ—Ç–æ–≤",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="ü§ñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"auto_book:{warehouse_id}")],
                        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")]
                    ])
                )
                
                session["notifications_sent"] += 1
                logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_slots)} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∏ –ª–∏ —Å–ª–æ—Ç—ã
            disappeared_slots = []
            for old_slot in last_slots:
                old_date = old_slot.get("date")
                old_coefficient = old_slot.get("coefficient", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç —Å–µ–π—á–∞—Å
                still_present = any(
                    current_slot.get("date") == old_date and 
                    current_slot.get("coefficient") == old_coefficient
                    for current_slot in current_slots
                )
                
                if not still_present:
                    disappeared_slots.append(old_slot)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–ª–æ—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–æ—Ç–æ–≤)
            if disappeared_slots and len(last_slots) > 3:
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è <b>–°–ª–æ—Ç—ã –∏—Å—á–µ–∑–ª–∏</b>\n\n"
                    f"üì¶ {supply_name}\n"
                    f"üè¨ {warehouse_name}\n\n"
                    f"‚ùå –ò—Å—á–µ–∑–ª–æ —Å–ª–æ—Ç–æ–≤: {len(disappeared_slots)}\n"
                    f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {len(current_slots)}",
                    parse_mode="HTML"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            session["last_slots"] = current_slots
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(
            user_id,
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            parse_mode="HTML"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in monitoring_sessions:
            del monitoring_sessions[user_id]
        
        logger.info(f"üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(F.data.startswith("stop_monitoring:"))
async def stop_monitoring(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤."""
    user_id = int(callback.data.split(":")[1])
    
    session = monitoring_sessions.get(user_id)
    if session:
        session["status"] = "stopped"
        del monitoring_sessions[user_id]
        
        await callback.message.edit_text(
            "‚èπ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session.get('notifications_sent', 0)}\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data.startswith("monitoring_status:"))
async def show_monitoring_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_id = int(callback.data.split(":")[1])
    
    session = monitoring_sessions.get(user_id)
    if session:
        supply_name = session.get("supply_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        warehouse_name = session.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        notifications_sent = session.get("notifications_sent", 0)
        last_slots_count = len(session.get("last_slots", []))
        
        await callback.message.edit_text(
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {notifications_sent}\n"
            f"üìä <b>–¢–µ–∫—É—â–∏—Ö —Å–ª–æ—Ç–æ–≤:</b> {last_slots_count}\n\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ~60 —Å–µ–∫—É–Ω–¥",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"monitoring_status:{user_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.message(BookingStates.waiting_for_phone)
async def process_phone_for_booking(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info(f"üîç BOOKING: Processing phone from user {message.from_user.id}: {message.text}")
    user_id = message.from_user.id
    phone = message.text.strip()
    
    if phone.startswith('/'):
        return
    
    if not phone.startswith("+") or len(phone) < 10:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567 –∏–ª–∏ +996500441234"
        )
        return
    
    browser = await browser_manager.get_browser(user_id)
    if not browser:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    data = await state.get_data()
    supply_name = data.get("supply_name", "–ü–æ—Å—Ç–∞–≤–∫–∞")
    
    loading_msg = await message.answer(
        f"‚è≥ –í–≤–æ–∂—É –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º—É WB –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_name}..."
    )
    
    try:
        success = await browser.login_step1_phone(phone)
        
        if success:
            await loading_msg.edit_text(
                f"‚úÖ <b>–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –≤ —Ñ–æ—Ä–º—É WB!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üì± –ù–æ–º–µ—Ä: {phone[:4]}****{phone[-2:]}\n"
                f"üì® –°–ú–° –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
                f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:"
            )
            
            await state.update_data(phone=phone)
            await state.set_state(BookingStates.waiting_for_sms_code)
        else:
            await loading_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º—É WB.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{data.get('supply_id')}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            await state.clear()
        
    except Exception as e:
        logger.error(f"Error during phone input for booking: {e}")
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_name}.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{data.get('supply_id')}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
            ])
        )


@router.message(BookingStates.waiting_for_sms_code)
async def process_sms_code_for_booking(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –°–ú–° –∫–æ–¥–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = message.from_user.id
    code = message.text.strip()
    
    if code.startswith('/'):
        return
    
    browser = await browser_manager.get_browser(user_id)
    if not browser:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞.")
        await state.clear()
        return
    
    data = await state.get_data()
    supply_name = data.get("supply_name", "–ü–æ—Å—Ç–∞–≤–∫–∞")
    supply_id = data.get("supply_id")
    preorder_id = data.get("preorder_id")
    
    if not code.isdigit() or len(code) < 4 or len(code) > 6:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ 4-6 —Ü–∏—Ñ—Ä –∏–∑ –°–ú–°."
        )
        return
    
    loading_msg = await message.answer(
        f"üîê –í–≤–æ–∂—É –°–ú–° –∫–æ–¥ –≤ —Ñ–æ—Ä–º—É WB –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_name}...\n"
        f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ö–æ–¥..."
    )
    
    try:
        result = await browser.login_step2_sms(code)
        
        if result == "email_required":
            await loading_msg.edit_text(
                f"üìß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ email</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"WB —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n\n"
                f"üìã <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                f"1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n"
                f"2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –ø–∏—Å—å–º–æ –æ—Ç Wildberries\n"
                f"3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –ø–∏—Å—å–º–µ\n"
                f"4Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
                f"‚ö†Ô∏è –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            await state.clear()
        elif result:
            await loading_msg.edit_text(
                f"‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤–∫–∏...",
                parse_mode="HTML"
            )
            
            try:
                await browser.navigate_to_supplies_page()
                await asyncio.sleep(2)
                
                booking_result = await browser.book_supply_by_id(preorder_id, min_hours_ahead=80)
                
                if booking_result and booking_result.get("success"):
                    await loading_msg.edit_text(
                        f"üéâ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                        f"üì¶ <b>{supply_name}</b>\n"
                        f"üÜî ID: <code>{supply_id}</code>\n"
                        f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n"
                        f"üìÖ –î–∞—Ç–∞: {booking_result.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                        f"üè¨ –°–∫–ª–∞–¥: {booking_result.get('warehouse', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="view_supplies")],
                            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                        ])
                    )
                else:
                    error_msg = booking_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if booking_result else "–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                    await loading_msg.edit_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                        f"üì¶ <b>{supply_name}</b>\n"
                        f"üí• {error_msg}",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                        ])
                    )
                    
            except Exception as e:
                logger.error(f"Error during booking after login: {e}")
                await loading_msg.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                    f"üì¶ <b>{supply_name}</b>\n"
                    f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{escape_html(str(e))}</code>",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                    ])
                )
            
            await state.clear()
        else:
            await loading_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            await state.clear()
        
    except Exception as e:
        logger.error(f"Error during SMS input for booking: {e}")
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ SMS –∫–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_name}.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
            ])
        )
