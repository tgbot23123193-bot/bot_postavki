"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from typing import List, Dict, Any
import asyncio

from ...utils.logger import get_logger
from ...services.wb_supplies_api import WBSuppliesAPIClient
from ...services.browser_automation import WBBrowserAutomationPro
from .callbacks import user_api_keys
from ..keyboards.inline import back_to_main_menu_keyboard

logger = get_logger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
booking_browser_sessions = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤
monitoring_sessions = {}


class BookingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫."""
    selecting_warehouse = State()
    selecting_dates = State()
    confirming_booking = State()
    monitoring_slots = State()


def create_date_range_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""
    today = datetime.now()
    keyboard = []
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    date_ranges = [
        ("üìÖ –°–µ–≥–æ–¥–Ω—è", today, today),
        ("üìÖ –ó–∞–≤—Ç—Ä–∞", today + timedelta(days=1), today + timedelta(days=1)),
        ("üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", today, today + timedelta(days=7)),
        ("üìÖ –ù–∞ –º–µ—Å—è—Ü", today, today + timedelta(days=30))
    ]
    
    for text, date_from, date_to in date_ranges:
        keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"date_range:{date_from.strftime('%Y-%m-%d')}:{date_to.strftime('%Y-%m-%d')}"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="custom_dates")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_book_supply")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_warehouse_selection_keyboard(warehouses: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞."""
    keyboard = []
    
    for warehouse in warehouses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–∫–ª–∞–¥–æ–≤
        warehouse_id = warehouse.get("id", "")
        warehouse_name = warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = warehouse_name[:40]
        if len(warehouse_name) > 40:
            display_name += "..."
            
        keyboard.append([
            InlineKeyboardButton(
                text=f"üè¨ {display_name}",
                callback_data=f"select_warehouse:{warehouse_id}"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã", callback_data="show_all_warehouses")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("book_supply:"))
async def start_booking_process(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    await callback.message.edit_text(
        f"üéØ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID: <code>{supply_id}</code>\n\n"
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=create_date_range_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(booking_supply_id=supply_id)
    await state.set_state(BookingStates.selecting_dates)


@router.callback_query(F.data.startswith("date_range:"))
async def process_date_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""
    _, date_from_str, date_to_str = callback.data.split(":")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_keys = user_api_keys.get(user_id, [])
    if not api_keys:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
        f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–∞—Ö...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            warehouses = await api_client.get_warehouses()
            
            if warehouses:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è —Ç–æ–ø-25 —Å–∫–ª–∞–¥–æ–≤ (–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                top_warehouses = warehouses[:25]
                warehouse_ids = [w.get("id") for w in top_warehouses if w.get("id")]
                available_slots = await api_client.get_acceptance_coefficients(warehouse_ids)
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
            else:
                available_slots = []
            
        if not warehouses:
            await callback.message.edit_text(
                "‚ùå <b>–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–ª–∞–¥—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        warehouses_with_slots = []
        if available_slots:
            slot_warehouse_ids = set(slot.get("warehouseID") for slot in available_slots)
            warehouses_with_slots = [w for w in warehouses if w.get("id") in slot_warehouse_ids]
        
        if not warehouses_with_slots:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
                f"‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–∏–µ –¥–∞—Ç—ã", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        await callback.message.edit_text(
            f"üè¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses_with_slots)}\n"
            f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(available_slots)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏:",
            parse_mode="HTML",
            reply_markup=create_warehouse_selection_keyboard(warehouses_with_slots)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã, —Å–∫–ª–∞–¥—ã –∏ —Å–ª–æ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            date_from=date_from_str,
            date_to=date_to_str,
            warehouses=warehouses_with_slots,
            available_slots=available_slots
        )
        await state.set_state(BookingStates.selecting_warehouse)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤:\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_supply")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


@router.callback_query(F.data == "auto_book_supply")
async def auto_book_supply_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    
    if not booking_supply_id:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    await state.update_data(
        date_from="2025-09-07",
        date_to="2025-09-14"
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
    from aiogram.types import CallbackQuery
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    new_callback = CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        message=callback.message,
        data=f"browser_book_supply:{booking_supply_id}",
        chat_instance=callback.chat_instance
    )
    
    await browser_book_supply(new_callback, state)


@router.callback_query(F.data.startswith("browser_book_supply:"))
async def browser_book_supply(callback: CallbackQuery, state: FSMContext):
    """–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    date_from = data.get("date_from", "2025-09-07")
    date_to = data.get("date_to", "2025-09-14")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    preorder_id = selected_supply.get("preorderID")
    
    await callback.message.edit_text(
        f"ü§ñ <b>–ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"üÜî ID: <code>{supply_id}</code>\n"
        f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}\n\n"
        f"‚è≥ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥...",
        parse_mode="HTML"
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        browser = WBBrowserAutomationPro(headless=False, debug_mode=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if not await browser.start_browser():
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await callback.message.edit_text(
            f"ü§ñ <b>–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...",
            parse_mode="HTML"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_logged_in = await browser.check_if_logged_in()
        
        if not is_logged_in:
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            await callback.message.edit_text(
                f"üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ WB\n\n"
                f"üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä:\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏ –≤ WB'\n"
                f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ SMS-–∫–æ–¥\n"
                f"3. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ WB", callback_data="browser_login")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
                ])
            )
            await browser.close_browser()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await callback.message.edit_text(
            f"‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"‚è≥ –ò—â—É –ø–æ—Å—Ç–∞–≤–∫—É –∏ –±—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏
        booking_success = await browser.book_supply(
            supply_id=str(supply_id),
            preorder_id=str(preorder_id),
            date_from=date_from,
            date_to=date_to
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await browser.close_browser()
        
        if booking_success:
            await callback.message.edit_text(
                f"üéâ <b>–ü–û–°–¢–ê–í–ö–ê –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê!</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"üÜî ID: <code>{supply_id}</code>\n"
                f"üìã –ó–∞–∫–∞–∑: <code>{preorder_id}</code>\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}\n\n"
                f"‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å</b>\n\n"
                f"üì¶ <b>{supply_name}</b>\n"
                f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–∏–µ –¥–∞—Ç—ã", callback_data=f"book_supply:{supply_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"browser_book_supply:{supply_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
            ])
        )


@router.callback_query(F.data.startswith("select_warehouse:"))
async def select_warehouse_for_booking(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–∫–ª–∞–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    warehouses = data.get("warehouses", [])
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
    selected_warehouse = None
    for warehouse in warehouses:
        if str(warehouse.get("id")) == warehouse_id:
            selected_warehouse = warehouse
            break
    
    if not selected_warehouse:
        await callback.answer("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    
    await callback.message.edit_text(
        f"üéØ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"auto_book:{warehouse_id}")],
            [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤", callback_data=f"monitor_slots:{warehouse_id}")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã —Å–µ–π—á–∞—Å", callback_data=f"check_slots:{warehouse_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥", callback_data=f"date_range:{date_from}:{date_to}")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
    await state.update_data(
        selected_warehouse=selected_warehouse,
        selected_warehouse_id=warehouse_id
    )


@router.callback_query(F.data.startswith("auto_book:"))
async def start_auto_booking(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    selected_warehouse = data.get("selected_warehouse")
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"ü§ñ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
        parse_mode="HTML"
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        browser = WBBrowserAutomationPro(headless=True, debug_mode=False)
        success = await browser.start_browser(headless=True)
        
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é
        booking_browser_sessions[user_id] = {
            "browser": browser,
            "supply_id": booking_supply_id,
            "warehouse_id": warehouse_id,
            "date_from": date_from,
            "date_to": date_to,
            "status": "active"
        }
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!</b>\n\n"
            f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
            f"üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n"
            f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"<i>–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"stop_auto_book:{user_id}")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data=f"booking_status:{user_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        asyncio.create_task(auto_booking_task(user_id, callback.bot))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"auto_book:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


@router.callback_query(F.data.startswith("check_slots:"))
async def check_available_slots(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    selected_warehouse = data.get("selected_warehouse")
    
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç—ã...</b>\n\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ API WB...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_keys = user_api_keys.get(user_id, [])
        if not api_keys:
            await callback.message.edit_text(
                "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=back_to_main_menu_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            slots = await api_client.get_available_slots(
                warehouse_id=int(warehouse_id),
                date_from=date_from,
                date_to=date_to
            )
        
        if not slots:
            await callback.message.edit_text(
                f"üì≠ <b>–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
                f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
                f"‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã –∏–ª–∏ —Å–∫–ª–∞–¥.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ", callback_data=f"monitor_slots:{warehouse_id}")],
                    [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã", callback_data="back_to_supply")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ—Ç–∞–º–∏
        slots_text = ""
        for i, slot in enumerate(slots[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ—Ç–æ–≤
            date = slot.get("date", "")
            coefficient = slot.get("coefficient", 0)
            slots_text += f"üìÖ {date} - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}x\n"
        
        if len(slots) > 5:
            slots_text += f"\n... –∏ –µ—â–µ {len(slots) - 5} —Å–ª–æ—Ç–æ–≤"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã!</b>\n\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤:</b> {len(slots)}\n\n"
            f"{slots_text}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"auto_book:{warehouse_id}")],
                [InlineKeyboardButton(text="üëÅ‚Äçüó® –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"monitor_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"check_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–∞—Ö:\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_slots:{warehouse_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )


async def auto_booking_task(user_id: int, bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    session = booking_browser_sessions.get(user_id)
    if not session:
        return
    
    browser = session["browser"]
    supply_id = session["supply_id"]
    warehouse_id = session["warehouse_id"]
    date_from = session["date_from"]
    date_to = session["date_to"]
    
    logger.info(f"ü§ñ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        while session.get("status") == "active":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ API
            user = await get_user_by_telegram_id(user_id)
            if not user or not user.api_key:
                break
                
            async with WBSuppliesAPIClient(api_keys[0]) as api_client:
                slots = await api_client.get_available_slots(
                    warehouse_id=int(warehouse_id),
                    date_from=date_from,
                    date_to=date_to
                )
            
            if slots:
                # –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã! –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                best_slot = slots[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                slot_date = best_slot.get("date")
                
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {slot_date}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ API
                booking_success = await api_client.create_supply_booking(
                    supply_id=supply_id,
                    warehouse_id=int(warehouse_id),
                    date=slot_date
                )
                
                if booking_success:
                    # –£—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!
                    await bot.send_message(
                        user_id,
                        f"üéâ <b>–ü–û–°–¢–ê–í–ö–ê –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê!</b>\n\n"
                        f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: {supply_id}\n"
                        f"üè¨ –°–∫–ª–∞–¥: {warehouse_id}\n"
                        f"üìÖ –î–∞—Ç–∞: {slot_date}\n"
                        f"‚ö° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best_slot.get('coefficient', 0)}x\n\n"
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
                        parse_mode="HTML"
                    )
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç {slot_date}")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(30)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(
            user_id,
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
            parse_mode="HTML"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in booking_browser_sessions:
            try:
                await booking_browser_sessions[user_id]["browser"].close_browser()
            except:
                pass
            del booking_browser_sessions[user_id]
        
        logger.info(f"üî¥ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(F.data.startswith("stop_auto_book:"))
async def stop_auto_booking(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    user_id = int(callback.data.split(":")[1])
    
    session = booking_browser_sessions.get(user_id)
    if session:
        session["status"] = "stopped"
        try:
            await session["browser"].close_browser()
        except:
            pass
        del booking_browser_sessions[user_id]
        
        await callback.message.edit_text(
            "‚èπ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)


@router.callback_query(F.data.startswith("monitor_slots:"))
async def start_slots_monitoring(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    warehouse_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    booking_supply_id = data.get("booking_supply_id")
    selected_supply = data.get("selected_supply")
    selected_warehouse = data.get("selected_warehouse")
    date_from = data.get("date_from")
    date_to = data.get("date_to")
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{booking_supply_id}")
    warehouse_name = selected_warehouse.get("name", f"–°–∫–ª–∞–¥ #{warehouse_id}")
    
    await callback.message.edit_text(
        f"üëÅ‚Äçüó® <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
        f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {date_from} - {date_to}\n\n"
        f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥\n"
        f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"<i>–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data=f"monitoring_status:{user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_sessions[user_id] = {
        "supply_id": booking_supply_id,
        "supply_name": supply_name,
        "warehouse_id": warehouse_id,
        "warehouse_name": warehouse_name,
        "date_from": date_from,
        "date_to": date_to,
        "status": "active",
        "last_slots": [],
        "notifications_sent": 0
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    asyncio.create_task(monitoring_task(user_id, callback.bot))


@router.callback_query(F.data.startswith("monitor_supply:"))
async def monitor_supply_directly(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏."""
    supply_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_supply = data.get("selected_supply")
    
    if not selected_supply:
        await callback.answer("‚ùå –ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    supply_name = selected_supply.get("name", f"–ü–æ—Å—Ç–∞–≤–∫–∞ #{supply_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_keys = user_api_keys.get(user_id, [])
    if not api_keys:
        await callback.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        f"üì¶ <b>{supply_name}</b>\n"
        f"‚è≥ –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        async with WBSuppliesAPIClient(api_keys[0]) as api_client:
            warehouses = await api_client.get_warehouses()
            
            if warehouses:
                # –ë–µ—Ä–µ–º —Ç–æ–ø-30 —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã)
                top_warehouses = warehouses[:30]
                warehouse_ids = [w.get("id") for w in top_warehouses if w.get("id")]
                available_slots = await api_client.get_acceptance_coefficients(warehouse_ids)
            else:
                available_slots = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            wh_id = slot.get("warehouseID")
            if wh_id not in slots_by_warehouse:
                slots_by_warehouse[wh_id] = []
            slots_by_warehouse[wh_id].append(slot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
        monitoring_sessions[user_id] = {
            'supply_id': supply_id,
            'supply_name': supply_name,
            'warehouses': warehouses,
            'available_slots': available_slots,
            'slots_by_warehouse': slots_by_warehouse
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await show_supply_monitoring_page(callback.message, 0, supply_id, supply_name, warehouses, available_slots, slots_by_warehouse)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üì¶ <b>{supply_name}</b>\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–∞—Ö.\n\n"
            f"–û—à–∏–±–∫–∞: <code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"monitor_supply:{supply_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
            ])
        )


async def show_supply_monitoring_page(message, page: int, supply_id: str, supply_name: str, warehouses, available_slots, slots_by_warehouse):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    warehouses_with_slots = [w for w in warehouses if w.get('id') in slots_by_warehouse]
    
    MONITORING_PER_PAGE = 5
    total_pages = (len(warehouses_with_slots) + MONITORING_PER_PAGE - 1) // MONITORING_PER_PAGE
    start_idx = page * MONITORING_PER_PAGE
    end_idx = min(start_idx + MONITORING_PER_PAGE, len(warehouses_with_slots))
    
    if available_slots:
        text = f"üéØ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        text += f"üì¶ <b>{supply_name}</b>\n"
        text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} (—Å–∫–ª–∞–¥–æ–≤ —Å–æ —Å–ª–æ—Ç–∞–º–∏: {len(warehouses_with_slots)})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–ª–∞–¥—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            warehouse = warehouses_with_slots[i]
            wh_id = warehouse.get('id')
            wh_name = warehouse.get('name', f'–°–∫–ª–∞–¥ #{wh_id}')
            
            slots = slots_by_warehouse.get(wh_id, [])
            text += f"üè¨ <b>{wh_name}</b>\n"
            text += f"   üéØ –°–ª–æ—Ç–æ–≤: {len(slots)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
            dates = [slot.get("date", "").split("T")[0] for slot in slots[:3]]
            if dates:
                text += f"   üìÖ –î–∞—Ç—ã: {', '.join(dates)}\n"
            
            text += "\n"
        
        text += "üí° <i>–ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞</i>"
    else:
        text = f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        text += f"üì¶ <b>{supply_name}</b>\n"
        text += f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
        text += f"–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
        text += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"monitor_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"monitor_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", callback_data=f"book_supply:{supply_id}")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"monitor_supply:{supply_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data="back_to_supply")]
    ])
    
    await message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.callback_query(F.data.startswith("monitor_page:"))
async def show_monitor_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤–∫–∏."""
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
    
    page = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in monitoring_sessions:
        data = monitoring_sessions[user_id]
        supply_id = data['supply_id']
        supply_name = data['supply_name']
        warehouses = data['warehouses']
        available_slots = data['available_slots']
        slots_by_warehouse = data['slots_by_warehouse']
        
        await show_supply_monitoring_page(callback.message, page, supply_id, supply_name, warehouses, available_slots, slots_by_warehouse)
    else:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ", show_alert=True)


@router.callback_query(F.data == "browser_login")
async def browser_login_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ WB —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    await callback.answer()
    
    await callback.message.edit_text(
        f"üîê <b>–í—Ö–æ–¥ –≤ Wildberries</b>\n\n"
        f"–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç WB –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ SMS-–∫–æ–¥–æ–º\n"
        f"4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n\n"
        f"üí° –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîê –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="browser_booking")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_supply")]
        ])
    )


async def monitoring_task(user_id: int, bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤."""
    session = monitoring_sessions.get(user_id)
    if not session:
        return
    
    supply_name = session["supply_name"]
    warehouse_name = session["warehouse_name"]
    warehouse_id = session["warehouse_id"]
    date_from = session["date_from"]
    date_to = session["date_to"]
    
    logger.info(f"üëÅ‚Äçüó® –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        while session.get("status") == "active":
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            api_keys = user_api_keys.get(user_id, [])
            if not api_keys:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ API
            async with WBSuppliesAPIClient(api_keys[0]) as api_client:
                current_slots = await api_client.get_available_slots(
                    warehouse_id=int(warehouse_id),
                    date_from=date_from,
                    date_to=date_to
                )
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
            last_slots = session.get("last_slots", [])
            new_slots = []
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
            for slot in current_slots:
                slot_date = slot.get("date")
                slot_coefficient = slot.get("coefficient", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑
                was_present = any(
                    old_slot.get("date") == slot_date and 
                    old_slot.get("coefficient") == slot_coefficient
                    for old_slot in last_slots
                )
                
                if not was_present:
                    new_slots.append(slot)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if new_slots:
                slots_text = ""
                for slot in new_slots[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ—Ç–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                    date = slot.get("date", "")
                    coefficient = slot.get("coefficient", 0)
                    slots_text += f"üìÖ {date} - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}x\n"
                
                if len(new_slots) > 3:
                    slots_text += f"... –∏ –µ—â–µ {len(new_slots) - 3} —Å–ª–æ—Ç–æ–≤"
                
                await bot.send_message(
                    user_id,
                    f"üîî <b>–ù–û–í–´–ï –°–õ–û–¢–´ –ù–ê–ô–î–ï–ù–´!</b>\n\n"
                    f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
                    f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n\n"
                    f"‚ú® <b>–ù–æ–≤—ã–µ —Å–ª–æ—Ç—ã:</b>\n{slots_text}\n\n"
                    f"üéØ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(current_slots)} —Å–ª–æ—Ç–æ–≤",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="ü§ñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"auto_book:{warehouse_id}")],
                        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")]
                    ])
                )
                
                session["notifications_sent"] += 1
                logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_slots)} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∏ –ª–∏ —Å–ª–æ—Ç—ã
            disappeared_slots = []
            for old_slot in last_slots:
                old_date = old_slot.get("date")
                old_coefficient = old_slot.get("coefficient", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç —Å–µ–π—á–∞—Å
                still_present = any(
                    current_slot.get("date") == old_date and 
                    current_slot.get("coefficient") == old_coefficient
                    for current_slot in current_slots
                )
                
                if not still_present:
                    disappeared_slots.append(old_slot)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–ª–æ—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–æ—Ç–æ–≤)
            if disappeared_slots and len(last_slots) > 3:
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è <b>–°–ª–æ—Ç—ã –∏—Å—á–µ–∑–ª–∏</b>\n\n"
                    f"üì¶ {supply_name}\n"
                    f"üè¨ {warehouse_name}\n\n"
                    f"‚ùå –ò—Å—á–µ–∑–ª–æ —Å–ª–æ—Ç–æ–≤: {len(disappeared_slots)}\n"
                    f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {len(current_slots)}",
                    parse_mode="HTML"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            session["last_slots"] = current_slots
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(
            user_id,
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            parse_mode="HTML"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in monitoring_sessions:
            del monitoring_sessions[user_id]
        
        logger.info(f"üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(F.data.startswith("stop_monitoring:"))
async def stop_monitoring(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤."""
    user_id = int(callback.data.split(":")[1])
    
    session = monitoring_sessions.get(user_id)
    if session:
        session["status"] = "stopped"
        del monitoring_sessions[user_id]
        
        await callback.message.edit_text(
            "‚èπ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session.get('notifications_sent', 0)}\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data.startswith("monitoring_status:"))
async def show_monitoring_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    user_id = int(callback.data.split(":")[1])
    
    session = monitoring_sessions.get(user_id)
    if session:
        supply_name = session.get("supply_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        warehouse_name = session.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        notifications_sent = session.get("notifications_sent", 0)
        last_slots_count = len(session.get("last_slots", []))
        
        await callback.message.edit_text(
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {supply_name}\n"
            f"üè¨ <b>–°–∫–ª–∞–¥:</b> {warehouse_name}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {notifications_sent}\n"
            f"üìä <b>–¢–µ–∫—É—â–∏—Ö —Å–ª–æ—Ç–æ–≤:</b> {last_slots_count}\n\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ~60 —Å–µ–∫—É–Ω–¥",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_monitoring:{user_id}")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"monitoring_status:{user_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç–∞–≤–∫–∞–º", callback_data="view_supplies")]
            ])
        )
    else:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
