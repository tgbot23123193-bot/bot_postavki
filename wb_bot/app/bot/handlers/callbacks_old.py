"""
General callback handlers for the bot.

This module contains handlers for various callback queries that don't
belong to specific modules like monitoring or API keys.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from ..keyboards.inline import MainMenuCallback, get_main_menu

router = Router()


@router.callback_query(MainMenuCallback.filter(F.action == "monitoring"))
async def show_monitoring_menu(callback: CallbackQuery):
    """Show monitoring main menu."""
    from ..keyboards.inline import get_monitoring_menu
    
    await callback.message.edit_text(
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∫–ª–∞–¥—Å–∫–∏—Ö —Å–ª–æ—Ç–æ–≤ Wildberries.\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
        "–æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_monitoring_menu()
    )
    await callback.answer()


@router.callback_query(MainMenuCallback.filter(F.action == "api_keys"))
async def show_api_keys_menu(callback: CallbackQuery):
    """Show API keys main menu."""
    try:
        # –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="test_add_key")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="test_list_keys")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="test_back")]
        ])
        
        api_keys_text = (
            "üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏</b>\n\n"
            "API –∫–ª—é—á–∏ Wildberries –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ—Å—Ç–∞–≤–æ–∫.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 5 –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.\n\n"
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –í—Å–µ –∫–ª—é—á–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(
            api_keys_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "test_add_key")
async def test_add_key_handler(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞."""
    await callback.answer("üîë –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)


@router.callback_query(F.data == "test_list_keys")
async def test_list_keys_handler(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π."""
    await callback.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π", show_alert=True)


@router.callback_query(F.data == "test_back")
async def test_back_handler(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Auto-Booking Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(MainMenuCallback.filter(F.action == "settings"))
async def show_settings_menu(callback: CallbackQuery):
    """Show settings menu."""
    try:
        # –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", callback_data="test_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="test_back")]
        ])
        
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            "–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "test_settings")
async def test_settings_handler(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(MainMenuCallback.filter(F.action == "stats"))
async def show_detailed_stats(callback: CallbackQuery):
    """Show detailed user statistics."""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="test_back")]
        ])
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: 0\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: 0\n"
            "‚Ä¢ API –∫–ª—é—á–µ–π: 0\n"
            "‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —Å–µ–≥–æ–¥–Ω—è\n\n"
            "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π."
        )
        
        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    # Calculate success rates
    booking_success_rate = 0
    if total_successful_bookings + total_failed_bookings > 0:
        booking_success_rate = (total_successful_bookings / (total_successful_bookings + total_failed_bookings)) * 100
    
    stats_text = (
        f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üíé Premium' if user.is_premium else f'üéÅ –ü—Ä–æ–±–Ω—ã–π ({user.trial_bookings}/2)'}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
        
        f"üîë <b>API –∫–ª—é—á–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {api_stats['total_keys']}/5\n"
        f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö: {api_stats['valid_keys']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {api_stats['total_requests']}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {api_stats['success_rate']:.1%}\n\n"
        
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_tasks}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}\n"
        f"‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {paused_tasks}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {total_slots_found}\n\n"
        
        f"üéØ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_successful_bookings + total_failed_bookings}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful_bookings}\n"
        f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_failed_bookings}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {booking_success_rate:.1f}%\n\n"
    )
    
    if booking_stats['average_coefficient'] > 0:
        stats_text += f"üìà <b>–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {booking_stats['average_coefficient']:.2f}x\n\n"
    
    # Get monitoring service metrics
    monitoring_metrics = monitoring_service.get_metrics()
    if monitoring_metrics['last_check_time']:
        stats_text += (
            f"üîÑ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {monitoring_metrics['last_check_time'].strftime('%H:%M:%S')}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {monitoring_metrics['total_checks']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {monitoring_metrics['successful_checks']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {monitoring_metrics['failed_checks']}\n"
        )
    
    from ..keyboards.inline import get_back_button
    
    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=get_back_button("main_menu")
    )


@router.callback_query(MainMenuCallback.filter(F.action == "help"))
async def show_help_menu(callback: CallbackQuery):
    """Show help and support menu."""
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        
        "<b>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á Wildberries\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n"
        "4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ—Ç–∞—Ö\n\n"
        
        "<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤\n"
        "‚Ä¢ üîë API –∫–ª—é—á–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ WB\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
        
        "<b>üéØ –†–µ–∂–∏–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
        "‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—å\n\n"
        
        "<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏—Ö —Å–ª–æ—Ç–æ–≤\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π\n"
        "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n"
        
        "<b>üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ @support_username"
    )
    
    from ..keyboards.inline import get_back_button
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_back_button("main_menu")
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """Return to main menu."""
    menu_text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        menu_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """Handle ignore callbacks (for non-interactive buttons)."""
    await callback.answer()


# Error handler for unhandled callbacks
@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    """Handle unknown callback queries."""
    await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
