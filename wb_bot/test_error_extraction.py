#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑ WB.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.services.browser_manager import BrowserManager
from app.services.redistribution_service import get_redistribution_service
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def test_error_extraction(user_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–∑ WB."""
    await init_database()
    
    try:
        browser_manager = BrowserManager()
        redistribution_service = get_redistribution_service(browser_manager, fast_mode=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        browser = await browser_manager.get_browser(user_id, headless=False, debug_mode=True)
        if not browser:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return
        
        page = browser.page
        if not page:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        logger.info("üìÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
        result = await redistribution_service.open_redistribution_page(user_id)
        if not result["success"]:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {result['error']}")
            return
        
        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        logger.info("üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
        error_selectors = [
            "span.Form-select-input__error_0o5Vr-u",
            "span[class*='Form-select-input__error_0o5Vr-u']",
            "span[class*='Form-select-input__error']",
            "span.Form-select-input__error_Qp5MtLu", 
            "[class*='Form-select-input__error']",
            "[class*='error'][class*='form']",
            "[class*='error'][class*='select']",
            ".error-message",
            "[data-testid*='error']"
        ]
        
        found_errors = []
        
        for selector in error_selectors:
            try:
                error_elements = await page.query_selector_all(selector)
                logger.info(f"üîç –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(error_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, element in enumerate(error_elements):
                    try:
                        is_visible = await element.is_visible()
                        text = await element.text_content()
                        class_name = await element.get_attribute("class")
                        
                        logger.info(f"  üìù –≠–ª–µ–º–µ–Ω—Ç {i}: visible={is_visible}, text='{text}', class='{class_name}'")
                        
                        if is_visible and text and text.strip():
                            cleaned_text = text.strip()
                            if cleaned_text not in found_errors:
                                found_errors.append(cleaned_text)
                                logger.warning(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê: {cleaned_text}")
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
        
        # XPath –ø–æ–∏—Å–∫
        xpath_selectors = [
            "//*[contains(text(), '–ª–∏–º–∏—Ç')]",
            "//*[contains(text(), '–î–Ω–µ–≤–Ω–æ–π')]", 
            "//*[contains(text(), '–∏—Å—á–µ—Ä–ø–∞–Ω')]",
            "//*[contains(text(), '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ')]",
            "//*[contains(text(), '–æ—à–∏–±–∫–∞')]"
        ]
        
        for xpath in xpath_selectors:
            try:
                elements = await page.locator(f"xpath={xpath}").all()
                logger.info(f"üîç XPath '{xpath}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, element in enumerate(elements):
                    try:
                        is_visible = await element.is_visible()
                        text = await element.text_content()
                        
                        logger.info(f"  üìù XPath —ç–ª–µ–º–µ–Ω—Ç {i}: visible={is_visible}, text='{text}'")
                        
                        if is_visible and text and text.strip():
                            cleaned_text = text.strip()
                            if cleaned_text not in found_errors and len(cleaned_text) > 10:
                                found_errors.append(cleaned_text)
                                logger.warning(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê XPATH: {cleaned_text}")
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XPath —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ XPath –ø–æ–∏—Å–∫–∞ {xpath}: {e}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        logger.info("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...")
        broader_search_terms = [
            "–¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç",
            "–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω", 
            "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä",
            "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞",
            "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "–æ—à–∏–±–∫–∞"
        ]
        
        for term in broader_search_terms:
            try:
                xpath_selector = f"//*[contains(translate(text(), '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '{term.lower()}')]"
                elements = await page.locator(f"xpath={xpath_selector}").all()
                logger.info(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ '{term}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, element in enumerate(elements):
                    try:
                        is_visible = await element.is_visible()
                        text = await element.text_content()
                        
                        logger.info(f"  üìù –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç {i}: visible={is_visible}, text='{text}'")
                        
                        if is_visible and text and text.strip() and len(text.strip()) > 10:
                            cleaned_text = text.strip()
                            if cleaned_text not in found_errors:
                                found_errors.append(cleaned_text)
                                logger.warning(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–´–ú –ü–û–ò–°–ö–û–ú: {cleaned_text}")
                                break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω—É '{term}': {e}")
        
        # –ò—Ç–æ–≥–∏
        if found_errors:
            logger.info(f"üéØ –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö: {len(found_errors)}")
            for i, error in enumerate(found_errors, 1):
                logger.info(f"  {i}. {error}")
        else:
            logger.info("‚ÑπÔ∏è –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = f"screenshots_{user_id}/error_extraction_test.png"
        Path(f"screenshots_{user_id}").mkdir(exist_ok=True)
        await page.screenshot(path=screenshot_path)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        logger.info("üñ•Ô∏è –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        while True:
            await asyncio.sleep(60)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    finally:
        await close_database()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä: python test_error_extraction.py 123456789")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        asyncio.run(test_error_extraction(user_id))
    except ValueError:
        logger.error("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


