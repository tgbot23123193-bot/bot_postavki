#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ WB API.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.services.wb_stocks_service import get_wb_stocks_service
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def test_wb_api_stocks(user_id: int, article: str = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ WB API."""
    await init_database()
    
    try:
        wb_stocks_service = get_wb_stocks_service()
        
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WB API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if article:
            logger.info(f"üì¶ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: {article}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ API
        result = await wb_stocks_service.get_user_stocks(user_id, article)
        
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ü–†–û–°–ê:")
        logger.info(f"  Success: {result.get('success')}")
        logger.info(f"  User ID: {result.get('user_id')}")
        
        if result.get("success"):
            warehouses = result.get("warehouses", [])
            total_records = result.get("total_records", 0)
            
            logger.info(f"‚úÖ –£–°–ü–ï–•!")
            logger.info(f"  üìà –û–±—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Ç API: {total_records}")
            logger.info(f"  üè™ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            
            if warehouses:
                logger.info(f"\nüì¶ –°–ö–õ–ê–î–´ –° –¢–û–í–ê–†–ê–ú–ò:")
                for i, warehouse in enumerate(warehouses, 1):
                    name = warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    quantity = warehouse.get('quantity', 0)
                    quantity_full = warehouse.get('quantity_full', 0)
                    articles_count = warehouse.get('articles_count', 0)
                    
                    logger.info(f"  {i}. {name}")
                    logger.info(f"     üìä –û—Å—Ç–∞—Ç–æ–∫: {quantity} —à—Ç")
                    logger.info(f"     üìà –ü–æ–ª–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {quantity_full} —à—Ç")
                    logger.info(f"     üìã –ê—Ä—Ç–∏–∫—É–ª–æ–≤: {articles_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
                    articles = warehouse.get('articles', [])
                    if articles and len(articles) <= 3:
                        logger.info(f"     üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª—ã:")
                        for art in articles:
                            art_num = art.get('article', 'N/A')
                            art_qty = art.get('quantity', 0)
                            logger.info(f"        ‚Ä¢ {art_num} ({art_qty} —à—Ç)")
            else:
                logger.warning(f"‚ö†Ô∏è –°–∫–ª–∞–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                if article:
                    logger.info(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    logger.info(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª {article} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö")
                    logger.info(f"   ‚Ä¢ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ä–∞–≤–Ω—ã 0")
                    logger.info(f"   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞")
        else:
            error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            status_code = result.get("status_code")
            
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê!")
            logger.error(f"  üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error}")
            if status_code:
                logger.error(f"  üî¢ HTTP –∫–æ–¥: {status_code}")
            
            if "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω" in error:
                logger.info(f"üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                logger.info(f"   1. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                logger.info(f"   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω")
                logger.info(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–ª—é—á–∞")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await close_database()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä—ã:")
        logger.info("   python test_wb_api_stocks.py 123456789")
        logger.info("   python test_wb_api_stocks.py 123456789 446796490")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        article = sys.argv[2] if len(sys.argv) > 2 else None
        asyncio.run(test_wb_api_stocks(user_id, article))
    except ValueError:
        logger.error("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


