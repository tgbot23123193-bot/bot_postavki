#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from app.bot.keyboards.inline import get_api_keys_list_keyboard, get_api_key_management_keyboard
from app.services.database_service import db_service
from app.database.connection import init_database, close_database
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def test_api_keys_buttons(user_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π."""
    await init_database()
    
    try:
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_keys = await db_service.get_user_api_keys(user_id)
        
        if not api_keys:
            logger.warning("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç API –∫–ª—é—á–µ–π")
            return
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(api_keys)} API –∫–ª—é—á–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π...")
        try:
            list_keyboard = get_api_keys_list_keyboard(api_keys)
            logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(list_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
            for i, row in enumerate(list_keyboard.inline_keyboard):
                for j, button in enumerate(row):
                    logger.info(f"  –ö–Ω–æ–ø–∫–∞ [{i}][{j}]: '{button.text}' -> '{button.callback_data}'")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º –∫–ª—é—á–æ–º
        logger.info("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–æ–º...")
        first_key = api_keys[0]
        
        try:
            management_keyboard = get_api_key_management_keyboard(first_key)
            logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {len(management_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            for i, row in enumerate(management_keyboard.inline_keyboard):
                for j, button in enumerate(row):
                    logger.info(f"  –ö–Ω–æ–ø–∫–∞ [{i}][{j}]: '{button.text}' -> '{button.callback_data}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –µ—Å—Ç—å
                    if "üóë" in button.text:
                        logger.info(f"  ‚úÖ –ù–ê–ô–î–ï–ù–ê –ö–ù–û–ü–ö–ê –£–î–ê–õ–ï–ù–ò–Ø: '{button.text}'")
                        
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º callback_data —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å action
                        try:
                            from app.bot.keyboards.inline import APIKeyCallback
                            parsed_data = APIKeyCallback.unpack(button.callback_data)
                            logger.info(f"     Action: {parsed_data.action}")
                            logger.info(f"     Key ID: {parsed_data.key_id}")
                            
                            if parsed_data.action == "delete" and parsed_data.key_id == first_key.id:
                                logger.info(f"     ‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                            else:
                                logger.warning(f"     ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è")
                                
                        except Exception as e:
                            logger.error(f"     ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
        logger.info(f"\nüìä –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞ (ID: {first_key.id}):")
        logger.info(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {first_key.name}")
        logger.info(f"  üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {first_key.is_active}")
        logger.info(f"  ‚úÖ –í–∞–ª–∏–¥–µ–Ω: {first_key.is_valid}")
        logger.info(f"  üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {first_key.total_requests}")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {first_key.successful_requests}")
        logger.info(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {first_key.failed_requests}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_success_rate
        try:
            success_rate = first_key.get_success_rate()
            logger.info(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate * 100:.1f}%")
        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞: {e}")
        
        logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ API –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await close_database()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä: python test_api_keys_buttons.py 123456789")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        asyncio.run(test_api_keys_buttons(user_id))
    except ValueError:
        logger.error("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


