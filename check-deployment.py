#!/usr/bin/env python3
"""
Deployment Readiness Checker

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway.
"""

import os
import sys
from pathlib import Path


def check_file_exists(filepath: str, required: bool = True) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    exists = Path(filepath).exists()
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    requirement = "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if required else "–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û"
    print(f"{status} {filepath} ({requirement})")
    return exists


def check_docker_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Docker —Ñ–∞–π–ª—ã."""
    print("\nüê≥ DOCKER –§–ê–ô–õ–´:")
    print("-" * 40)
    
    all_good = True
    all_good &= check_file_exists("Dockerfile", required=True)
    all_good &= check_file_exists(".dockerignore", required=False)
    
    return all_good


def check_railway_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã Railway."""
    print("\nüöÇ RAILWAY –§–ê–ô–õ–´:")
    print("-" * 40)
    
    all_good = True
    all_good &= check_file_exists("railway.json", required=True)
    all_good &= check_file_exists("railway.toml", required=False)
    all_good &= check_file_exists("config_railway.env", required=False)
    
    return all_good


def check_project_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìÅ –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´:")
    print("-" * 40)
    
    all_good = True
    all_good &= check_file_exists("requirements.txt", required=True)
    all_good &= check_file_exists(".gitignore", required=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
    if Path("wb_bot/app/main.py").exists():
        all_good &= check_file_exists("wb_bot/app/main.py", required=True)
    elif Path("app/main.py").exists():
        all_good &= check_file_exists("app/main.py", required=True)
    else:
        print("‚ùå main.py –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ wb_bot/app/, –Ω–∏ –≤ app/")
        all_good = False
    
    return all_good


def check_git_status() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git."""
    print("\nüìù GIT –°–¢–ê–¢–£–°:")
    print("-" * 40)
    
    if not Path(".git").exists():
        print("‚ùå Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git init")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
    result = os.system("git log --oneline -1 > /dev/null 2>&1")
    if result != 0:
        print("‚ö†Ô∏è  –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git add . && git commit -m 'Initial commit'")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ remote
    result = os.system("git remote -v > /dev/null 2>&1")
    if result != 0:
        print("‚ö†Ô∏è  –ù–µ—Ç remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git remote add origin <URL>")
        return False
    
    print("‚úÖ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True


def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    print("-" * 40)
    
    if not Path("requirements.txt").exists():
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open("requirements.txt", "r", encoding="utf-8") as f:
        requirements = f.read().lower()
    
    critical_deps = [
        "aiogram",
        "asyncpg", 
        "sqlalchemy",
        "aiohttp",
        "pydantic",
        "redis",
        "playwright"
    ]
    
    missing_deps = []
    for dep in critical_deps:
        if dep not in requirements:
            missing_deps.append(dep)
    
    if missing_deps:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        return False
    
    print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def print_deployment_checklist():
    """–ü–µ—á–∞—Ç–∞–µ—Ç —á–µ–∫–ª–∏—Å—Ç –¥–ª—è –¥–µ–ø–ª–æ—è."""
    print("\nüìã –ß–ï–ö–õ–ò–°–¢ –î–õ–Ø –î–ï–ü–õ–û–Ø:")
    print("="*50)
    print("‚ñ° –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    print("‚ñ° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (railway-setup.py)")
    print("‚ñ° –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
    print("‚ñ° –ó–∞–ø—É—à–∏—Ç—å –∫–æ–¥: git push origin main")
    print("‚ñ° –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway")
    print("‚ñ° –î–æ–±–∞–≤–∏—Ç—å PostgreSQL –∏ Redis")
    print("‚ñ° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("‚ñ° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è")
    print("‚ñ° –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç –≤ Telegram")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ")
    print("="*50)
    
    all_checks = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    all_checks.append(check_project_files())
    all_checks.append(check_docker_files())  
    all_checks.append(check_railway_files())
    all_checks.append(check_dependencies())
    all_checks.append(check_git_status())
    
    print("\n" + "="*50)
    
    if all(all_checks):
        print("üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. python railway-setup.py")
        print("2. git push origin main") 
        print("3. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway")
    else:
        print("‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ")
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print_deployment_checklist()
        return False
    
    print_deployment_checklist()
    return True


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
